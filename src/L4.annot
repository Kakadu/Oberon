"L4.ml" 8 141 158 "L4.ml" 8 141 161
type(
  (< coord : 'b;
     getIDENT : ('a, Ostap.Matcher.Token.t, Ostap.Reason.t)
                Ostap.Combinators.result;
     getLITERAL : ('a, Ostap.Matcher.Token.t, Ostap.Reason.t)
                  Ostap.Combinators.result;
     loc : Ostap.Msg.Locator.t;
     look : string -> ('a, 'c, Ostap.Reason.t) Ostap.Combinators.result;
     pos : 'd;
     regexp : string ->
              string -> ('a, 'c, Ostap.Reason.t) Ostap.Combinators.result;
     skip : 'd -> 'b -> [> `Skipped of 'e * Ostap.Msg.Coord.t ]; .. >
   as 'a,
   [> `Binop of
        [> `Add
         | `And
         | `Div
         | `Eq
         | `Ge
         | `Gt
         | `Le
         | `Lt
         | `Mod
         | `Mul
         | `Ne
         | `Or
         | `Sub ] *
        'f * 'f
    | `Const of [> `False | `Literal of int | `True ]
    | `Field of 'f * string
    | `Ident of string
    | `Index of 'f * 'f
    | `Unop of [> `Neg | `Not ] * 'f ]
   as 'f, Ostap.Reason.t)
  Ostap.Combinators.parse ->
  'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  ext_ref Common.loc
)
"L4.ml" 8 141 170 "L4.ml" 8 141 175
type(
  'f
)
ident(
  def base "L4.ml" 8 141 197 "L4.ml" 8 141 212
)
"L4.ml" 8 141 177 "L4.ml" 8 141 195
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref L1.Parse.reference
)
"L4.ml" 8 141 197 "L4.ml" 8 141 206
type(
  'f -> 'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  int_ref selectors "L4.ml" 8 141 147 "L4.ml" 20 803 863
)
"L4.ml" 8 141 207 "L4.ml" 8 141 211
type(
  'f
)
ident(
  int_ref base "L4.ml" 8 141 170 "L4.ml" 8 141 175
)
"L4.ml" 8 141 197 "L4.ml" 8 141 212
call(
  tail
)
type(
  'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 8 141 197 "L4.ml" 8 141 212
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 8 141 197 "L4.ml" 8 141 212
)
"L4.ml" 8 141 169 "L4.ml" 8 141 212
type(
  'f -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('f -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse) ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.seq
)
"L4.ml" 8 141 162 "L4.ml" 8 141 213
call(
  tail
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 8 141 162 "L4.ml" 8 141 213
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 8 141 162 "L4.ml" 8 141 213
)
"L4.ml" 8 141 158 "L4.ml" 8 141 214
call(
  tail
)
type(
  'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 8 141 158 "L4.ml" 8 141 214
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 8 141 158 "L4.ml" 8 141 214
)
"L4.ml" 8 141 147 "L4.ml" 8 141 214
type(
  'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 8 141 147 "L4.ml" 8 141 214
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 8 141 147 "L4.ml" 8 141 214
)
"L4.ml" 9 216 232 "L4.ml" 9 216 236
type(
  'f
)
ident(
  def base "L4.ml" 9 216 222 "L4.ml" 15 454 508
)
"L4.ml" 10 240 248 "L4.ml" 10 240 251
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  ext_ref Common.loc
)
"L4.ml" 11 259 273 "L4.ml" 11 259 277
type(
  'f
)
ident(
  def sel "L4.ml" 13 407 427 "L4.ml" 13 407 441
)
"L4.ml" 11 259 280 "L4.ml" 11 259 283
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  ext_ref Common.loc
)
"L4.ml" 11 259 291 "L4.ml" 11 259 294
call(
  tail
)
type(
  ('a, 'c, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'c, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  string
)
type(
  string -> ('a, 'c, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 11 259 291 "L4.ml" 11 259 294
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 11 259 291 "L4.ml" 11 259 294
)
"L4.ml" 11 259 295 "L4.ml" 11 259 297
type(
  'f
)
ident(
  def i "L4.ml" 11 259 291 "L4.ml" 11 259 330
)
"L4.ml" 11 259 297 "L4.ml" 11 259 307
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref expression "L4.ml" 8 141 147 "L4.ml" 20 803 863
)
"L4.ml" 11 259 308 "L4.ml" 11 259 311
call(
  tail
)
type(
  ('a, 'c, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'c, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  string
)
type(
  string -> ('a, 'c, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 11 259 308 "L4.ml" 11 259 311
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 11 259 308 "L4.ml" 11 259 311
)
"L4.ml" 11 259 321 "L4.ml" 11 259 325
type(
  'f
)
ident(
  int_ref base "L4.ml" 9 216 232 "L4.ml" 9 216 236
)
"L4.ml" 11 259 327 "L4.ml" 11 259 328
type(
  'f
)
ident(
  int_ref i "L4.ml" 11 259 295 "L4.ml" 11 259 297
)
"L4.ml" 11 259 320 "L4.ml" 11 259 329
type(
  'f * 'f
)
"L4.ml" 11 259 313 "L4.ml" 11 259 329
type(
  'f
)
"L4.ml" 11 259 291 "L4.ml" 11 259 330
call(
  tail
)
call(
  tail
)
type(
  'c -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  'f -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  'c -> 'f
)
type(
  'c
)
ident(
  def _0 "L4.ml" 11 259 313 "L4.ml" 11 259 329
)
type(
  'c
)
type(
  ('c -> 'f) ->
  ('a, 'c, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.map
)
type(
  'f
)
ident(
  def _1 "L4.ml" 11 259 291 "L4.ml" 11 259 330
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('f -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse) ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.seq
)
type(
  'c
)
ident(
  def _2 "L4.ml" 11 259 291 "L4.ml" 11 259 330
)
type(
  'c
)
type(
  ('a, 'c, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('c -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse) ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.seq
)
"L4.ml" 11 259 284 "L4.ml" 11 259 331
call(
  tail
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 11 259 284 "L4.ml" 11 259 331
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 11 259 284 "L4.ml" 11 259 331
)
"L4.ml" 11 259 280 "L4.ml" 11 259 332
call(
  tail
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 11 259 280 "L4.ml" 11 259 332
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 11 259 280 "L4.ml" 11 259 332
)
"L4.ml" 12 333 354 "L4.ml" 12 333 357
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  ext_ref Common.loc
)
"L4.ml" 12 333 365 "L4.ml" 12 333 368
call(
  tail
)
type(
  ('a, 'c, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'c, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  string
)
type(
  string -> ('a, 'c, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 12 333 365 "L4.ml" 12 333 368
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 12 333 365 "L4.ml" 12 333 368
)
"L4.ml" 12 333 369 "L4.ml" 12 333 371
type(
  string
)
ident(
  def f "L4.ml" 12 333 387 "L4.ml" 12 333 403
)
"L4.ml" 12 333 371 "L4.ml" 12 333 376
type(
  ('a, string, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Common.ident
)
"L4.ml" 12 333 395 "L4.ml" 12 333 399
type(
  'f
)
ident(
  int_ref base "L4.ml" 9 216 232 "L4.ml" 9 216 236
)
"L4.ml" 12 333 401 "L4.ml" 12 333 402
type(
  string
)
ident(
  int_ref f "L4.ml" 12 333 369 "L4.ml" 12 333 371
)
"L4.ml" 12 333 394 "L4.ml" 12 333 403
type(
  'f * string
)
"L4.ml" 12 333 387 "L4.ml" 12 333 403
type(
  'f
)
"L4.ml" 12 333 365 "L4.ml" 12 333 404
call(
  tail
)
type(
  'c -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  string -> 'f
)
type(
  string
)
ident(
  def _0 "L4.ml" 12 333 387 "L4.ml" 12 333 403
)
type(
  (string -> 'f) ->
  ('a, string, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.map
)
type(
  'c
)
ident(
  def _1 "L4.ml" 12 333 365 "L4.ml" 12 333 404
)
type(
  'c
)
type(
  ('a, 'c, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('c -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse) ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.seq
)
"L4.ml" 12 333 358 "L4.ml" 12 333 405
call(
  tail
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 12 333 358 "L4.ml" 12 333 405
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 12 333 358 "L4.ml" 12 333 405
)
"L4.ml" 12 333 354 "L4.ml" 12 333 406
call(
  tail
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 12 333 354 "L4.ml" 12 333 406
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 12 333 354 "L4.ml" 12 333 406
)
"L4.ml" 11 259 280 "L4.ml" 12 333 406
call(
  stack
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.alt
)
"L4.ml" 13 407 427 "L4.ml" 13 407 436
type(
  'f -> 'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  int_ref selectors "L4.ml" 8 141 147 "L4.ml" 20 803 863
)
"L4.ml" 13 407 437 "L4.ml" 13 407 440
type(
  'f
)
ident(
  int_ref sel "L4.ml" 11 259 273 "L4.ml" 11 259 277
)
"L4.ml" 13 407 427 "L4.ml" 13 407 441
call(
  tail
)
type(
  'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 13 407 427 "L4.ml" 13 407 441
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 13 407 427 "L4.ml" 13 407 441
)
"L4.ml" 11 259 272 "L4.ml" 13 407 441
type(
  'f -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('f -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse) ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.seq
)
"L4.ml" 10 240 252 "L4.ml" 14 443 452
call(
  tail
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 10 240 252 "L4.ml" 14 443 452
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 10 240 252 "L4.ml" 14 443 452
)
"L4.ml" 10 240 248 "L4.ml" 14 443 453
call(
  tail
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 10 240 248 "L4.ml" 14 443 453
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 10 240 248 "L4.ml" 14 443 453
)
"L4.ml" 15 454 462 "L4.ml" 15 454 465
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  ext_ref Common.loc
)
"L4.ml" 15 454 475 "L4.ml" 15 454 498
type(
  ('a, unit, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.empty
)
"L4.ml" 15 454 501 "L4.ml" 15 454 505
type(
  'f
)
ident(
  int_ref base "L4.ml" 9 216 232 "L4.ml" 9 216 236
)
"L4.ml" 15 454 473 "L4.ml" 15 454 506
type(
  unit -> 'f
)
type(
  unit
)
ident(
  def _0 "L4.ml" 15 454 501 "L4.ml" 15 454 505
)
type(
  unit
)
type(
  (unit -> 'f) ->
  ('a, unit, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.map
)
"L4.ml" 15 454 466 "L4.ml" 15 454 507
call(
  tail
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 15 454 466 "L4.ml" 15 454 507
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 15 454 466 "L4.ml" 15 454 507
)
"L4.ml" 15 454 462 "L4.ml" 15 454 508
call(
  tail
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 15 454 462 "L4.ml" 15 454 508
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 15 454 462 "L4.ml" 15 454 508
)
"L4.ml" 10 240 248 "L4.ml" 15 454 508
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.alt
)
"L4.ml" 9 216 222 "L4.ml" 15 454 508
call(
  tail
)
type(
  'f -> 'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 9 216 222 "L4.ml" 15 454 508
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 9 216 222 "L4.ml" 15 454 508
)
"L4.ml" 16 510 532 "L4.ml" 16 510 554
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  ext_ref SimpleExpression.parse
)
"L4.ml" 16 510 556 "L4.ml" 16 510 565
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref reference "L4.ml" 8 141 147 "L4.ml" 20 803 863
)
"L4.ml" 16 510 530 "L4.ml" 16 510 566
call(
  tail
)
type(
  'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 16 510 530 "L4.ml" 16 510 566
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 16 510 530 "L4.ml" 16 510 566
)
"L4.ml" 16 510 516 "L4.ml" 16 510 566
type(
  'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 16 510 516 "L4.ml" 16 510 566
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 16 510 516 "L4.ml" 16 510 566
)
"L4.ml" 17 568 590 "L4.ml" 17 568 609
type(
  ('a,
   [> `Binop of
        [> `Add
         | `And
         | `Div
         | `Eq
         | `Ge
         | `Gt
         | `Le
         | `Lt
         | `Mod
         | `Mul
         | `Ne
         | `Or
         | `Sub ] *
        'g * 'g
    | `Const of [> `False | `Literal of int | `True ]
    | `Ident of string
    | `Unop of [> `Neg | `Not ] * 'g ]
   as 'g, Ostap.Reason.t)
  Ostap.Combinators.parse ->
  ('a,
   [> `Array of 'g * 'h | `Record of (string * 'h) list | `User of string ]
   as 'h, Ostap.Reason.t)
  Ostap.Combinators.parse -> ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref CompositeType.parse
)
"L4.ml" 17 568 611 "L4.ml" 17 568 630
type(
  ('a, 'g, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref L1.Parse.expression
)
"L4.ml" 17 568 632 "L4.ml" 17 568 651
type(
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref PrimitiveType.parse
)
"L4.ml" 17 568 588 "L4.ml" 17 568 652
call(
  tail
)
type(
  'a -> ('a, 'h, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 17 568 588 "L4.ml" 17 568 652
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 17 568 588 "L4.ml" 17 568 652
)
"L4.ml" 17 568 574 "L4.ml" 17 568 652
type(
  'a -> ('a, 'h, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 17 568 574 "L4.ml" 17 568 652
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 17 568 574 "L4.ml" 17 568 652
)
"L4.ml" 18 654 676 "L4.ml" 18 654 697
type(
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a,
   [> `Assign of 'f * 'f
    | `Call of string * 'f list
    | `Case of
        'f *
        ([> `Atom of
              [> `Binop of
                   [> `Add
                    | `And
                    | `Div
                    | `Eq
                    | `Ge
                    | `Gt
                    | `Le
                    | `Lt
                    | `Mod
                    | `Mul
                    | `Ne
                    | `Or
                    | `Sub ] *
                   'j * 'j
               | `Const of [> `False | `Literal of int | `True ]
               | `Ident of string
               | `Unop of [> `Neg | `Not ] * 'j ]
              as 'j
          | `Interval of 'j * 'j ]
         list * 'i list)
        list * 'i list
    | `For of 'f * 'f * 'f * 'j option * 'i list
    | `If of ('f * 'i list) list * 'i list
    | `While of 'f * 'i list ]
   as 'i, Ostap.Reason.t)
  Ostap.Combinators.parse ->
  ('a,
   ((string *
     ([> `Binop of
           [> `Add
            | `And
            | `Div
            | `Eq
            | `Ge
            | `Gt
            | `Le
            | `Lt
            | `Mod
            | `Mul
            | `Ne
            | `Or
            | `Sub ] *
           'l * 'l
       | `Const of [> `False | `Literal of int | `True ]
       | `Ident of string
       | `Unop of [> `Neg | `Not ] * 'l ]
      as 'l))
    list * (string * 'h) list * (string list * 'h) list) *
   (string * ([> `Val | `Var ] * string * 'h) list * 'k * 'i list) list as 'k,
   Ostap.Reason.t)
  Ostap.Combinators.parse
)
ident(
  ext_ref L3.Parse.declarations
)
"L4.ml" 18 654 699 "L4.ml" 18 654 702
type(
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref typ "L4.ml" 8 141 147 "L4.ml" 20 803 863
)
"L4.ml" 18 654 704 "L4.ml" 18 654 713
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref statement "L4.ml" 8 141 147 "L4.ml" 20 803 863
)
"L4.ml" 18 654 674 "L4.ml" 18 654 714
call(
  tail
)
type(
  'a -> ('a, 'k, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'k, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 18 654 674 "L4.ml" 18 654 714
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 18 654 674 "L4.ml" 18 654 714
)
"L4.ml" 18 654 660 "L4.ml" 18 654 714
type(
  'a -> ('a, 'k, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'k, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 18 654 660 "L4.ml" 18 654 714
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 18 654 660 "L4.ml" 18 654 714
)
"L4.ml" 19 716 738 "L4.ml" 19 716 756
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'j, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref L3.Parse.statement
)
"L4.ml" 19 716 758 "L4.ml" 19 716 767
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref reference "L4.ml" 8 141 147 "L4.ml" 20 803 863
)
"L4.ml" 19 716 769 "L4.ml" 19 716 788
type(
  ('a, 'j, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref L1.Parse.expression
)
"L4.ml" 19 716 790 "L4.ml" 19 716 800
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref expression "L4.ml" 8 141 147 "L4.ml" 20 803 863
)
"L4.ml" 19 716 736 "L4.ml" 19 716 801
call(
  tail
)
type(
  'a -> ('a, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 19 716 736 "L4.ml" 19 716 801
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 19 716 736 "L4.ml" 19 716 801
)
"L4.ml" 19 716 722 "L4.ml" 19 716 801
type(
  'a -> ('a, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 19 716 722 "L4.ml" 19 716 801
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 19 716 722 "L4.ml" 19 716 801
)
"L4.ml" 20 803 825 "L4.ml" 20 803 837
type(
  ('a, 'k, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  'a -> ('a, string * 'k * 'i list, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  ext_ref Module.parse
)
"L4.ml" 20 803 839 "L4.ml" 20 803 851
type(
  ('a, 'k, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref declarations "L4.ml" 8 141 147 "L4.ml" 20 803 863
)
"L4.ml" 20 803 853 "L4.ml" 20 803 862
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref statement "L4.ml" 8 141 147 "L4.ml" 20 803 863
)
"L4.ml" 20 803 823 "L4.ml" 20 803 863
call(
  tail
)
type(
  'a -> ('a, string * 'k * 'i list, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, string * 'k * 'i list, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 20 803 823 "L4.ml" 20 803 863
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 20 803 823 "L4.ml" 20 803 863
)
"L4.ml" 20 803 809 "L4.ml" 20 803 863
type(
  'a -> ('a, string * 'k * 'i list, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, string * 'k * 'i list, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L4.ml" 20 803 809 "L4.ml" 20 803 863
)
type(
  'a
)
ident(
  def _ostap_stream "L4.ml" 20 803 809 "L4.ml" 20 803 863
)
"L4.ml" 8 141 147 "L4.ml" 20 803 863
type(
  'a -> ('a, string * 'k * 'i list, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  def program "L4.ml" 7 127 131 "L4.ml" 22 870 875
)
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  def statement "L4.ml" 7 127 131 "L4.ml" 22 870 875
)
type(
  ('a, 'k, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  def declarations "L4.ml" 7 127 131 "L4.ml" 22 870 875
)
type(
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  def typ "L4.ml" 7 127 131 "L4.ml" 22 870 875
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  def expression "L4.ml" 7 127 131 "L4.ml" 22 870 875
)
type(
  'f -> 'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  def selectors "L4.ml" 7 127 131 "L4.ml" 22 870 875
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  def reference "L4.ml" 7 127 131 "L4.ml" 22 870 875
)
"L4.ml" 31 1029 1041 "L4.ml" 31 1029 1044
type(
  ('a -> string) ->
  ([> `Binop of
        [< `Add
         | `And
         | `Div
         | `Eq
         | `Ge
         | `Gt
         | `Le
         | `Lt
         | `Mod
         | `Mul
         | `Ne
         | `Or
         | `Sub ] *
        'b * 'b
    | `Const of [< `False | `Literal of int | `True ]
    | `Field of 'b * string
    | `Ident of 'a
    | `Index of 'b * 'b
    | `Unop of [< `Neg | `Not ] * 'b ]
   as 'b) ->
  (Ostap.Pretty.printer * int) Monad.Id.t
)
ident(
  def ref "L4.ml" 31 1029 1033 "L4.ml" 49 1829 1834
)
"L4.ml" 31 1029 1045 "L4.ml" 31 1029 1046
type(
  'a -> string
)
ident(
  def p "L4.ml" 31 1029 1049 "L4.ml" 35 1269 1288
)
"L4.ml" 32 1059 1073 "L4.ml" 32 1059 1074
type(
  'b
)
ident(
  def r "L4.ml" 32 1059 1082 "L4.ml" 32 1059 1155
)
"L4.ml" 32 1059 1076 "L4.ml" 32 1059 1077
type(
  'b
)
ident(
  def i "L4.ml" 32 1059 1082 "L4.ml" 32 1059 1155
)
"L4.ml" 32 1059 1073 "L4.ml" 32 1059 1077
type(
  'b * 'b
)
"L4.ml" 32 1059 1065 "L4.ml" 32 1059 1078
type(
  'b
)
"L4.ml" 32 1059 1082 "L4.ml" 32 1059 1090
type(
  Ostap.Pretty.printer -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.hovboxed
)
"L4.ml" 32 1059 1092 "L4.ml" 32 1059 1095
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.seq
)
"L4.ml" 32 1059 1097 "L4.ml" 32 1059 1106
type(
  ('a -> string) -> 'b -> Ostap.Pretty.printer
)
ident(
  int_ref reference "L4.ml" 37 1356 1364 "L4.ml" 37 1356 1373
)
"L4.ml" 32 1059 1107 "L4.ml" 32 1059 1108
type(
  'a -> string
)
ident(
  int_ref p "L4.ml" 31 1029 1045 "L4.ml" 31 1029 1046
)
"L4.ml" 32 1059 1109 "L4.ml" 32 1059 1110
type(
  'b
)
ident(
  int_ref r "L4.ml" 32 1059 1073 "L4.ml" 32 1059 1074
)
"L4.ml" 32 1059 1097 "L4.ml" 32 1059 1110
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 32 1059 1112 "L4.ml" 32 1059 1118
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 32 1059 1119 "L4.ml" 32 1059 1122
type(
  string
)
"L4.ml" 32 1059 1112 "L4.ml" 32 1059 1122
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 32 1059 1124 "L4.ml" 32 1059 1134
type(
  ('a -> string) -> 'b -> Ostap.Pretty.printer
)
ident(
  int_ref expression "L4.ml" 38 1396 1404 "L4.ml" 38 1396 1414
)
"L4.ml" 32 1059 1135 "L4.ml" 32 1059 1136
type(
  'a -> string
)
ident(
  int_ref p "L4.ml" 31 1029 1045 "L4.ml" 31 1029 1046
)
"L4.ml" 32 1059 1137 "L4.ml" 32 1059 1138
type(
  'b
)
ident(
  int_ref i "L4.ml" 32 1059 1076 "L4.ml" 32 1059 1077
)
"L4.ml" 32 1059 1124 "L4.ml" 32 1059 1138
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 32 1059 1140 "L4.ml" 32 1059 1146
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 32 1059 1147 "L4.ml" 32 1059 1150
type(
  string
)
"L4.ml" 32 1059 1140 "L4.ml" 32 1059 1150
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 32 1059 1096 "L4.ml" 32 1059 1151
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 32 1059 1091 "L4.ml" 32 1059 1152
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 32 1059 1082 "L4.ml" 32 1059 1152
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 32 1059 1154 "L4.ml" 32 1059 1155
type(
  int
)
"L4.ml" 32 1059 1082 "L4.ml" 32 1059 1155
type(
  Ostap.Pretty.printer * int
)
"L4.ml" 33 1156 1170 "L4.ml" 33 1156 1171
type(
  'b
)
ident(
  def r "L4.ml" 33 1156 1179 "L4.ml" 33 1156 1234
)
"L4.ml" 33 1156 1173 "L4.ml" 33 1156 1174
type(
  string
)
ident(
  def f "L4.ml" 33 1156 1179 "L4.ml" 33 1156 1234
)
"L4.ml" 33 1156 1170 "L4.ml" 33 1156 1174
type(
  'b * string
)
"L4.ml" 33 1156 1162 "L4.ml" 33 1156 1175
type(
  'b
)
"L4.ml" 33 1156 1179 "L4.ml" 33 1156 1187
type(
  Ostap.Pretty.printer -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.hovboxed
)
"L4.ml" 33 1156 1189 "L4.ml" 33 1156 1192
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.seq
)
"L4.ml" 33 1156 1194 "L4.ml" 33 1156 1203
type(
  ('a -> string) -> 'b -> Ostap.Pretty.printer
)
ident(
  int_ref reference "L4.ml" 37 1356 1364 "L4.ml" 37 1356 1373
)
"L4.ml" 33 1156 1204 "L4.ml" 33 1156 1205
type(
  'a -> string
)
ident(
  int_ref p "L4.ml" 31 1029 1045 "L4.ml" 31 1029 1046
)
"L4.ml" 33 1156 1206 "L4.ml" 33 1156 1207
type(
  'b
)
ident(
  int_ref r "L4.ml" 33 1156 1170 "L4.ml" 33 1156 1171
)
"L4.ml" 33 1156 1194 "L4.ml" 33 1156 1207
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 33 1156 1209 "L4.ml" 33 1156 1215
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 33 1156 1216 "L4.ml" 33 1156 1219
type(
  string
)
"L4.ml" 33 1156 1209 "L4.ml" 33 1156 1219
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 33 1156 1221 "L4.ml" 33 1156 1227
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 33 1156 1228 "L4.ml" 33 1156 1229
type(
  string
)
ident(
  int_ref f "L4.ml" 33 1156 1173 "L4.ml" 33 1156 1174
)
"L4.ml" 33 1156 1221 "L4.ml" 33 1156 1229
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 33 1156 1193 "L4.ml" 33 1156 1230
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 33 1156 1188 "L4.ml" 33 1156 1231
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 33 1156 1179 "L4.ml" 33 1156 1231
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 33 1156 1233 "L4.ml" 33 1156 1234
type(
  int
)
"L4.ml" 33 1156 1179 "L4.ml" 33 1156 1234
type(
  Ostap.Pretty.printer * int
)
"L4.ml" 34 1235 1248 "L4.ml" 34 1235 1249
type(
  'a
)
ident(
  def x "L4.ml" 34 1235 1253 "L4.ml" 34 1235 1268
)
"L4.ml" 34 1235 1241 "L4.ml" 34 1235 1249
type(
  'b
)
"L4.ml" 34 1235 1253 "L4.ml" 34 1235 1259
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 34 1235 1261 "L4.ml" 34 1235 1262
type(
  'a -> string
)
ident(
  int_ref p "L4.ml" 31 1029 1045 "L4.ml" 31 1029 1046
)
"L4.ml" 34 1235 1263 "L4.ml" 34 1235 1264
type(
  'a
)
ident(
  int_ref x "L4.ml" 34 1235 1248 "L4.ml" 34 1235 1249
)
"L4.ml" 34 1235 1260 "L4.ml" 34 1235 1265
call(
  stack
)
type(
  string
)
"L4.ml" 34 1235 1253 "L4.ml" 34 1235 1265
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 34 1235 1267 "L4.ml" 34 1235 1268
type(
  int
)
"L4.ml" 34 1235 1253 "L4.ml" 34 1235 1268
type(
  Ostap.Pretty.printer * int
)
"L4.ml" 35 1269 1275 "L4.ml" 35 1269 1276
type(
  'b
)
ident(
  def x "L4.ml" 35 1269 1280 "L4.ml" 35 1269 1288
)
"L4.ml" 35 1269 1280 "L4.ml" 35 1269 1284
type(
  ('a -> string) -> 'b -> (Ostap.Pretty.printer * int) Monad.Id.t
)
ident(
  int_ref expr "L4.ml" 36 1289 1297 "L4.ml" 36 1289 1301
)
"L4.ml" 35 1269 1285 "L4.ml" 35 1269 1286
type(
  'a -> string
)
ident(
  int_ref p "L4.ml" 31 1029 1045 "L4.ml" 31 1029 1046
)
"L4.ml" 35 1269 1287 "L4.ml" 35 1269 1288
type(
  'b
)
ident(
  int_ref x "L4.ml" 35 1269 1275 "L4.ml" 35 1269 1276
)
"L4.ml" 35 1269 1280 "L4.ml" 35 1269 1288
call(
  tail
)
type(
  (Ostap.Pretty.printer * int) Monad.Id.t
)
"L4.ml" 31 1029 1049 "L4.ml" 35 1269 1288
type(
  'b -> (Ostap.Pretty.printer * int) Monad.Id.t
)
"L4.ml" 31 1029 1045 "L4.ml" 35 1269 1288
type(
  ('a -> string) -> 'b -> (Ostap.Pretty.printer * int) Monad.Id.t
)
"L4.ml" 36 1289 1297 "L4.ml" 36 1289 1301
type(
  ('a -> string) -> 'b -> (Ostap.Pretty.printer * int) Monad.Id.t
)
ident(
  def expr "L4.ml" 31 1029 1033 "L4.ml" 49 1829 1834
)
"L4.ml" 36 1289 1308 "L4.ml" 36 1289 1309
type(
  'a -> string
)
ident(
  def f "L4.ml" 36 1289 1310 "L4.ml" 36 1289 1355
)
"L4.ml" 36 1289 1310 "L4.ml" 36 1289 1311
type(
  'b
)
ident(
  def x "L4.ml" 36 1289 1314 "L4.ml" 36 1289 1355
)
"L4.ml" 36 1289 1314 "L4.ml" 36 1289 1336
type(
  (('b -> (Ostap.Pretty.printer * int) Monad.Id.t) ->
   'b -> (Ostap.Pretty.printer * int) Monad.Id.t) ->
  'b -> (Ostap.Pretty.printer * int) Monad.Id.t
)
ident(
  ext_ref SimpleExpression.print
)
"L4.ml" 36 1289 1338 "L4.ml" 36 1289 1344
type(
  ('b -> (Ostap.Pretty.printer * int) Monad.Id.t) ->
  ('b -> (Ostap.Pretty.printer * int) Monad.Id.t) ->
  'b -> (Ostap.Pretty.printer * int) Monad.Id.t
)
ident(
  ext_ref Common.return
)
"L4.ml" 36 1289 1346 "L4.ml" 36 1289 1349
type(
  ('a -> string) -> 'b -> (Ostap.Pretty.printer * int) Monad.Id.t
)
ident(
  int_ref ref "L4.ml" 31 1029 1041 "L4.ml" 31 1029 1044
)
"L4.ml" 36 1289 1350 "L4.ml" 36 1289 1351
type(
  'a -> string
)
ident(
  int_ref f "L4.ml" 36 1289 1308 "L4.ml" 36 1289 1309
)
"L4.ml" 36 1289 1345 "L4.ml" 36 1289 1352
call(
  stack
)
type(
  'b -> (Ostap.Pretty.printer * int) Monad.Id.t
)
"L4.ml" 36 1289 1337 "L4.ml" 36 1289 1353
call(
  stack
)
type(
  ('b -> (Ostap.Pretty.printer * int) Monad.Id.t) ->
  'b -> (Ostap.Pretty.printer * int) Monad.Id.t
)
"L4.ml" 36 1289 1354 "L4.ml" 36 1289 1355
type(
  'b
)
ident(
  int_ref x "L4.ml" 36 1289 1310 "L4.ml" 36 1289 1311
)
"L4.ml" 36 1289 1314 "L4.ml" 36 1289 1355
call(
  tail
)
type(
  (Ostap.Pretty.printer * int) Monad.Id.t
)
"L4.ml" 36 1289 1310 "L4.ml" 36 1289 1355
type(
  'b -> (Ostap.Pretty.printer * int) Monad.Id.t
)
"L4.ml" 36 1289 1308 "L4.ml" 36 1289 1355
type(
  ('a -> string) -> 'b -> (Ostap.Pretty.printer * int) Monad.Id.t
)
"L4.ml" 37 1356 1364 "L4.ml" 37 1356 1373
type(
  ('a -> string) -> 'b -> Ostap.Pretty.printer
)
ident(
  def reference "L4.ml" 31 1029 1033 "L4.ml" 49 1829 1834
)
"L4.ml" 37 1356 1375 "L4.ml" 37 1356 1376
type(
  'a -> string
)
ident(
  def f "L4.ml" 37 1356 1377 "L4.ml" 37 1356 1395
)
"L4.ml" 37 1356 1377 "L4.ml" 37 1356 1378
type(
  'b
)
ident(
  def x "L4.ml" 37 1356 1381 "L4.ml" 37 1356 1395
)
"L4.ml" 37 1356 1381 "L4.ml" 37 1356 1384
type(
  (Ostap.Pretty.printer * int) Monad.Id.t -> Ostap.Pretty.printer
)
ident(
  ext_ref Pervasives.fst
)
"L4.ml" 37 1356 1386 "L4.ml" 37 1356 1389
type(
  ('a -> string) -> 'b -> (Ostap.Pretty.printer * int) Monad.Id.t
)
ident(
  int_ref ref "L4.ml" 31 1029 1041 "L4.ml" 31 1029 1044
)
"L4.ml" 37 1356 1391 "L4.ml" 37 1356 1392
type(
  'a -> string
)
ident(
  int_ref f "L4.ml" 37 1356 1375 "L4.ml" 37 1356 1376
)
"L4.ml" 37 1356 1393 "L4.ml" 37 1356 1394
type(
  'b
)
ident(
  int_ref x "L4.ml" 37 1356 1377 "L4.ml" 37 1356 1378
)
"L4.ml" 37 1356 1385 "L4.ml" 37 1356 1395
call(
  stack
)
type(
  (Ostap.Pretty.printer * int) Monad.Id.t
)
"L4.ml" 37 1356 1381 "L4.ml" 37 1356 1395
type(
  Ostap.Pretty.printer
)
"L4.ml" 37 1356 1377 "L4.ml" 37 1356 1395
type(
  'b -> Ostap.Pretty.printer
)
"L4.ml" 37 1356 1375 "L4.ml" 37 1356 1395
type(
  ('a -> string) -> 'b -> Ostap.Pretty.printer
)
"L4.ml" 38 1396 1404 "L4.ml" 38 1396 1414
type(
  ('a -> string) -> 'b -> Ostap.Pretty.printer
)
ident(
  def expression "L4.ml" 31 1029 1033 "L4.ml" 49 1829 1834
)
"L4.ml" 38 1396 1415 "L4.ml" 38 1396 1416
type(
  'a -> string
)
ident(
  def f "L4.ml" 38 1396 1417 "L4.ml" 38 1396 1435
)
"L4.ml" 38 1396 1417 "L4.ml" 38 1396 1418
type(
  'b
)
ident(
  def x "L4.ml" 38 1396 1421 "L4.ml" 38 1396 1435
)
"L4.ml" 38 1396 1421 "L4.ml" 38 1396 1424
type(
  (Ostap.Pretty.printer * int) Monad.Id.t -> Ostap.Pretty.printer
)
ident(
  ext_ref Pervasives.fst
)
"L4.ml" 38 1396 1426 "L4.ml" 38 1396 1430
type(
  ('a -> string) -> 'b -> (Ostap.Pretty.printer * int) Monad.Id.t
)
ident(
  int_ref expr "L4.ml" 36 1289 1297 "L4.ml" 36 1289 1301
)
"L4.ml" 38 1396 1431 "L4.ml" 38 1396 1432
type(
  'a -> string
)
ident(
  int_ref f "L4.ml" 38 1396 1415 "L4.ml" 38 1396 1416
)
"L4.ml" 38 1396 1433 "L4.ml" 38 1396 1434
type(
  'b
)
ident(
  int_ref x "L4.ml" 38 1396 1417 "L4.ml" 38 1396 1418
)
"L4.ml" 38 1396 1425 "L4.ml" 38 1396 1435
call(
  stack
)
type(
  (Ostap.Pretty.printer * int) Monad.Id.t
)
"L4.ml" 38 1396 1421 "L4.ml" 38 1396 1435
type(
  Ostap.Pretty.printer
)
"L4.ml" 38 1396 1417 "L4.ml" 38 1396 1435
type(
  'b -> Ostap.Pretty.printer
)
"L4.ml" 38 1396 1415 "L4.ml" 38 1396 1435
type(
  ('a -> string) -> 'b -> Ostap.Pretty.printer
)
"L4.ml" 39 1436 1444 "L4.ml" 39 1436 1448
type(
  ([> `Binop of
        [< `Add
         | `And
         | `Div
         | `Eq
         | `Ge
         | `Gt
         | `Le
         | `Lt
         | `Mod
         | `Mul
         | `Ne
         | `Or
         | `Sub ] *
        'c * 'c
    | `Const of [< `False | `Literal of int | `True ]
    | `Field of 'c * string
    | `Ident of string
    | `Index of 'c * 'c
    | `Unop of [< `Neg | `Not ] * 'c ]
   as 'c) ->
  Ostap.Pretty.printer
)
ident(
  def expr "L4.ml" 40 1469 1473 "L4.ml" 49 1829 1834
)
"L4.ml" 39 1436 1449 "L4.ml" 39 1436 1450
type(
  'c
)
ident(
  def e "L4.ml" 39 1436 1453 "L4.ml" 39 1436 1468
)
"L4.ml" 39 1436 1453 "L4.ml" 39 1436 1463
type(
  (string -> string) -> 'c -> Ostap.Pretty.printer
)
ident(
  int_ref expression "L4.ml" 38 1396 1404 "L4.ml" 38 1396 1414
)
"L4.ml" 39 1436 1464 "L4.ml" 39 1436 1466
type(
  string -> string
)
ident(
  ext_ref Common.id
)
"L4.ml" 39 1436 1467 "L4.ml" 39 1436 1468
type(
  'c
)
ident(
  int_ref e "L4.ml" 39 1436 1449 "L4.ml" 39 1436 1450
)
"L4.ml" 39 1436 1453 "L4.ml" 39 1436 1468
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 39 1436 1449 "L4.ml" 39 1436 1468
type(
  'c -> Ostap.Pretty.printer
)
"L4.ml" 40 1469 1481 "L4.ml" 40 1469 1484
type(
  ('d -> Ostap.Pretty.printer Monad.Id.t) ->
  ('e -> string) ->
  ((([> `Array of 'd * 'f
      | `Bool
      | `Int
      | `Record of (string * 'f) list
      | `User of 'e ]
     as 'f) ->
    Ostap.Pretty.printer Monad.Id.t) ->
   'f -> Ostap.Pretty.printer Monad.Id.t) ->
  'f -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  def typ "L4.ml" 40 1469 1473 "L4.ml" 49 1829 1834
)
"L4.ml" 40 1469 1485 "L4.ml" 40 1469 1489
type(
  'd -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  def expr "L4.ml" 40 1469 1490 "L4.ml" 45 1671 1678
)
"L4.ml" 40 1469 1490 "L4.ml" 40 1469 1491
type(
  'e -> string
)
ident(
  def p "L4.ml" 40 1469 1494 "L4.ml" 45 1671 1678
)
"L4.ml" 40 1469 1494 "L4.ml" 40 1469 1513
type(
  ('d -> Ostap.Pretty.printer Monad.Id.t) ->
  (('f -> Ostap.Pretty.printer Monad.Id.t) ->
   'f -> Ostap.Pretty.printer Monad.Id.t) ->
  'f -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref CompositeType.print
)
"L4.ml" 40 1469 1514 "L4.ml" 40 1469 1518
type(
  'd -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref expr "L4.ml" 40 1469 1485 "L4.ml" 40 1469 1489
)
"L4.ml" 40 1469 1494 "L4.ml" 40 1469 1518
call(
  stack
)
type(
  (('f -> Ostap.Pretty.printer Monad.Id.t) ->
   'f -> Ostap.Pretty.printer Monad.Id.t) ->
  'f -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 41 1522 1533 "L4.ml" 41 1522 1536
type(
  ((('f -> Ostap.Pretty.printer Monad.Id.t) ->
    'f -> Ostap.Pretty.printer Monad.Id.t) ->
   'f -> Ostap.Pretty.printer Monad.Id.t) ->
  'f -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  def ext "L4.ml" 41 1522 1540 "L4.ml" 44 1638 1670
)
"L4.ml" 42 1549 1559 "L4.ml" 42 1549 1563
type(
  'f
)
"L4.ml" 42 1549 1566 "L4.ml" 42 1549 1571
type(
  'f
)
"L4.ml" 42 1549 1559 "L4.ml" 42 1549 1571
type(
  'f
)
"L4.ml" 42 1549 1558 "L4.ml" 42 1549 1577
type(
  'f
)
ident(
  def t "L4.ml" 42 1549 1581 "L4.ml" 42 1549 1602
)
"L4.ml" 42 1549 1581 "L4.ml" 42 1549 1600
type(
  _[< `Bool | `Int | `User of string > `Bool `Int ] -> Ostap.Pretty.printer
)
ident(
  ext_ref PrimitiveType.print
)
"L4.ml" 42 1549 1601 "L4.ml" 42 1549 1602
type(
  _[< `Bool | `Int | `User of string > `Bool `Int ] as 'g
)
ident(
  int_ref t "L4.ml" 42 1549 1558 "L4.ml" 42 1549 1577
)
"L4.ml" 42 1549 1581 "L4.ml" 42 1549 1602
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 43 1604 1619 "L4.ml" 43 1604 1620
type(
  'e
)
ident(
  def x "L4.ml" 43 1604 1624 "L4.ml" 43 1604 1636
)
"L4.ml" 43 1604 1613 "L4.ml" 43 1604 1620
type(
  'f
)
"L4.ml" 43 1604 1624 "L4.ml" 43 1604 1630
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 43 1604 1632 "L4.ml" 43 1604 1633
type(
  'e -> string
)
ident(
  int_ref p "L4.ml" 40 1469 1490 "L4.ml" 40 1469 1491
)
"L4.ml" 43 1604 1634 "L4.ml" 43 1604 1635
type(
  'e
)
ident(
  int_ref x "L4.ml" 43 1604 1619 "L4.ml" 43 1604 1620
)
"L4.ml" 43 1604 1631 "L4.ml" 43 1604 1636
call(
  stack
)
type(
  string
)
"L4.ml" 43 1604 1624 "L4.ml" 43 1604 1636
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 44 1638 1647 "L4.ml" 44 1638 1648
type(
  'f
)
ident(
  def x "L4.ml" 44 1638 1652 "L4.ml" 44 1638 1670
)
"L4.ml" 44 1638 1652 "L4.ml" 44 1638 1655
type(
  ((('f -> Ostap.Pretty.printer Monad.Id.t) ->
    'f -> Ostap.Pretty.printer Monad.Id.t) ->
   'f -> Ostap.Pretty.printer Monad.Id.t) ->
  'f -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref ext "L4.ml" 41 1522 1533 "L4.ml" 41 1522 1536
)
"L4.ml" 44 1638 1657 "L4.ml" 44 1638 1660
type(
  ('d -> Ostap.Pretty.printer Monad.Id.t) ->
  ('e -> string) ->
  (('f -> Ostap.Pretty.printer Monad.Id.t) ->
   'f -> Ostap.Pretty.printer Monad.Id.t) ->
  'f -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref typ "L4.ml" 40 1469 1481 "L4.ml" 40 1469 1484
)
"L4.ml" 44 1638 1661 "L4.ml" 44 1638 1665
type(
  'd -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref expr "L4.ml" 40 1469 1485 "L4.ml" 40 1469 1489
)
"L4.ml" 44 1638 1666 "L4.ml" 44 1638 1667
type(
  'e -> string
)
ident(
  int_ref p "L4.ml" 40 1469 1490 "L4.ml" 40 1469 1491
)
"L4.ml" 44 1638 1656 "L4.ml" 44 1638 1668
call(
  stack
)
type(
  (('f -> Ostap.Pretty.printer Monad.Id.t) ->
   'f -> Ostap.Pretty.printer Monad.Id.t) ->
  'f -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 44 1638 1669 "L4.ml" 44 1638 1670
type(
  'f
)
ident(
  int_ref x "L4.ml" 44 1638 1647 "L4.ml" 44 1638 1648
)
"L4.ml" 44 1638 1652 "L4.ml" 44 1638 1670
call(
  tail
)
type(
  Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 41 1522 1540 "L4.ml" 44 1638 1670
type(
  'f -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 41 1522 1528 "L4.ml" 45 1671 1678
type(
  (((('f -> Ostap.Pretty.printer Monad.Id.t) ->
     'f -> Ostap.Pretty.printer Monad.Id.t) ->
    'f -> Ostap.Pretty.printer Monad.Id.t) ->
   'f -> Ostap.Pretty.printer Monad.Id.t) ->
  'f -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 40 1469 1494 "L4.ml" 45 1671 1678
call(
  tail
)
type(
  (('f -> Ostap.Pretty.printer Monad.Id.t) ->
   'f -> Ostap.Pretty.printer Monad.Id.t) ->
  'f -> Ostap.Pretty.printer Monad.Id.t
)
type(
  ((('f -> Ostap.Pretty.printer Monad.Id.t) ->
    'f -> Ostap.Pretty.printer Monad.Id.t) ->
   'f -> Ostap.Pretty.printer Monad.Id.t) ->
  ((((('f -> Ostap.Pretty.printer Monad.Id.t) ->
      'f -> Ostap.Pretty.printer Monad.Id.t) ->
     'f -> Ostap.Pretty.printer Monad.Id.t) ->
    'f -> Ostap.Pretty.printer Monad.Id.t) ->
   'f -> Ostap.Pretty.printer Monad.Id.t) ->
  (('f -> Ostap.Pretty.printer Monad.Id.t) ->
   'f -> Ostap.Pretty.printer Monad.Id.t) ->
  'f -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref Common.( ++ )
)
"L4.ml" 40 1469 1490 "L4.ml" 45 1671 1678
type(
  ('e -> string) ->
  (('f -> Ostap.Pretty.printer Monad.Id.t) ->
   'f -> Ostap.Pretty.printer Monad.Id.t) ->
  'f -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 40 1469 1485 "L4.ml" 45 1671 1678
type(
  ('d -> Ostap.Pretty.printer Monad.Id.t) ->
  ('e -> string) ->
  (('f -> Ostap.Pretty.printer Monad.Id.t) ->
   'f -> Ostap.Pretty.printer Monad.Id.t) ->
  'f -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 47 1689 1697 "L4.ml" 47 1689 1706
type(
  ([> `Assign of
        ([> `Binop of
              [< `Add
               | `And
               | `Div
               | `Eq
               | `Ge
               | `Gt
               | `Le
               | `Lt
               | `Mod
               | `Mul
               | `Ne
               | `Or
               | `Sub ] *
              'i * 'i
          | `Const of [< `False | `Literal of int | `True ]
          | `Field of 'i * string
          | `Ident of string
          | `Index of 'i * 'i
          | `Unop of [< `Neg | `Not ] * 'i ]
         as 'i) *
        'i
    | `Call of string * 'i list
    | `Case of
        'i * ([< `Atom of 'i | `Interval of 'i * 'i ] list * 'h list) list *
        'h list
    | `For of 'i * 'i * 'i * 'i option * 'h list
    | `If of ('i * 'h list) list * 'h list
    | `While of 'i * 'h list ]
   as 'h) ->
  Ostap.Pretty.printer Monad.Id.t
)
ident(
  def statement "L4.ml" 48 1734 1738 "L4.ml" 49 1829 1834
)
"L4.ml" 47 1689 1707 "L4.ml" 47 1689 1708
type(
  'h
)
ident(
  def s "L4.ml" 47 1689 1711 "L4.ml" 47 1689 1733
)
"L4.ml" 47 1689 1711 "L4.ml" 47 1689 1720
type(
  ('i -> Ostap.Pretty.printer Monad.Id.t) ->
  (('h -> Ostap.Pretty.printer Monad.Id.t) ->
   'h -> Ostap.Pretty.printer Monad.Id.t) ->
  'h -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref L3.Print.statement
)
"L4.ml" 47 1689 1721 "L4.ml" 47 1689 1725
type(
  'i -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref expr "L4.ml" 39 1436 1444 "L4.ml" 39 1436 1448
)
"L4.ml" 47 1689 1726 "L4.ml" 47 1689 1731
type(
  ('h -> Ostap.Pretty.printer Monad.Id.t) ->
  'h -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref Common.apply
)
"L4.ml" 47 1689 1732 "L4.ml" 47 1689 1733
type(
  'h
)
ident(
  int_ref s "L4.ml" 47 1689 1707 "L4.ml" 47 1689 1708
)
"L4.ml" 47 1689 1711 "L4.ml" 47 1689 1733
call(
  tail
)
type(
  Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 47 1689 1707 "L4.ml" 47 1689 1733
type(
  'h -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 48 1734 1742 "L4.ml" 48 1734 1749
type(
  string *
  (((string *
     ([> `Binop of
           [< `Add
            | `And
            | `Div
            | `Eq
            | `Ge
            | `Gt
            | `Le
            | `Lt
            | `Mod
            | `Mul
            | `Ne
            | `Or
            | `Sub ] *
           'k * 'k
       | `Const of [< `False | `Literal of int | `True ]
       | `Field of 'k * string
       | `Ident of string
       | `Index of 'k * 'k
       | `Unop of [< `Neg | `Not ] * 'k ]
      as 'k))
    list *
    (string *
     ([> `Array of
           ([> `Binop of
                 [< `Add
                  | `And
                  | `Div
                  | `Eq
                  | `Ge
                  | `Gt
                  | `Le
                  | `Lt
                  | `Mod
                  | `Mul
                  | `Ne
                  | `Or
                  | `Sub ] *
                 'm * 'm
             | `Const of [< `False | `Literal of int | `True ]
             | `Field of 'm * string
             | `Ident of string
             | `Index of 'm * 'm
             | `Unop of [< `Neg | `Not ] * 'm ]
            as 'm) *
           'l
       | `Bool
       | `Int
       | `Record of (string * 'l) list
       | `User of string ]
      as 'l))
    list * (string list * 'l) list) *
   (string * ([< `Val | `Var ] * string * 'l) list * 'j *
    ([> `Assign of
          ([> `Binop of
                [< `Add
                 | `And
                 | `Div
                 | `Eq
                 | `Ge
                 | `Gt
                 | `Le
                 | `Lt
                 | `Mod
                 | `Mul
                 | `Ne
                 | `Or
                 | `Sub ] *
                'o * 'o
            | `Const of [< `False | `Literal of int | `True ]
            | `Field of 'o * string
            | `Ident of string
            | `Index of 'o * 'o
            | `Unop of [< `Neg | `Not ] * 'o ]
           as 'o) *
          'o
      | `Call of string * 'o list
      | `Case of
          'o *
          ([< `Atom of 'o | `Interval of 'o * 'o ] list * 'n list) list *
          'n list
      | `For of 'o * 'o * 'o * 'o option * 'n list
      | `If of ('o * 'n list) list * 'n list
      | `While of 'o * 'n list ]
     as 'n)
    list)
   list as 'j) *
  ([> `Assign of
        ([> `Binop of
              [< `Add
               | `And
               | `Div
               | `Eq
               | `Ge
               | `Gt
               | `Le
               | `Lt
               | `Mod
               | `Mul
               | `Ne
               | `Or
               | `Sub ] *
              'q * 'q
          | `Const of [< `False | `Literal of int | `True ]
          | `Field of 'q * string
          | `Ident of string
          | `Index of 'q * 'q
          | `Unop of [< `Neg | `Not ] * 'q ]
         as 'q) *
        'q
    | `Call of string * 'q list
    | `Case of
        'q * ([< `Atom of 'q | `Interval of 'q * 'q ] list * 'p list) list *
        'p list
    | `For of 'q * 'q * 'q * 'q option * 'p list
    | `If of ('q * 'p list) list * 'p list
    | `While of 'q * 'p list ]
   as 'p)
  list -> Ostap.Pretty.printer
)
ident(
  def program "L4.ml" 48 1734 1828 "L4.ml" 49 1829 1834
)
"L4.ml" 48 1734 1750 "L4.ml" 48 1734 1751
type(
  string * 'j * 'p list
)
ident(
  def m "L4.ml" 48 1734 1754 "L4.ml" 48 1734 1828
)
"L4.ml" 48 1734 1754 "L4.ml" 48 1734 1766
type(
  ('j -> Ostap.Pretty.printer) ->
  ('p -> Ostap.Pretty.printer) ->
  string * 'j * 'p list -> Ostap.Pretty.printer
)
ident(
  ext_ref Module.print
)
"L4.ml" 48 1734 1768 "L4.ml" 48 1734 1780
type(
  ('k -> Ostap.Pretty.printer) ->
  ('l -> Ostap.Pretty.printer) ->
  ('n -> Ostap.Pretty.printer) -> 'j -> Ostap.Pretty.printer
)
ident(
  ext_ref L3.Print.declarations
)
"L4.ml" 48 1734 1781 "L4.ml" 48 1734 1785
type(
  'k -> Ostap.Pretty.printer
)
ident(
  int_ref expr "L4.ml" 39 1436 1444 "L4.ml" 39 1436 1448
)
"L4.ml" 48 1734 1787 "L4.ml" 48 1734 1790
type(
  ('m -> Ostap.Pretty.printer Monad.Id.t) ->
  (string -> string) ->
  (('l -> Ostap.Pretty.printer Monad.Id.t) ->
   'l -> Ostap.Pretty.printer Monad.Id.t) ->
  'l -> Ostap.Pretty.printer
)
ident(
  int_ref typ "L4.ml" 40 1469 1481 "L4.ml" 40 1469 1484
)
"L4.ml" 48 1734 1791 "L4.ml" 48 1734 1795
type(
  'm -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref expr "L4.ml" 39 1436 1444 "L4.ml" 39 1436 1448
)
"L4.ml" 48 1734 1796 "L4.ml" 48 1734 1798
type(
  string -> string
)
ident(
  ext_ref Common.id
)
"L4.ml" 48 1734 1799 "L4.ml" 48 1734 1804
type(
  ('l -> Ostap.Pretty.printer Monad.Id.t) ->
  'l -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref Common.apply
)
"L4.ml" 48 1734 1786 "L4.ml" 48 1734 1805
call(
  stack
)
type(
  'l -> Ostap.Pretty.printer
)
"L4.ml" 48 1734 1806 "L4.ml" 48 1734 1815
type(
  'n -> Ostap.Pretty.printer
)
ident(
  int_ref statement "L4.ml" 47 1689 1697 "L4.ml" 47 1689 1706
)
"L4.ml" 48 1734 1767 "L4.ml" 48 1734 1816
call(
  stack
)
type(
  'j -> Ostap.Pretty.printer
)
"L4.ml" 48 1734 1817 "L4.ml" 48 1734 1826
type(
  'p -> Ostap.Pretty.printer
)
ident(
  int_ref statement "L4.ml" 47 1689 1697 "L4.ml" 47 1689 1706
)
"L4.ml" 48 1734 1827 "L4.ml" 48 1734 1828
type(
  string * 'j * 'p list
)
ident(
  int_ref m "L4.ml" 48 1734 1750 "L4.ml" 48 1734 1751
)
"L4.ml" 48 1734 1754 "L4.ml" 48 1734 1828
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 48 1734 1750 "L4.ml" 48 1734 1828
type(
  string * 'j * 'p list -> Ostap.Pretty.printer
)
"L4.ml" 53 1861 1869 "L4.ml" 53 1861 1879
type(
  ([> `Binop of
        [< `Add
         | `And
         | `Div
         | `Eq
         | `Ge
         | `Gt
         | `Le
         | `Lt
         | `Mod
         | `Mul
         | `Ne
         | `Or
         | `Sub ] *
        'a * 'a
    | `Const of [< `False | `Literal of int | `True ]
    | `Field of 'a * string
    | `Ident of string * 'b
    | `Index of 'a * 'a
    | `Unop of [< `Neg | `Not ] * 'a ]
   as 'a) ->
  Ostap.Pretty.printer
)
ident(
  def expression "L4.ml" 54 1907 1911 "L4.ml" 64 2322 2327
)
"L4.ml" 53 1861 1880 "L4.ml" 53 1861 1881
type(
  'a
)
ident(
  def e "L4.ml" 53 1861 1884 "L4.ml" 53 1861 1906
)
"L4.ml" 53 1861 1884 "L4.ml" 53 1861 1900
type(
  (string * 'b -> string) -> 'a -> Ostap.Pretty.printer
)
ident(
  int_ref Print.expression "L4.ml" 38 1396 1404 "L4.ml" 38 1396 1414
)
"L4.ml" 53 1861 1901 "L4.ml" 53 1861 1904
type(
  string * 'b -> string
)
ident(
  ext_ref Pervasives.fst
)
"L4.ml" 53 1861 1905 "L4.ml" 53 1861 1906
type(
  'a
)
ident(
  int_ref e "L4.ml" 53 1861 1880 "L4.ml" 53 1861 1881
)
"L4.ml" 53 1861 1884 "L4.ml" 53 1861 1906
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 53 1861 1880 "L4.ml" 53 1861 1906
type(
  'a -> Ostap.Pretty.printer
)
"L4.ml" 54 1907 1915 "L4.ml" 54 1907 1918
type(
  ([> `Array of
        ([> `Binop of
              [< `Add
               | `And
               | `Div
               | `Eq
               | `Ge
               | `Gt
               | `Le
               | `Lt
               | `Mod
               | `Mul
               | `Ne
               | `Or
               | `Sub ] *
              'd * 'd
          | `Const of [< `False | `Literal of int | `True ]
          | `Field of 'd * string
          | `Ident of string * 'e
          | `Index of 'd * 'd
          | `Unop of [< `Neg | `Not ] * 'd ]
         as 'd) *
        'c
    | `Bool
    | `Int
    | `Record of (string * 'c) list
    | `User of 'f * string * 'g ]
   as 'c) ->
  Ostap.Pretty.printer Monad.Id.t
)
ident(
  def typ "L4.ml" 56 1974 1978 "L4.ml" 64 2322 2327
)
"L4.ml" 54 1907 1919 "L4.ml" 54 1907 1920
type(
  'c
)
ident(
  def t "L4.ml" 54 1907 1923 "L4.ml" 54 1907 1972
)
"L4.ml" 54 1907 1923 "L4.ml" 54 1907 1932
type(
  ('d -> Ostap.Pretty.printer Monad.Id.t) ->
  ('f * string * 'g -> string) ->
  (('c -> Ostap.Pretty.printer Monad.Id.t) ->
   'c -> Ostap.Pretty.printer Monad.Id.t) ->
  'c -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref Print.typ "L4.ml" 40 1469 1481 "L4.ml" 40 1469 1484
)
"L4.ml" 54 1907 1933 "L4.ml" 54 1907 1943
type(
  'd -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref expression "L4.ml" 53 1861 1869 "L4.ml" 53 1861 1879
)
"L4.ml" 54 1907 1950 "L4.ml" 54 1907 1951
type(
  'f
)
"L4.ml" 54 1907 1953 "L4.ml" 54 1907 1954
type(
  string
)
ident(
  def s "L4.ml" 54 1907 1962 "L4.ml" 54 1907 1963
)
"L4.ml" 54 1907 1956 "L4.ml" 54 1907 1957
type(
  'g
)
"L4.ml" 54 1907 1950 "L4.ml" 54 1907 1957
type(
  'f * string * 'g
)
"L4.ml" 54 1907 1962 "L4.ml" 54 1907 1963
type(
  string
)
ident(
  int_ref s "L4.ml" 54 1907 1953 "L4.ml" 54 1907 1954
)
"L4.ml" 54 1907 1944 "L4.ml" 54 1907 1964
type(
  'f * string * 'g -> string
)
"L4.ml" 54 1907 1965 "L4.ml" 54 1907 1970
type(
  ('c -> Ostap.Pretty.printer Monad.Id.t) ->
  'c -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref Common.apply
)
"L4.ml" 54 1907 1971 "L4.ml" 54 1907 1972
type(
  'c
)
ident(
  int_ref t "L4.ml" 54 1907 1919 "L4.ml" 54 1907 1920
)
"L4.ml" 54 1907 1923 "L4.ml" 54 1907 1972
call(
  tail
)
type(
  Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 54 1907 1919 "L4.ml" 54 1907 1972
type(
  'c -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 56 1974 1986 "L4.ml" 56 1974 1995
type(
  ([> `Assign of
        ([> `Binop of
              [< `Add
               | `And
               | `Div
               | `Eq
               | `Ge
               | `Gt
               | `Le
               | `Lt
               | `Mod
               | `Mul
               | `Ne
               | `Or
               | `Sub ] *
              'i * 'i
          | `Const of [< `False | `Literal of int | `True ]
          | `Field of 'i * string
          | `Ident of string * 'j
          | `Index of 'i * 'i
          | `Unop of [< `Neg | `Not ] * 'i ]
         as 'i) *
        'i
    | `Call of
        string *
        ([> `Binop of
              [< `Add
               | `And
               | `Div
               | `Eq
               | `Ge
               | `Gt
               | `Le
               | `Lt
               | `Mod
               | `Mul
               | `Ne
               | `Or
               | `Sub ] *
              'k * 'k
          | `Const of [< `False | `Literal of int | `True ]
          | `Field of 'k * string
          | `Ident of string * 'l
          | `Index of 'k * 'k
          | `Unop of [< `Neg | `Not ] * 'k ]
         as 'k)
        list * 'm
    | `Case of
        'i * ([< `Atom of 'i | `Interval of 'i * 'i ] list * 'h list) list *
        'h list
    | `For of 'i * 'i * 'i * 'i option * 'h list
    | `If of ('i * 'h list) list * 'h list
    | `While of 'i * 'h list ]
   as 'h) ->
  Ostap.Pretty.printer Monad.Id.t
)
ident(
  def statement "L4.ml" 56 1974 1978 "L4.ml" 64 2322 2327
)
"L4.ml" 56 1974 1996 "L4.ml" 56 1974 1997
type(
  'h
)
ident(
  def s "L4.ml" 56 1974 2000 "L4.ml" 61 2210 2226
)
"L4.ml" 56 1974 2001 "L4.ml" 56 1974 2019
type(
  ('i -> Ostap.Pretty.printer Monad.Id.t) ->
  (('h -> Ostap.Pretty.printer Monad.Id.t) ->
   'h -> Ostap.Pretty.printer Monad.Id.t) ->
  'h -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref L2.Print.statement
)
"L4.ml" 56 1974 2020 "L4.ml" 56 1974 2030
type(
  'i -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref expression "L4.ml" 53 1861 1869 "L4.ml" 53 1861 1879
)
"L4.ml" 56 1974 2001 "L4.ml" 56 1974 2030
call(
  stack
)
type(
  (('h -> Ostap.Pretty.printer Monad.Id.t) ->
   'h -> Ostap.Pretty.printer Monad.Id.t) ->
  'h -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 57 2034 2045 "L4.ml" 57 2034 2048
type(
  ('h -> Ostap.Pretty.printer Monad.Id.t) ->
  'h -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  def ext "L4.ml" 57 2034 2052 "L4.ml" 60 2180 2209
)
"L4.ml" 58 2062 2078 "L4.ml" 58 2062 2082
type(
  string
)
ident(
  def name "L4.ml" 59 2097 2108 "L4.ml" 59 2097 2179
)
"L4.ml" 58 2062 2084 "L4.ml" 58 2062 2088
type(
  'k list
)
ident(
  def args "L4.ml" 59 2097 2108 "L4.ml" 59 2097 2179
)
"L4.ml" 58 2062 2090 "L4.ml" 58 2062 2091
type(
  'm
)
"L4.ml" 58 2062 2078 "L4.ml" 58 2062 2091
type(
  string * 'k list * 'm
)
"L4.ml" 58 2062 2071 "L4.ml" 58 2062 2092
type(
  'h
)
"L4.ml" 59 2097 2108 "L4.ml" 59 2097 2111
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Common.hov
)
"L4.ml" 59 2097 2113 "L4.ml" 59 2097 2119
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 59 2097 2120 "L4.ml" 59 2097 2124
type(
  string
)
ident(
  int_ref name "L4.ml" 58 2062 2078 "L4.ml" 58 2062 2082
)
"L4.ml" 59 2097 2113 "L4.ml" 59 2097 2124
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 59 2097 2126 "L4.ml" 59 2097 2132
type(
  Ostap.Pretty.printer -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.rboxed
)
"L4.ml" 59 2097 2134 "L4.ml" 59 2097 2150
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.listByCommaBreak
)
"L4.ml" 59 2097 2152 "L4.ml" 59 2097 2160
type(
  ('k -> Ostap.Pretty.printer) -> 'k list -> Ostap.Pretty.printer list
)
ident(
  ext_ref List.map
)
"L4.ml" 59 2097 2161 "L4.ml" 59 2097 2171
type(
  'k -> Ostap.Pretty.printer
)
ident(
  int_ref expression "L4.ml" 53 1861 1869 "L4.ml" 53 1861 1879
)
"L4.ml" 59 2097 2172 "L4.ml" 59 2097 2176
type(
  'k list
)
ident(
  int_ref args "L4.ml" 58 2062 2084 "L4.ml" 58 2062 2088
)
"L4.ml" 59 2097 2151 "L4.ml" 59 2097 2177
call(
  stack
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 59 2097 2133 "L4.ml" 59 2097 2178
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 59 2097 2126 "L4.ml" 59 2097 2178
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 59 2097 2112 "L4.ml" 59 2097 2179
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 59 2097 2108 "L4.ml" 59 2097 2179
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 60 2180 2189 "L4.ml" 60 2180 2190
type(
  'h
)
ident(
  def s "L4.ml" 60 2180 2194 "L4.ml" 60 2180 2209
)
"L4.ml" 60 2180 2194 "L4.ml" 60 2180 2197
type(
  ('h -> Ostap.Pretty.printer Monad.Id.t) ->
  'h -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref ext "L4.ml" 57 2034 2045 "L4.ml" 57 2034 2048
)
"L4.ml" 60 2180 2198 "L4.ml" 60 2180 2207
type(
  'h -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref statement "L4.ml" 56 1974 1986 "L4.ml" 56 1974 1995
)
"L4.ml" 60 2180 2208 "L4.ml" 60 2180 2209
type(
  'h
)
ident(
  int_ref s "L4.ml" 60 2180 2189 "L4.ml" 60 2180 2190
)
"L4.ml" 60 2180 2194 "L4.ml" 60 2180 2209
call(
  tail
)
type(
  Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 57 2034 2052 "L4.ml" 60 2180 2209
type(
  'h -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 57 2034 2040 "L4.ml" 61 2210 2217
type(
  (('h -> Ostap.Pretty.printer Monad.Id.t) ->
   'h -> Ostap.Pretty.printer Monad.Id.t) ->
  'h -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 56 1974 2001 "L4.ml" 61 2210 2217
type(
  ((('h -> Ostap.Pretty.printer Monad.Id.t) ->
    'h -> Ostap.Pretty.printer Monad.Id.t) ->
   'h -> Ostap.Pretty.printer Monad.Id.t) ->
  ((('h -> Ostap.Pretty.printer Monad.Id.t) ->
    'h -> Ostap.Pretty.printer Monad.Id.t) ->
   'h -> Ostap.Pretty.printer Monad.Id.t) ->
  (('h -> Ostap.Pretty.printer Monad.Id.t) ->
   'h -> Ostap.Pretty.printer Monad.Id.t) ->
  'h -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref Common.( ++ )
)
"L4.ml" 61 2210 2219 "L4.ml" 61 2210 2224
type(
  ('h -> Ostap.Pretty.printer Monad.Id.t) ->
  'h -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref Common.apply
)
"L4.ml" 61 2210 2225 "L4.ml" 61 2210 2226
type(
  'h
)
ident(
  int_ref s "L4.ml" 56 1974 1996 "L4.ml" 56 1974 1997
)
"L4.ml" 56 1974 2000 "L4.ml" 61 2210 2226
call(
  tail
)
type(
  Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 56 1974 1996 "L4.ml" 61 2210 2226
type(
  'h -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 63 2228 2236 "L4.ml" 63 2228 2243
type(
  string *
  (((string *
     ([> `Binop of
           [< `Add
            | `And
            | `Div
            | `Eq
            | `Ge
            | `Gt
            | `Le
            | `Lt
            | `Mod
            | `Mul
            | `Ne
            | `Or
            | `Sub ] *
           'o * 'o
       | `Const of [< `False | `Literal of int | `True ]
       | `Field of 'o * string
       | `Ident of string * 'p
       | `Index of 'o * 'o
       | `Unop of [< `Neg | `Not ] * 'o ]
      as 'o))
    list *
    (string *
     ([> `Array of
           ([> `Binop of
                 [< `Add
                  | `And
                  | `Div
                  | `Eq
                  | `Ge
                  | `Gt
                  | `Le
                  | `Lt
                  | `Mod
                  | `Mul
                  | `Ne
                  | `Or
                  | `Sub ] *
                 'r * 'r
             | `Const of [< `False | `Literal of int | `True ]
             | `Field of 'r * string
             | `Ident of string * 's
             | `Index of 'r * 'r
             | `Unop of [< `Neg | `Not ] * 'r ]
            as 'r) *
           'q
       | `Bool
       | `Int
       | `Record of (string * 'q) list
       | `User of 't * string * 'u ]
      as 'q))
    list * (string list * 'q) list) *
   (string * ([< `Val | `Var ] * string * 'q) list * 'n *
    ([> `Assign of
          ([> `Binop of
                [< `Add
                 | `And
                 | `Div
                 | `Eq
                 | `Ge
                 | `Gt
                 | `Le
                 | `Lt
                 | `Mod
                 | `Mul
                 | `Ne
                 | `Or
                 | `Sub ] *
                'w * 'w
            | `Const of [< `False | `Literal of int | `True ]
            | `Field of 'w * string
            | `Ident of string * 'x
            | `Index of 'w * 'w
            | `Unop of [< `Neg | `Not ] * 'w ]
           as 'w) *
          'w
      | `Call of
          string *
          ([> `Binop of
                [< `Add
                 | `And
                 | `Div
                 | `Eq
                 | `Ge
                 | `Gt
                 | `Le
                 | `Lt
                 | `Mod
                 | `Mul
                 | `Ne
                 | `Or
                 | `Sub ] *
                'y * 'y
            | `Const of [< `False | `Literal of int | `True ]
            | `Field of 'y * string
            | `Ident of string * 'z
            | `Index of 'y * 'y
            | `Unop of [< `Neg | `Not ] * 'y ]
           as 'y)
          list * 'a1
      | `Case of
          'w *
          ([< `Atom of 'w | `Interval of 'w * 'w ] list * 'v list) list *
          'v list
      | `For of 'w * 'w * 'w * 'w option * 'v list
      | `If of ('w * 'v list) list * 'v list
      | `While of 'w * 'v list ]
     as 'v)
    list)
   list as 'n) *
  ([> `Assign of
        ([> `Binop of
              [< `Add
               | `And
               | `Div
               | `Eq
               | `Ge
               | `Gt
               | `Le
               | `Lt
               | `Mod
               | `Mul
               | `Ne
               | `Or
               | `Sub ] *
              'c1 * 'c1
          | `Const of [< `False | `Literal of int | `True ]
          | `Field of 'c1 * string
          | `Ident of string * 'd1
          | `Index of 'c1 * 'c1
          | `Unop of [< `Neg | `Not ] * 'c1 ]
         as 'c1) *
        'c1
    | `Call of
        string *
        ([> `Binop of
              [< `Add
               | `And
               | `Div
               | `Eq
               | `Ge
               | `Gt
               | `Le
               | `Lt
               | `Mod
               | `Mul
               | `Ne
               | `Or
               | `Sub ] *
              'e1 * 'e1
          | `Const of [< `False | `Literal of int | `True ]
          | `Field of 'e1 * string
          | `Ident of string * 'f1
          | `Index of 'e1 * 'e1
          | `Unop of [< `Neg | `Not ] * 'e1 ]
         as 'e1)
        list * 'g1
    | `Case of
        'c1 *
        ([< `Atom of 'c1 | `Interval of 'c1 * 'c1 ] list * 'b1 list) list *
        'b1 list
    | `For of 'c1 * 'c1 * 'c1 * 'c1 option * 'b1 list
    | `If of ('c1 * 'b1 list) list * 'b1 list
    | `While of 'c1 * 'b1 list ]
   as 'b1)
  list -> Ostap.Pretty.printer
)
ident(
  def program "L4.ml" 63 2228 2321 "L4.ml" 64 2322 2327
)
"L4.ml" 63 2228 2244 "L4.ml" 63 2228 2245
type(
  string * 'n * 'b1 list
)
ident(
  def m "L4.ml" 63 2228 2248 "L4.ml" 63 2228 2321
)
"L4.ml" 63 2228 2248 "L4.ml" 63 2228 2260
type(
  ('n -> Ostap.Pretty.printer) ->
  ('b1 -> Ostap.Pretty.printer) ->
  string * 'n * 'b1 list -> Ostap.Pretty.printer
)
ident(
  ext_ref Module.print
)
"L4.ml" 63 2228 2262 "L4.ml" 63 2228 2283
type(
  ('o -> Ostap.Pretty.printer) ->
  ('q -> Ostap.Pretty.printer) ->
  ('v -> Ostap.Pretty.printer) -> 'n -> Ostap.Pretty.printer
)
ident(
  ext_ref L3.Print.declarations
)
"L4.ml" 63 2228 2284 "L4.ml" 63 2228 2294
type(
  'o -> Ostap.Pretty.printer
)
ident(
  int_ref expression "L4.ml" 53 1861 1869 "L4.ml" 53 1861 1879
)
"L4.ml" 63 2228 2295 "L4.ml" 63 2228 2298
type(
  'q -> Ostap.Pretty.printer
)
ident(
  int_ref typ "L4.ml" 54 1907 1915 "L4.ml" 54 1907 1918
)
"L4.ml" 63 2228 2299 "L4.ml" 63 2228 2308
type(
  'v -> Ostap.Pretty.printer
)
ident(
  int_ref statement "L4.ml" 56 1974 1986 "L4.ml" 56 1974 1995
)
"L4.ml" 63 2228 2261 "L4.ml" 63 2228 2309
call(
  stack
)
type(
  'n -> Ostap.Pretty.printer
)
"L4.ml" 63 2228 2310 "L4.ml" 63 2228 2319
type(
  'b1 -> Ostap.Pretty.printer
)
ident(
  int_ref statement "L4.ml" 56 1974 1986 "L4.ml" 56 1974 1995
)
"L4.ml" 63 2228 2320 "L4.ml" 63 2228 2321
type(
  string * 'n * 'b1 list
)
ident(
  int_ref m "L4.ml" 63 2228 2244 "L4.ml" 63 2228 2245
)
"L4.ml" 63 2228 2248 "L4.ml" 63 2228 2321
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 63 2228 2244 "L4.ml" 63 2228 2321
type(
  string * 'n * 'b1 list -> Ostap.Pretty.printer
)
"L4.ml" 73 2471 2483 "L4.ml" 73 2471 2486
type(
  < extractInternal : ([> `Const of
                            [> `Binop of
                                 ([< `Add
                                   | `And
                                   | `Div
                                   | `Eq
                                   | `Ge
                                   | `Gt
                                   | `Le
                                   | `Lt
                                   | `Mod
                                   | `Mul
                                   | `Ne
                                   | `Or
                                   | `Sub
                                   > `Add `Div `Mod `Mul `Sub ]
                                  as 'c) *
                                 'b * 'b
                             | `Const of
                                 [< `False
                                  | `Literal of int Monad.Id.t
                                  | `True
                                  > `Literal ]
                                 as 'd
                             | `Ident of 'e * 'a
                             | `Unop of [ `Neg | `Not ] * 'b ]
                            as 'b ]
                       as 'a) ->
                      'e;
    lookup : string -> ([> `Type of 'f * 'g ], Ostap.Msg.t) Checked.t;
    lookupConst : 'h -> ('a, Ostap.Msg.t) Checked.t; .. > ->
  ([> `Array of
        ([> `Binop of 'c * 'j * 'j
          | `Const of 'd
          | `Ident of 'h
          | `Unop of [ `Neg | `Not ] * 'j ]
         as 'j) *
        'i
    | `Bool
    | `Int
    | `Record of (String.t * 'i) list
    | `User of string ]
   as 'i) ->
  ([> `Array of
        [> `Const of [> `False | `Literal of int Monad.Id.t | `True ] ] * 'k
    | `Bool
    | `Int
    | `Record of (String.t * 'k) list
    | `User of string * 'f * 'g ]
   as 'k)
  Monad.Checked.t
)
ident(
  def typ "L4.ml" 73 2471 2475 "L4.ml" 101 4002 4007
)
"L4.ml" 73 2471 2487 "L4.ml" 73 2471 2490
type(
  < extractInternal : 'a -> 'e;
    lookup : string -> ([> `Type of 'f * 'g ], Ostap.Msg.t) Checked.t;
    lookupConst : 'h -> ('a, Ostap.Msg.t) Checked.t; .. >
  as 'l
)
ident(
  def env "L4.ml" 73 2471 2493 "L4.ml" 77 2681 2695
)
"L4.ml" 73 2471 2494 "L4.ml" 73 2471 2515
type(
  'l ->
  ('j ->
   ([> `Const of [> `False | `Literal of int Monad.Id.t | `True ] ] as 'm)
   Monad.Checked.t) ->
  (('i -> 'k Monad.Checked.t) -> 'i -> 'k Monad.Checked.t) ->
  'i -> 'k Monad.Checked.t
)
ident(
  ext_ref CompositeType.resolve
)
"L4.ml" 73 2471 2516 "L4.ml" 73 2471 2519
type(
  'l
)
ident(
  int_ref env "L4.ml" 73 2471 2487 "L4.ml" 73 2471 2490
)
"L4.ml" 73 2471 2521 "L4.ml" 73 2471 2544
type(
  'l -> 'j -> 'm Monad.Checked.t
)
ident(
  ext_ref L1.Resolve.constantExpr
)
"L4.ml" 73 2471 2545 "L4.ml" 73 2471 2548
type(
  'l
)
ident(
  int_ref env "L4.ml" 73 2471 2487 "L4.ml" 73 2471 2490
)
"L4.ml" 73 2471 2520 "L4.ml" 73 2471 2549
call(
  stack
)
type(
  'j -> 'm Monad.Checked.t
)
"L4.ml" 73 2471 2494 "L4.ml" 73 2471 2549
call(
  stack
)
type(
  (('i -> 'k Monad.Checked.t) -> 'i -> 'k Monad.Checked.t) ->
  'i -> 'k Monad.Checked.t
)
"L4.ml" 74 2553 2564 "L4.ml" 74 2553 2567
type(
  ('i -> 'k Monad.Checked.t) -> 'i -> 'k Monad.Checked.t
)
ident(
  def ext "L4.ml" 74 2553 2571 "L4.ml" 76 2651 2680
)
"L4.ml" 75 2580 2590 "L4.ml" 75 2580 2595
type(
  'i
)
"L4.ml" 75 2580 2598 "L4.ml" 75 2580 2602
type(
  'i
)
"L4.ml" 75 2580 2590 "L4.ml" 75 2580 2602
type(
  'i
)
"L4.ml" 75 2580 2611 "L4.ml" 75 2580 2612
type(
  string
)
"L4.ml" 75 2580 2605 "L4.ml" 75 2580 2612
type(
  'i
)
"L4.ml" 75 2580 2590 "L4.ml" 75 2580 2612
type(
  'i
)
"L4.ml" 75 2580 2589 "L4.ml" 75 2580 2618
type(
  'i
)
ident(
  def x "L4.ml" 75 2580 2622 "L4.ml" 75 2580 2649
)
"L4.ml" 75 2580 2622 "L4.ml" 75 2580 2643
type(
  'l -> [ `Bool | `Int | `User of string ] -> 'k Monad.Checked.t
)
ident(
  ext_ref PrimitiveType.resolve
)
"L4.ml" 75 2580 2644 "L4.ml" 75 2580 2647
type(
  'l
)
ident(
  int_ref env "L4.ml" 73 2471 2487 "L4.ml" 73 2471 2490
)
"L4.ml" 75 2580 2648 "L4.ml" 75 2580 2649
type(
  [ `Bool | `Int | `User of string ]
)
ident(
  int_ref x "L4.ml" 75 2580 2589 "L4.ml" 75 2580 2618
)
"L4.ml" 75 2580 2622 "L4.ml" 75 2580 2649
call(
  tail
)
type(
  'k Monad.Checked.t
)
"L4.ml" 76 2651 2660 "L4.ml" 76 2651 2661
type(
  'i
)
ident(
  def t "L4.ml" 76 2651 2665 "L4.ml" 76 2651 2680
)
"L4.ml" 76 2651 2665 "L4.ml" 76 2651 2668
type(
  ('i -> 'k Monad.Checked.t) -> 'i -> 'k Monad.Checked.t
)
ident(
  int_ref ext "L4.ml" 74 2553 2564 "L4.ml" 74 2553 2567
)
"L4.ml" 76 2651 2670 "L4.ml" 76 2651 2673
type(
  'l -> 'i -> 'k Monad.Checked.t
)
ident(
  int_ref typ "L4.ml" 73 2471 2483 "L4.ml" 73 2471 2486
)
"L4.ml" 76 2651 2674 "L4.ml" 76 2651 2677
type(
  'l
)
ident(
  int_ref env "L4.ml" 73 2471 2487 "L4.ml" 73 2471 2490
)
"L4.ml" 76 2651 2669 "L4.ml" 76 2651 2678
call(
  stack
)
type(
  'i -> 'k Monad.Checked.t
)
"L4.ml" 76 2651 2679 "L4.ml" 76 2651 2680
type(
  'i
)
ident(
  int_ref t "L4.ml" 76 2651 2660 "L4.ml" 76 2651 2661
)
"L4.ml" 76 2651 2665 "L4.ml" 76 2651 2680
call(
  tail
)
type(
  'k Monad.Checked.t
)
"L4.ml" 74 2553 2571 "L4.ml" 76 2651 2680
type(
  'i -> 'k Monad.Checked.t
)
"L4.ml" 74 2553 2559 "L4.ml" 77 2681 2688
type(
  (('i -> 'k Monad.Checked.t) -> 'i -> 'k Monad.Checked.t) ->
  'i -> 'k Monad.Checked.t
)
"L4.ml" 73 2471 2494 "L4.ml" 77 2681 2688
type(
  ((('i -> 'k Monad.Checked.t) -> 'i -> 'k Monad.Checked.t) ->
   'i -> 'k Monad.Checked.t) ->
  ((('i -> 'k Monad.Checked.t) -> 'i -> 'k Monad.Checked.t) ->
   'i -> 'k Monad.Checked.t) ->
  (('i -> 'k Monad.Checked.t) -> 'i -> 'k Monad.Checked.t) ->
  'i -> 'k Monad.Checked.t
)
ident(
  ext_ref Common.( ++ )
)
"L4.ml" 77 2681 2690 "L4.ml" 77 2681 2695
type(
  ('i -> 'k Monad.Checked.t) -> 'i -> 'k Monad.Checked.t
)
ident(
  ext_ref Common.apply
)
"L4.ml" 73 2471 2493 "L4.ml" 77 2681 2695
call(
  tail
)
type(
  'i -> 'k Monad.Checked.t
)
"L4.ml" 73 2471 2487 "L4.ml" 77 2681 2695
type(
  'l -> 'i -> 'k Monad.Checked.t
)
"L4.ml" 78 2696 2708 "L4.ml" 78 2696 2717
type(
  ((< compositeType : [> `Bool | `Int | `User of string * 'o * 'p ] -> bool;
      down : 'q -> 'r;
      extractInternal : ([> `Const of
                              [> `Binop of
                                   ([< `Add
                                     | `And
                                     | `Div
                                     | `Eq
                                     | `Ge
                                     | `Gt
                                     | `Le
                                     | `Lt
                                     | `Mod
                                     | `Mul
                                     | `Ne
                                     | `Or
                                     | `Sub
                                     > `Add `Div `Mod `Mul `Sub ]
                                    as 'u) *
                                   't * 't
                               | `Const of
                                   [ `False
                                   | `Literal of int Monad.Id.t
                                   | `True ]
                               | `Field of 't * 'v
                               | `Ident of 'w * 's
                               | `Index of 't * 't
                               | `Unop of [ `Neg | `Not ] * 't ]
                              as 't
                          | `Proc of
                              'x * (([< `Val | `Var ] as 'y) * 'z * 'a1) list
                          | `Type of 'o * 'p ]
                         as 's) ->
                        'w;
      getInternal : 'q -> 'b1;
      lookup : string -> ('s, Ostap.Msg.t) Checked.t;
      lookupConst : 'c1 -> ('s, Ostap.Msg.t) Checked.t;
      lookupProc : string ->
                   ([> `Proc of 'x * ('y * 'z * 'a1) list ], Ostap.Msg.t)
                   Checked.t;
      lookupVar : string -> ('s, Ostap.Msg.t) Checked.t; up : unit -> 'd1;
      update : 'q ->
               [> `Param of
                    'b1 *
                    ([> `Bool | `Int | `User of string * 'o * 'p ] as 'e1)
                | `Proc of 'b1 * ([> `Var ] * 'q * 'e1) list
                | `Type of
                    'b1 *
                    ([> `Array of
                          [> `Const of
                               [> `False | `Literal of int Monad.Id.t | `True ] ] *
                          'f1
                      | `Bool
                      | `Int
                      | `Record of (String.t * 'f1) list
                      | `User of string * 'o * 'p ]
                     as 'f1)
                | `VParam of 'b1 * 'e1 ] ->
               (unit, Ostap.Msg.t) Checked.t;
      updateConst : 'g1 ->
                    [> `Const of
                         [> `False | `Literal of int Monad.Id.t | `True ] ] ->
                    ('h1, Ostap.Msg.t) Checked.t;
      updateVars : 'q list -> 'f1 -> ('i1, Ostap.Msg.t) Checked.t; .. >
    as 'n) ->
   string -> ('s, Ostap.Msg.t) Checked.t) ->
  'n ->
  (([> `Binop of 'u * 'j1 * 'j1
     | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
     | `Field of 'j1 * 'v
     | `Ident of string
     | `Index of 'j1 * 'j1
     | `Unop of [ `Neg | `Not ] * 'j1 ]
    as 'j1) ->
   't Monad.Checked.t) ->
  'j1 -> 't Monad.Checked.t
)
ident(
  def reference "L4.ml" 78 2696 2700 "L4.ml" 101 4002 4007
)
"L4.ml" 78 2696 2718 "L4.ml" 78 2696 2724
type(
  'n -> string -> ('s, Ostap.Msg.t) Checked.t
)
ident(
  def lookup "L4.ml" 78 2696 2725 "L4.ml" 94 3427 3477
)
"L4.ml" 78 2696 2725 "L4.ml" 78 2696 2728
type(
  'n
)
ident(
  def env "L4.ml" 78 2696 2729 "L4.ml" 94 3427 3477
)
"L4.ml" 78 2696 2729 "L4.ml" 78 2696 2732
type(
  'j1 -> 't Monad.Checked.t
)
ident(
  def ext "L4.ml" 78 2696 2733 "L4.ml" 94 3427 3477
)
"L4.ml" 78 2696 2733 "L4.ml" 78 2696 2736
type(
  'j1
)
ident(
  def ref "L4.ml" 79 2740 2746 "L4.ml" 94 3427 3477
)
"L4.ml" 79 2740 2750 "L4.ml" 79 2740 2759
type(
  'j1 -> 't Monad.Checked.t
)
ident(
  def reference "L4.ml" 80 2790 2796 "L4.ml" 94 3427 3477
)
"L4.ml" 79 2740 2762 "L4.ml" 79 2740 2771
type(
  ('n -> string -> ('s, Ostap.Msg.t) Checked.t) ->
  'n -> ('j1 -> 't Monad.Checked.t) -> 'j1 -> 't Monad.Checked.t
)
ident(
  int_ref reference "L4.ml" 78 2696 2708 "L4.ml" 78 2696 2717
)
"L4.ml" 79 2740 2772 "L4.ml" 79 2740 2778
type(
  'n -> string -> ('s, Ostap.Msg.t) Checked.t
)
ident(
  int_ref lookup "L4.ml" 78 2696 2718 "L4.ml" 78 2696 2724
)
"L4.ml" 79 2740 2779 "L4.ml" 79 2740 2782
type(
  'n
)
ident(
  int_ref env "L4.ml" 78 2696 2725 "L4.ml" 78 2696 2728
)
"L4.ml" 79 2740 2783 "L4.ml" 79 2740 2786
type(
  'j1 -> 't Monad.Checked.t
)
ident(
  int_ref ext "L4.ml" 78 2696 2729 "L4.ml" 78 2696 2732
)
"L4.ml" 79 2740 2762 "L4.ml" 79 2740 2786
call(
  stack
)
type(
  'j1 -> 't Monad.Checked.t
)
"L4.ml" 80 2790 2800 "L4.ml" 80 2790 2805
type(
  't -> 't
)
ident(
  def reloc "L4.ml" 81 2830 2836 "L4.ml" 94 3427 3477
)
"L4.ml" 80 2790 2808 "L4.ml" 80 2790 2813
type(
  Ostap.Msg.Locator.t -> 't -> 't
)
ident(
  ext_ref Common.reloc
)
"L4.ml" 80 2790 2815 "L4.ml" 80 2790 2821
type(
  'j1 -> Ostap.Msg.Locator.t
)
ident(
  ext_ref Common.locate
)
"L4.ml" 80 2790 2822 "L4.ml" 80 2790 2825
type(
  'j1
)
ident(
  int_ref ref "L4.ml" 78 2696 2733 "L4.ml" 78 2696 2736
)
"L4.ml" 80 2790 2814 "L4.ml" 80 2790 2826
call(
  stack
)
type(
  Ostap.Msg.Locator.t
)
"L4.ml" 80 2790 2808 "L4.ml" 80 2790 2826
call(
  stack
)
type(
  't -> 't
)
"L4.ml" 81 2830 2842 "L4.ml" 81 2830 2845
type(
  'j1
)
ident(
  int_ref ref "L4.ml" 78 2696 2733 "L4.ml" 78 2696 2736
)
"L4.ml" 82 2851 2867 "L4.ml" 82 2851 2868
type(
  'j1
)
ident(
  def r "L4.ml" 83 2877 2888 "L4.ml" 92 3339 3351
)
"L4.ml" 82 2851 2870 "L4.ml" 82 2851 2871
type(
  'j1
)
ident(
  def i "L4.ml" 83 2877 2888 "L4.ml" 92 3339 3351
)
"L4.ml" 82 2851 2867 "L4.ml" 82 2851 2871
type(
  'j1 * 'j1
)
"L4.ml" 82 2851 2859 "L4.ml" 82 2851 2872
type(
  'j1
)
"L4.ml" 83 2877 2888 "L4.ml" 83 2877 2893
type(
  't Monad.Checked.t * 't Monad.Checked.t -> ('t * 't, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.tuple
)
"L4.ml" 83 2877 2895 "L4.ml" 83 2877 2904
type(
  'j1 -> 't Monad.Checked.t
)
ident(
  int_ref reference "L4.ml" 79 2740 2750 "L4.ml" 79 2740 2759
)
"L4.ml" 83 2877 2905 "L4.ml" 83 2877 2906
type(
  'j1
)
ident(
  int_ref r "L4.ml" 82 2851 2867 "L4.ml" 82 2851 2868
)
"L4.ml" 83 2877 2895 "L4.ml" 83 2877 2906
call(
  stack
)
type(
  't Monad.Checked.t
)
"L4.ml" 83 2877 2908 "L4.ml" 83 2877 2918
type(
  'n -> 'j1 -> 't Monad.Checked.t
)
ident(
  int_ref expression "L4.ml" 95 3478 3486 "L4.ml" 95 3478 3496
)
"L4.ml" 83 2877 2919 "L4.ml" 83 2877 2922
type(
  'n
)
ident(
  int_ref env "L4.ml" 78 2696 2725 "L4.ml" 78 2696 2728
)
"L4.ml" 83 2877 2923 "L4.ml" 83 2877 2924
type(
  'j1
)
ident(
  int_ref i "L4.ml" 82 2851 2870 "L4.ml" 82 2851 2871
)
"L4.ml" 83 2877 2908 "L4.ml" 83 2877 2924
call(
  stack
)
type(
  't Monad.Checked.t
)
"L4.ml" 83 2877 2894 "L4.ml" 83 2877 2925
type(
  't Monad.Checked.t * 't Monad.Checked.t
)
"L4.ml" 83 2877 2888 "L4.ml" 83 2877 2925
call(
  stack
)
type(
  ('t * 't, Ostap.Msg.t) Checked.t
)
"L4.ml" 84 2932 2949 "L4.ml" 84 2932 2950
type(
  't
)
ident(
  def r "L4.ml" 85 2959 2973 "L4.ml" 91 3319 3338
)
"L4.ml" 84 2932 2952 "L4.ml" 84 2932 2953
type(
  't
)
ident(
  def i "L4.ml" 85 2959 2973 "L4.ml" 91 3319 3338
)
"L4.ml" 84 2932 2949 "L4.ml" 84 2932 2953
type(
  't * 't
)
"L4.ml" 85 2959 2981 "L4.ml" 85 2959 2986
type(
  't -> 't
)
ident(
  int_ref reloc "L4.ml" 80 2790 2800 "L4.ml" 80 2790 2805
)
"L4.ml" 85 2959 2996 "L4.ml" 85 2959 2997
type(
  't
)
ident(
  int_ref r "L4.ml" 84 2932 2949 "L4.ml" 84 2932 2950
)
"L4.ml" 85 2959 2999 "L4.ml" 85 2959 3024
type(
  't -> 't
)
ident(
  ext_ref SimpleExpression.evaluate
)
"L4.ml" 85 2959 3025 "L4.ml" 85 2959 3026
type(
  't
)
ident(
  int_ref i "L4.ml" 84 2932 2952 "L4.ml" 84 2932 2953
)
"L4.ml" 85 2959 2999 "L4.ml" 85 2959 3026
call(
  stack
)
type(
  't
)
"L4.ml" 85 2959 2995 "L4.ml" 85 2959 3027
type(
  't * 't
)
"L4.ml" 85 2959 2987 "L4.ml" 85 2959 3028
type(
  't
)
"L4.ml" 85 2959 2980 "L4.ml" 85 2959 3029
call(
  stack
)
type(
  't
)
"L4.ml" 85 2959 2977 "L4.ml" 85 2959 3029
call(
  stack
)
type(
  ('t, Ostap.Msg.t) Checked.t
)
type(
  't -> ('t, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.( !! )
)
"L4.ml" 86 3036 3052 "L4.ml" 86 3036 3083
type(
  exn
)
"L4.ml" 86 3036 3091 "L4.ml" 86 3036 3096
type(
  't -> 't
)
ident(
  int_ref reloc "L4.ml" 80 2790 2800 "L4.ml" 80 2790 2805
)
"L4.ml" 86 3036 3106 "L4.ml" 86 3036 3107
type(
  't
)
ident(
  int_ref r "L4.ml" 84 2932 2949 "L4.ml" 84 2932 2950
)
"L4.ml" 86 3036 3109 "L4.ml" 86 3036 3110
type(
  't
)
ident(
  int_ref i "L4.ml" 84 2932 2952 "L4.ml" 84 2932 2953
)
"L4.ml" 86 3036 3105 "L4.ml" 86 3036 3111
type(
  't * 't
)
"L4.ml" 86 3036 3097 "L4.ml" 86 3036 3112
type(
  't
)
"L4.ml" 86 3036 3090 "L4.ml" 86 3036 3113
call(
  stack
)
type(
  't
)
"L4.ml" 86 3036 3087 "L4.ml" 86 3036 3113
call(
  tail
)
type(
  ('t, Ostap.Msg.t) Checked.t
)
type(
  't -> ('t, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.( !! )
)
"L4.ml" 87 3114 3130 "L4.ml" 87 3114 3146
type(
  exn
)
"L4.ml" 88 3151 3175 "L4.ml" 88 3151 3189
type(
  string -> string array -> Ostap.Msg.Locator.t -> Ostap.Msg.t
)
ident(
  ext_ref Ostap.Msg.make
)
"L4.ml" 88 3151 3190 "L4.ml" 88 3151 3246
type(
  string
)
"L4.ml" 89 3248 3274 "L4.ml" 89 3248 3278
type(
  string array
)
"L4.ml" 90 3280 3307 "L4.ml" 90 3280 3313
type(
  'j1 -> Ostap.Msg.Locator.t
)
ident(
  ext_ref Common.locate
)
"L4.ml" 90 3280 3314 "L4.ml" 90 3280 3317
type(
  'j1
)
ident(
  int_ref ref "L4.ml" 78 2696 2733 "L4.ml" 78 2696 2736
)
"L4.ml" 90 3280 3306 "L4.ml" 90 3280 3318
call(
  stack
)
type(
  Ostap.Msg.Locator.t
)
"L4.ml" 88 3151 3175 "L4.ml" 90 3280 3318
call(
  stack
)
type(
  Ostap.Msg.t
)
"L4.ml" 88 3151 3174 "L4.ml" 91 3319 3338
type(
  Ostap.Msg.t list
)
type(
  Ostap.Msg.t list
)
"L4.ml" 88 3151 3169 "L4.ml" 91 3319 3338
type(
  ('t, Ostap.Msg.t) Checked.t
)
"L4.ml" 85 2959 2973 "L4.ml" 91 3319 3338
type(
  ('t, Ostap.Msg.t) Checked.t
)
"L4.ml" 84 2932 2943 "L4.ml" 92 3339 3351
type(
  't * 't -> ('t, Ostap.Msg.t) Checked.t
)
"L4.ml" 83 2877 2888 "L4.ml" 92 3339 3351
call(
  tail
)
type(
  't Monad.Checked.t
)
type(
  ('t * 't, Ostap.Msg.t) Checked.t ->
  ('t * 't -> ('t, Ostap.Msg.t) Checked.t) -> 't Monad.Checked.t
)
ident(
  ext_ref Checked.( -?->> )
)
"L4.ml" 93 3352 3368 "L4.ml" 93 3352 3369
type(
  'j1
)
ident(
  def r "L4.ml" 93 3352 3377 "L4.ml" 93 3352 3426
)
"L4.ml" 93 3352 3371 "L4.ml" 93 3352 3372
type(
  'v
)
ident(
  def f "L4.ml" 93 3352 3377 "L4.ml" 93 3352 3426
)
"L4.ml" 93 3352 3368 "L4.ml" 93 3352 3372
type(
  'j1 * 'v
)
"L4.ml" 93 3352 3360 "L4.ml" 93 3352 3373
type(
  'j1
)
"L4.ml" 93 3352 3377 "L4.ml" 93 3352 3386
type(
  'j1 -> 't Monad.Checked.t
)
ident(
  int_ref reference "L4.ml" 79 2740 2750 "L4.ml" 79 2740 2759
)
"L4.ml" 93 3352 3387 "L4.ml" 93 3352 3388
type(
  'j1
)
ident(
  int_ref r "L4.ml" 93 3352 3368 "L4.ml" 93 3352 3369
)
"L4.ml" 93 3352 3377 "L4.ml" 93 3352 3388
call(
  stack
)
type(
  't Monad.Checked.t
)
"L4.ml" 93 3352 3399 "L4.ml" 93 3352 3400
type(
  't
)
ident(
  def r "L4.ml" 93 3352 3404 "L4.ml" 93 3352 3425
)
"L4.ml" 93 3352 3404 "L4.ml" 93 3352 3409
type(
  't -> 't
)
ident(
  int_ref reloc "L4.ml" 80 2790 2800 "L4.ml" 80 2790 2805
)
"L4.ml" 93 3352 3419 "L4.ml" 93 3352 3420
type(
  't
)
ident(
  int_ref r "L4.ml" 93 3352 3399 "L4.ml" 93 3352 3400
)
"L4.ml" 93 3352 3422 "L4.ml" 93 3352 3423
type(
  'v
)
ident(
  int_ref f "L4.ml" 93 3352 3371 "L4.ml" 93 3352 3372
)
"L4.ml" 93 3352 3418 "L4.ml" 93 3352 3424
type(
  't * 'v
)
"L4.ml" 93 3352 3410 "L4.ml" 93 3352 3425
type(
  't
)
"L4.ml" 93 3352 3404 "L4.ml" 93 3352 3425
call(
  tail
)
type(
  't
)
"L4.ml" 93 3352 3394 "L4.ml" 93 3352 3426
type(
  't -> 't
)
"L4.ml" 93 3352 3377 "L4.ml" 93 3352 3426
call(
  tail
)
type(
  't Monad.Checked.t
)
type(
  't Monad.Checked.t -> ('t -> 't) -> 't Monad.Checked.t
)
ident(
  ext_ref Checked.( -?-> )
)
"L4.ml" 94 3427 3435 "L4.ml" 94 3427 3436
type(
  'j1
)
ident(
  def x "L4.ml" 94 3427 3440 "L4.ml" 94 3427 3477
)
"L4.ml" 94 3427 3440 "L4.ml" 94 3427 3460
type(
  ('n -> string -> ('s, Ostap.Msg.t) Checked.t) ->
  'n -> ('j1 -> 't Monad.Checked.t) -> 'j1 -> 't Monad.Checked.t
)
ident(
  ext_ref L1.Resolve.reference
)
"L4.ml" 94 3427 3461 "L4.ml" 94 3427 3467
type(
  'n -> string -> ('s, Ostap.Msg.t) Checked.t
)
ident(
  int_ref lookup "L4.ml" 78 2696 2718 "L4.ml" 78 2696 2724
)
"L4.ml" 94 3427 3468 "L4.ml" 94 3427 3471
type(
  'n
)
ident(
  int_ref env "L4.ml" 78 2696 2725 "L4.ml" 78 2696 2728
)
"L4.ml" 94 3427 3472 "L4.ml" 94 3427 3475
type(
  'j1 -> 't Monad.Checked.t
)
ident(
  int_ref ext "L4.ml" 78 2696 2729 "L4.ml" 78 2696 2732
)
"L4.ml" 94 3427 3476 "L4.ml" 94 3427 3477
type(
  'j1
)
ident(
  int_ref x "L4.ml" 94 3427 3435 "L4.ml" 94 3427 3436
)
"L4.ml" 94 3427 3440 "L4.ml" 94 3427 3477
call(
  tail
)
type(
  't Monad.Checked.t
)
"L4.ml" 81 2830 2836 "L4.ml" 94 3427 3477
type(
  't Monad.Checked.t
)
"L4.ml" 80 2790 2796 "L4.ml" 94 3427 3477
type(
  't Monad.Checked.t
)
"L4.ml" 79 2740 2746 "L4.ml" 94 3427 3477
type(
  't Monad.Checked.t
)
"L4.ml" 78 2696 2733 "L4.ml" 94 3427 3477
type(
  'j1 -> 't Monad.Checked.t
)
"L4.ml" 78 2696 2729 "L4.ml" 94 3427 3477
type(
  ('j1 -> 't Monad.Checked.t) -> 'j1 -> 't Monad.Checked.t
)
"L4.ml" 78 2696 2725 "L4.ml" 94 3427 3477
type(
  'n -> ('j1 -> 't Monad.Checked.t) -> 'j1 -> 't Monad.Checked.t
)
"L4.ml" 78 2696 2718 "L4.ml" 94 3427 3477
type(
  ('n -> string -> ('s, Ostap.Msg.t) Checked.t) ->
  'n -> ('j1 -> 't Monad.Checked.t) -> 'j1 -> 't Monad.Checked.t
)
"L4.ml" 95 3478 3486 "L4.ml" 95 3478 3496
type(
  'n -> 'j1 -> 't Monad.Checked.t
)
ident(
  def expression "L4.ml" 78 2696 2700 "L4.ml" 101 4002 4007
)
"L4.ml" 95 3478 3497 "L4.ml" 95 3478 3500
type(
  'n
)
ident(
  def env "L4.ml" 95 3478 3501 "L4.ml" 95 3478 3568
)
"L4.ml" 95 3478 3501 "L4.ml" 95 3478 3505
type(
  'j1
)
ident(
  def expr "L4.ml" 95 3478 3508 "L4.ml" 95 3478 3568
)
"L4.ml" 95 3478 3508 "L4.ml" 95 3478 3532
type(
  (('j1 -> 't Monad.Checked.t) -> 'j1 -> 't Monad.Checked.t) ->
  'j1 -> 't Monad.Checked.t
)
ident(
  ext_ref SimpleExpression.resolve
)
"L4.ml" 95 3478 3534 "L4.ml" 95 3478 3543
type(
  ('n -> string -> ('s, Ostap.Msg.t) Checked.t) ->
  'n -> ('j1 -> 't Monad.Checked.t) -> 'j1 -> 't Monad.Checked.t
)
ident(
  int_ref reference "L4.ml" 78 2696 2708 "L4.ml" 78 2696 2717
)
"L4.ml" 95 3478 3544 "L4.ml" 95 3478 3558
type(
  'n -> string -> ('s, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref L3.Resolve.lookup
)
"L4.ml" 95 3478 3559 "L4.ml" 95 3478 3562
type(
  'n
)
ident(
  int_ref env "L4.ml" 95 3478 3497 "L4.ml" 95 3478 3500
)
"L4.ml" 95 3478 3533 "L4.ml" 95 3478 3563
call(
  stack
)
type(
  ('j1 -> 't Monad.Checked.t) -> 'j1 -> 't Monad.Checked.t
)
"L4.ml" 95 3478 3564 "L4.ml" 95 3478 3568
type(
  'j1
)
ident(
  int_ref expr "L4.ml" 95 3478 3501 "L4.ml" 95 3478 3505
)
"L4.ml" 95 3478 3508 "L4.ml" 95 3478 3568
call(
  tail
)
type(
  't Monad.Checked.t
)
"L4.ml" 95 3478 3501 "L4.ml" 95 3478 3568
type(
  'j1 -> 't Monad.Checked.t
)
"L4.ml" 95 3478 3497 "L4.ml" 95 3478 3568
type(
  'n -> 'j1 -> 't Monad.Checked.t
)
"L4.ml" 96 3569 3577 "L4.ml" 96 3569 3588
type(
  'n -> 'j1 -> 't Monad.Checked.t
)
ident(
  def destination "L4.ml" 78 2696 2700 "L4.ml" 101 4002 4007
)
"L4.ml" 96 3569 3589 "L4.ml" 96 3569 3592
type(
  'n
)
ident(
  def env "L4.ml" 96 3569 3593 "L4.ml" 96 3569 3657
)
"L4.ml" 96 3569 3593 "L4.ml" 96 3569 3597
type(
  'j1
)
ident(
  def expr "L4.ml" 96 3569 3600 "L4.ml" 96 3569 3657
)
"L4.ml" 96 3569 3600 "L4.ml" 96 3569 3609
type(
  ('n -> string -> ('s, Ostap.Msg.t) Checked.t) ->
  'n -> ('j1 -> 't Monad.Checked.t) -> 'j1 -> 't Monad.Checked.t
)
ident(
  int_ref reference "L4.ml" 78 2696 2708 "L4.ml" 78 2696 2717
)
"L4.ml" 96 3569 3610 "L4.ml" 96 3569 3631
type(
  'n -> string -> ('s, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref L1.Resolve.lookupDest
)
"L4.ml" 96 3569 3632 "L4.ml" 96 3569 3635
type(
  'n
)
ident(
  int_ref env "L4.ml" 96 3569 3589 "L4.ml" 96 3569 3592
)
"L4.ml" 96 3569 3636 "L4.ml" 96 3569 3652
type(
  'j1 -> 't Monad.Checked.t
)
ident(
  ext_ref L1.Resolve.noext
)
"L4.ml" 96 3569 3653 "L4.ml" 96 3569 3657
type(
  'j1
)
ident(
  int_ref expr "L4.ml" 96 3569 3593 "L4.ml" 96 3569 3597
)
"L4.ml" 96 3569 3600 "L4.ml" 96 3569 3657
call(
  tail
)
type(
  't Monad.Checked.t
)
"L4.ml" 96 3569 3593 "L4.ml" 96 3569 3657
type(
  'j1 -> 't Monad.Checked.t
)
"L4.ml" 96 3569 3589 "L4.ml" 96 3569 3657
type(
  'n -> 'j1 -> 't Monad.Checked.t
)
"L4.ml" 97 3658 3666 "L4.ml" 97 3658 3678
type(
  bool ->
  'n ->
  ((('g1 *
     ([> `Binop of 'u * 'l1 * 'l1
       | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
       | `Ident of 'c1
       | `Unop of [ `Neg | `Not ] * 'l1 ]
      as 'l1))
    list *
    ('q *
     ([> `Array of
           ([> `Binop of 'u * 'n1 * 'n1
             | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
             | `Ident of 'c1
             | `Unop of [ `Neg | `Not ] * 'n1 ]
            as 'n1) *
           'm1
       | `Bool
       | `Int
       | `Record of (String.t * 'm1) list
       | `User of string ]
      as 'm1))
    list * ('q list * 'm1) list) *
   ('q * (([> `Var ] as 'o1) * 'q * 'm1) list * 'k1 *
    ([> `Assign of 'j1 * 'j1
      | `Call of string * 'j1 list
      | `Case of
          'j1 *
          ([< `Atom of
                [> `Binop of 'u * 'q1 * 'q1
                 | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
                 | `Ident of 'c1
                 | `Unop of [ `Neg | `Not ] * 'q1 ]
                as 'q1
            | `Interval of 'q1 * 'q1 ]
           list * 'p1 list)
          list * 'p1 list
      | `For of 'j1 * 'j1 * 'j1 * 'q1 option * 'p1 list
      | `If of ('j1 * 'p1 list) list * 'p1 list
      | `While of 'j1 * 'p1 list ]
     as 'p1)
    list)
   list as 'k1) ->
  (unit, Ostap.Msg.t) Checked.t *
  ((('g1 *
     ([> `Const of [> `False | `Literal of int Monad.Id.t | `True ] ] as 's1))
    list * ('b1 * 'f1) list * ('b1 list * 'f1) list) *
   ('b1 * ('o1 * 'b1 * 'e1) list * 'r1 *
    ([> `Assign of 't * 't
      | `Call of 'w * 't list * [> `Proc of 'x * ('y * 'z * 'a1) list ]
      | `Case of
          't *
          ([> `Atom of
                [> `Const of
                     [> `False
                      | `Literal of int Monad.Id.t Monad.Id.t
                      | `True ] ]
                as 'u1
            | `Interval of 'u1 * 'u1 ]
           list * 't1 list)
          list * 't1 list
      | `For of 't * 't * 't * 'u1 option * 't1 list
      | `If of ('t * 't1 list) list * 't1 list
      | `While of 't * 't1 list ]
     as 't1)
    list)
   list as 'r1, Ostap.Msg.t)
  Checked.t
)
ident(
  def declarations "L4.ml" 78 2696 2700 "L4.ml" 101 4002 4007
)
"L4.ml" 97 3658 3679 "L4.ml" 97 3658 3689
type(
  bool
)
ident(
  def restricted "L4.ml" 97 3658 3690 "L4.ml" 97 3658 3749
)
"L4.ml" 97 3658 3690 "L4.ml" 97 3658 3693
type(
  'n
)
ident(
  def env "L4.ml" 97 3658 3694 "L4.ml" 97 3658 3749
)
"L4.ml" 97 3658 3694 "L4.ml" 97 3658 3695
type(
  'k1
)
ident(
  def d "L4.ml" 97 3658 3698 "L4.ml" 97 3658 3749
)
"L4.ml" 97 3658 3698 "L4.ml" 97 3658 3718
type(
  bool ->
  ('n -> 'm1 -> 'f1 Monad.Checked.t) ->
  ('n -> 'p1 -> 't1 Monad.Checked.t) ->
  'n -> 'k1 -> (unit, Ostap.Msg.t) Checked.t * ('r1, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref L3.Resolve.declarations
)
"L4.ml" 97 3658 3719 "L4.ml" 97 3658 3729
type(
  bool
)
ident(
  int_ref restricted "L4.ml" 97 3658 3679 "L4.ml" 97 3658 3689
)
"L4.ml" 97 3658 3730 "L4.ml" 97 3658 3733
type(
  'n -> 'm1 -> 'f1 Monad.Checked.t
)
ident(
  int_ref typ "L4.ml" 73 2471 2483 "L4.ml" 73 2471 2486
)
"L4.ml" 97 3658 3734 "L4.ml" 97 3658 3743
type(
  'n -> 'p1 -> 't1 Monad.Checked.t
)
ident(
  int_ref statement "L4.ml" 98 3751 3759 "L4.ml" 98 3751 3768
)
"L4.ml" 97 3658 3744 "L4.ml" 97 3658 3747
type(
  'n
)
ident(
  int_ref env "L4.ml" 97 3658 3690 "L4.ml" 97 3658 3693
)
"L4.ml" 97 3658 3748 "L4.ml" 97 3658 3749
type(
  'k1
)
ident(
  int_ref d "L4.ml" 97 3658 3694 "L4.ml" 97 3658 3695
)
"L4.ml" 97 3658 3698 "L4.ml" 97 3658 3749
call(
  tail
)
type(
  (unit, Ostap.Msg.t) Checked.t * ('r1, Ostap.Msg.t) Checked.t
)
"L4.ml" 97 3658 3694 "L4.ml" 97 3658 3749
type(
  'k1 -> (unit, Ostap.Msg.t) Checked.t * ('r1, Ostap.Msg.t) Checked.t
)
"L4.ml" 97 3658 3690 "L4.ml" 97 3658 3749
type(
  'n -> 'k1 -> (unit, Ostap.Msg.t) Checked.t * ('r1, Ostap.Msg.t) Checked.t
)
"L4.ml" 97 3658 3679 "L4.ml" 97 3658 3749
type(
  bool ->
  'n -> 'k1 -> (unit, Ostap.Msg.t) Checked.t * ('r1, Ostap.Msg.t) Checked.t
)
"L4.ml" 98 3751 3759 "L4.ml" 98 3751 3768
type(
  'n -> 'p1 -> 't1 Monad.Checked.t
)
ident(
  def statement "L4.ml" 78 2696 2700 "L4.ml" 101 4002 4007
)
"L4.ml" 98 3751 3769 "L4.ml" 98 3751 3772
type(
  'n
)
ident(
  def env "L4.ml" 98 3751 3773 "L4.ml" 98 3751 3859
)
"L4.ml" 98 3751 3773 "L4.ml" 98 3751 3777
type(
  'p1
)
ident(
  def stmt "L4.ml" 98 3751 3780 "L4.ml" 98 3751 3859
)
"L4.ml" 98 3751 3780 "L4.ml" 98 3751 3797
type(
  'n ->
  ('n -> 'j1 -> 't Monad.Checked.t) ->
  ('n -> 'q1 -> 'u1 Monad.Checked.t) ->
  ('n -> 'j1 -> 't Monad.Checked.t) ->
  (('p1 -> 't1 Monad.Checked.t) -> 'p1 -> 't1 Monad.Checked.t) ->
  'p1 -> 't1 Monad.Checked.t
)
ident(
  ext_ref L3.Resolve.statement
)
"L4.ml" 98 3751 3798 "L4.ml" 98 3751 3801
type(
  'n
)
ident(
  int_ref env "L4.ml" 98 3751 3769 "L4.ml" 98 3751 3772
)
"L4.ml" 98 3751 3802 "L4.ml" 98 3751 3813
type(
  'n -> 'j1 -> 't Monad.Checked.t
)
ident(
  int_ref destination "L4.ml" 96 3569 3577 "L4.ml" 96 3569 3588
)
"L4.ml" 98 3751 3814 "L4.ml" 98 3751 3837
type(
  'n -> 'q1 -> 'u1 Monad.Checked.t
)
ident(
  ext_ref L1.Resolve.constantExpr
)
"L4.ml" 98 3751 3838 "L4.ml" 98 3751 3848
type(
  'n -> 'j1 -> 't Monad.Checked.t
)
ident(
  int_ref expression "L4.ml" 95 3478 3486 "L4.ml" 95 3478 3496
)
"L4.ml" 98 3751 3849 "L4.ml" 98 3751 3854
type(
  ('p1 -> 't1 Monad.Checked.t) -> 'p1 -> 't1 Monad.Checked.t
)
ident(
  ext_ref Common.apply
)
"L4.ml" 98 3751 3855 "L4.ml" 98 3751 3859
type(
  'p1
)
ident(
  int_ref stmt "L4.ml" 98 3751 3773 "L4.ml" 98 3751 3777
)
"L4.ml" 98 3751 3780 "L4.ml" 98 3751 3859
call(
  tail
)
type(
  't1 Monad.Checked.t
)
"L4.ml" 98 3751 3773 "L4.ml" 98 3751 3859
type(
  'p1 -> 't1 Monad.Checked.t
)
"L4.ml" 98 3751 3769 "L4.ml" 98 3751 3859
type(
  'n -> 'p1 -> 't1 Monad.Checked.t
)
"L4.ml" 99 3860 3868 "L4.ml" 99 3860 3875
type(
  bool ->
  < compositeType : [> `Bool | `Int | `User of string * 'v1 * 'w1 ] -> bool;
    down : 'x1 -> 'y1;
    extractInternal : ([> `Const of
                            [> `Binop of
                                 ([< `Add
                                   | `And
                                   | `Div
                                   | `Eq
                                   | `Ge
                                   | `Gt
                                   | `Le
                                   | `Lt
                                   | `Mod
                                   | `Mul
                                   | `Ne
                                   | `Or
                                   | `Sub
                                   > `Add `Div `Mod `Mul `Sub ]
                                  as 'b2) *
                                 'a2 * 'a2
                             | `Const of
                                 [ `False
                                 | `Literal of int Monad.Id.t
                                 | `True ]
                             | `Field of 'a2 * 'c2
                             | `Ident of 'd2 * 'z1
                             | `Index of 'a2 * 'a2
                             | `Unop of [ `Neg | `Not ] * 'a2 ]
                            as 'a2
                        | `Proc of
                            'e2 *
                            (([< `Val | `Var ] as 'f2) * 'g2 * 'h2) list
                        | `Type of 'v1 * 'w1 ]
                       as 'z1) ->
                      'd2;
    getInternal : 'x1 -> 'i2;
    lookup : string -> ('z1, Ostap.Msg.t) Checked.t;
    lookupConst : 'j2 -> ('z1, Ostap.Msg.t) Checked.t;
    lookupProc : string ->
                 ([> `Proc of 'e2 * ('f2 * 'g2 * 'h2) list ], Ostap.Msg.t)
                 Checked.t;
    lookupVar : string -> ('z1, Ostap.Msg.t) Checked.t; namer : unit -> 'k2;
    up : unit -> 'l2;
    update : 'x1 ->
             [> `Param of
                  'i2 *
                  ([> `Bool | `Int | `User of string * 'v1 * 'w1 ] as 'm2)
              | `Proc of 'i2 * (([> `Var ] as 'n2) * 'x1 * 'm2) list
              | `Type of
                  'i2 *
                  ([> `Array of
                        [> `Const of
                             [> `False | `Literal of int Monad.Id.t | `True ] ] *
                        'o2
                    | `Bool
                    | `Int
                    | `Record of (String.t * 'o2) list
                    | `User of string * 'v1 * 'w1 ]
                   as 'o2)
              | `VParam of 'i2 * 'm2 ] ->
             (unit, Ostap.Msg.t) Checked.t;
    updateConst : 'p2 ->
                  ([> `Const of
                        [> `False | `Literal of int Monad.Id.t | `True ] ]
                   as 'q2) ->
                  ('r2, Ostap.Msg.t) Checked.t;
    updateVars : 'x1 list -> 'o2 -> ('s2, Ostap.Msg.t) Checked.t; .. > ->
  't2 *
  ((('p2 *
     ([> `Binop of 'b2 * 'v2 * 'v2
       | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
       | `Ident of 'j2
       | `Unop of [ `Neg | `Not ] * 'v2 ]
      as 'v2))
    list *
    ('x1 *
     ([> `Array of
           ([> `Binop of 'b2 * 'x2 * 'x2
             | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
             | `Ident of 'j2
             | `Unop of [ `Neg | `Not ] * 'x2 ]
            as 'x2) *
           'w2
       | `Bool
       | `Int
       | `Record of (String.t * 'w2) list
       | `User of string ]
      as 'w2))
    list * ('x1 list * 'w2) list) *
   ('x1 * ('n2 * 'x1 * 'w2) list * 'u2 *
    ([> `Assign of
          ([> `Binop of 'b2 * 'z2 * 'z2
            | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
            | `Field of 'z2 * 'c2
            | `Ident of string
            | `Index of 'z2 * 'z2
            | `Unop of [ `Neg | `Not ] * 'z2 ]
           as 'z2) *
          'z2
      | `Call of string * 'z2 list
      | `Case of
          'z2 *
          ([< `Atom of
                [> `Binop of 'b2 * 'a3 * 'a3
                 | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
                 | `Ident of 'j2
                 | `Unop of [ `Neg | `Not ] * 'a3 ]
                as 'a3
            | `Interval of 'a3 * 'a3 ]
           list * 'y2 list)
          list * 'y2 list
      | `For of 'z2 * 'z2 * 'z2 * 'a3 option * 'y2 list
      | `If of ('z2 * 'y2 list) list * 'y2 list
      | `While of 'z2 * 'y2 list ]
     as 'y2)
    list)
   list as 'u2) *
  ([> `Assign of
        ([> `Binop of 'b2 * 'c3 * 'c3
          | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
          | `Field of 'c3 * 'c2
          | `Ident of string
          | `Index of 'c3 * 'c3
          | `Unop of [ `Neg | `Not ] * 'c3 ]
         as 'c3) *
        'c3
    | `Call of string * 'c3 list
    | `Case of
        'c3 *
        ([< `Atom of
              [> `Binop of 'b2 * 'd3 * 'd3
               | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
               | `Ident of 'j2
               | `Unop of [ `Neg | `Not ] * 'd3 ]
              as 'd3
          | `Interval of 'd3 * 'd3 ]
         list * 'b3 list)
        list * 'b3 list
    | `For of 'c3 * 'c3 * 'c3 * 'd3 option * 'b3 list
    | `If of ('c3 * 'b3 list) list * 'b3 list
    | `While of 'c3 * 'b3 list ]
   as 'b3)
  list ->
  (('t2 *
    ((('p2 * 'q2) list * ('i2 * 'o2) list * ('i2 list * 'o2) list) *
     ('i2 * ('n2 * 'i2 * 'm2) list * 'e3 *
      ([> `Assign of 'a2 * 'a2
        | `Call of
            'd2 * 'a2 list * [> `Proc of 'e2 * ('f2 * 'g2 * 'h2) list ]
        | `Case of
            'a2 *
            ([> `Atom of
                  [> `Const of
                       [> `False
                        | `Literal of int Monad.Id.t Monad.Id.t Monad.Id.t
                        | `True ] ]
                  as 'g3
              | `Interval of 'g3 * 'g3 ]
             list * 'f3 list)
            list * 'f3 list
        | `For of 'a2 * 'a2 * 'a2 * 'g3 option * 'f3 list
        | `If of ('a2 * 'f3 list) list * 'f3 list
        | `While of 'a2 * 'f3 list ]
       as 'f3)
      list)
     list as 'e3) *
    ([> `Assign of 'a2 * 'a2
      | `Call of 'd2 * 'a2 list * [> `Proc of 'e2 * ('f2 * 'g2 * 'h2) list ]
      | `Case of
          'a2 *
          ([> `Atom of
                [> `Const of
                     [> `False
                      | `Literal of int Monad.Id.t Monad.Id.t
                      | `True ] ]
                as 'i3
            | `Interval of 'i3 * 'i3 ]
           list * 'h3 list)
          list * 'h3 list
      | `For of 'a2 * 'a2 * 'a2 * 'i3 option * 'h3 list
      | `If of ('a2 * 'h3 list) list * 'h3 list
      | `While of 'a2 * 'h3 list ]
     as 'h3)
    list) *
   'k2, Ostap.Msg.t)
  Checked.t
)
ident(
  def program "L4.ml" 100 3901 4001 "L4.ml" 101 4002 4007
)
"L4.ml" 99 3860 3876 "L4.ml" 99 3860 3886
type(
  bool
)
ident(
  def restricted "L4.ml" 99 3860 3887 "L4.ml" 100 3901 4001
)
"L4.ml" 99 3860 3887 "L4.ml" 99 3860 3890
type(
  < compositeType : [> `Bool | `Int | `User of string * 'v1 * 'w1 ] -> bool;
    down : 'x1 -> 'y1; extractInternal : 'z1 -> 'd2;
    getInternal : 'x1 -> 'i2;
    lookup : string -> ('z1, Ostap.Msg.t) Checked.t;
    lookupConst : 'j2 -> ('z1, Ostap.Msg.t) Checked.t;
    lookupProc : string ->
                 ([> `Proc of 'e2 * ('f2 * 'g2 * 'h2) list ], Ostap.Msg.t)
                 Checked.t;
    lookupVar : string -> ('z1, Ostap.Msg.t) Checked.t; namer : unit -> 'k2;
    up : unit -> 'l2;
    update : 'x1 ->
             [> `Param of 'i2 * 'm2
              | `Proc of 'i2 * ('n2 * 'x1 * 'm2) list
              | `Type of 'i2 * 'o2
              | `VParam of 'i2 * 'm2 ] ->
             (unit, Ostap.Msg.t) Checked.t;
    updateConst : 'p2 -> 'q2 -> ('r2, Ostap.Msg.t) Checked.t;
    updateVars : 'x1 list -> 'o2 -> ('s2, Ostap.Msg.t) Checked.t; .. >
  as 'j3
)
ident(
  def env "L4.ml" 99 3860 3891 "L4.ml" 100 3901 4001
)
"L4.ml" 99 3860 3891 "L4.ml" 99 3860 3892
type(
  't2 * 'u2 * 'b3 list
)
ident(
  def m "L4.ml" 100 3901 3907 "L4.ml" 100 3901 4001
)
"L4.ml" 100 3901 3907 "L4.ml" 100 3901 3921
type(
  'j3 ->
  ('j3 -> 'u2 -> (unit, Ostap.Msg.t) Checked.t * ('e3, Ostap.Msg.t) Checked.t) ->
  ('b3 -> 'h3 Monad.Checked.t) ->
  't2 * 'u2 * 'b3 list -> ('t2 * 'e3 * 'h3 list, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Module.resolve
)
"L4.ml" 100 3901 3922 "L4.ml" 100 3901 3925
type(
  'j3
)
ident(
  int_ref env "L4.ml" 99 3860 3887 "L4.ml" 99 3860 3890
)
"L4.ml" 100 3901 3927 "L4.ml" 100 3901 3939
type(
  bool ->
  'j3 -> 'u2 -> (unit, Ostap.Msg.t) Checked.t * ('e3, Ostap.Msg.t) Checked.t
)
ident(
  int_ref declarations "L4.ml" 97 3658 3666 "L4.ml" 97 3658 3678
)
"L4.ml" 100 3901 3940 "L4.ml" 100 3901 3950
type(
  bool
)
ident(
  int_ref restricted "L4.ml" 99 3860 3876 "L4.ml" 99 3860 3886
)
"L4.ml" 100 3901 3926 "L4.ml" 100 3901 3951
call(
  stack
)
type(
  'j3 -> 'u2 -> (unit, Ostap.Msg.t) Checked.t * ('e3, Ostap.Msg.t) Checked.t
)
"L4.ml" 100 3901 3953 "L4.ml" 100 3901 3962
type(
  'j3 -> 'b3 -> 'h3 Monad.Checked.t
)
ident(
  int_ref statement "L4.ml" 98 3751 3759 "L4.ml" 98 3751 3768
)
"L4.ml" 100 3901 3963 "L4.ml" 100 3901 3966
type(
  'j3
)
ident(
  int_ref env "L4.ml" 99 3860 3887 "L4.ml" 99 3860 3890
)
"L4.ml" 100 3901 3952 "L4.ml" 100 3901 3967
call(
  stack
)
type(
  'b3 -> 'h3 Monad.Checked.t
)
"L4.ml" 100 3901 3968 "L4.ml" 100 3901 3969
type(
  't2 * 'u2 * 'b3 list
)
ident(
  int_ref m "L4.ml" 99 3860 3891 "L4.ml" 99 3860 3892
)
"L4.ml" 100 3901 3907 "L4.ml" 100 3901 3969
call(
  stack
)
type(
  ('t2 * 'e3 * 'h3 list, Ostap.Msg.t) Checked.t
)
"L4.ml" 100 3901 3980 "L4.ml" 100 3901 3981
type(
  't2 * 'e3 * 'h3 list
)
ident(
  def x "L4.ml" 100 3901 3985 "L4.ml" 100 3901 4000
)
"L4.ml" 100 3901 3985 "L4.ml" 100 3901 3986
type(
  't2 * 'e3 * 'h3 list
)
ident(
  int_ref x "L4.ml" 100 3901 3980 "L4.ml" 100 3901 3981
)
"L4.ml" 100 3901 3988 "L4.ml" 100 3901 3991
type(
  'j3
)
ident(
  int_ref env "L4.ml" 99 3860 3887 "L4.ml" 99 3860 3890
)
"L4.ml" 100 3901 3988 "L4.ml" 100 3901 3997
call(
  stack
)
type(
  unit -> 'k2
)
"L4.ml" 100 3901 3998 "L4.ml" 100 3901 4000
type(
  unit
)
"L4.ml" 100 3901 3988 "L4.ml" 100 3901 4000
type(
  'k2
)
"L4.ml" 100 3901 3985 "L4.ml" 100 3901 4000
type(
  ('t2 * 'e3 * 'h3 list) * 'k2
)
"L4.ml" 100 3901 3975 "L4.ml" 100 3901 4001
type(
  't2 * 'e3 * 'h3 list -> ('t2 * 'e3 * 'h3 list) * 'k2
)
"L4.ml" 100 3901 3907 "L4.ml" 100 3901 4001
call(
  tail
)
type(
  (('t2 * 'e3 * 'h3 list) * 'k2, Ostap.Msg.t) Checked.t
)
type(
  ('t2 * 'e3 * 'h3 list, Ostap.Msg.t) Checked.t ->
  ('t2 * 'e3 * 'h3 list -> ('t2 * 'e3 * 'h3 list) * 'k2) ->
  (('t2 * 'e3 * 'h3 list) * 'k2, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.( -?-> )
)
"L4.ml" 99 3860 3891 "L4.ml" 100 3901 4001
type(
  't2 * 'u2 * 'b3 list ->
  (('t2 * 'e3 * 'h3 list) * 'k2, Ostap.Msg.t) Checked.t
)
"L4.ml" 99 3860 3887 "L4.ml" 100 3901 4001
type(
  'j3 ->
  't2 * 'u2 * 'b3 list ->
  (('t2 * 'e3 * 'h3 list) * 'k2, Ostap.Msg.t) Checked.t
)
"L4.ml" 99 3860 3876 "L4.ml" 100 3901 4001
type(
  bool ->
  'j3 ->
  't2 * 'u2 * 'b3 list ->
  (('t2 * 'e3 * 'h3 list) * 'k2, Ostap.Msg.t) Checked.t
)
"L4.ml" 108 4139 4147 "L4.ml" 108 4139 4149
type(
  < equal : ([> `Bool | `Int | `User of 'b * 'c * 'a ] as 'a) -> 'a -> bool;
    primitive : 'a -> bool;
    string : ([> `Array of
                   ([> `Binop of
                         [< `Add
                          | `And
                          | `Div
                          | `Eq
                          | `Ge
                          | `Gt
                          | `Le
                          | `Lt
                          | `Mod
                          | `Mul
                          | `Ne
                          | `Or
                          | `Sub ] *
                         'e * 'e
                     | `Const of [< `False | `Literal of int | `True ]
                     | `Field of 'e * string
                     | `Ident of string * 'f
                     | `Index of 'e * 'e
                     | `Unop of [< `Neg | `Not ] * 'e ]
                    as 'e) *
                   'd
               | `Bool
               | `Int
               | `Record of (string * 'd) list
               | `User of 'g * string * 'h ]
              as 'd) ->
             string >
)
ident(
  def ts "L4.ml" 124 4687 4691 "L4.ml" 193 7368 7373
)
"L4.ml" 109 4158 4171 "L4.ml" 109 4158 4175
type(
  < equal : 'a -> 'a -> bool; primitive : 'a -> bool; string : 'd -> string >
)
"L4.ml" 110 4177 4204 "L4.ml" 110 4177 4220
type(
  < equal : (_[> `User of '_j * '_k * 'i ] as 'i) -> 'i -> bool;
    primitive : 'a -> bool;
    string : _[< `Bool | `Int | `User of string * '_l * '_m ] -> string >
)
ident(
  ext_ref PrimitiveType.ts
)
"L4.ml" 110 4177 4204 "L4.ml" 110 4177 4230
type(
  'a -> bool
)
type(
  'a -> bool
)
"L4.ml" 110 4177 4185 "L4.ml" 110 4177 4230
type(
  < equal : 'a -> 'a -> bool; primitive : 'a -> bool; string : 'd -> string > ->
  'a -> bool
)
"L4.ml" 111 4231 4252 "L4.ml" 111 4231 4253
type(
  'a
)
ident(
  def x "L4.ml" 111 4231 4254 "L4.ml" 120 4603 4625
)
"L4.ml" 111 4231 4254 "L4.ml" 111 4231 4255
type(
  'a
)
ident(
  def y "L4.ml" 112 4259 4269 "L4.ml" 120 4603 4625
)
"L4.ml" 112 4259 4277 "L4.ml" 112 4259 4288
type(
  'n -> ([> `User of 'n * 'p * 'o ] as 'o) -> 'n
)
ident(
  def representer "L4.ml" 112 4259 4269 "L4.ml" 120 4603 4625
)
"L4.ml" 112 4259 4289 "L4.ml" 112 4259 4293
type(
  'n
)
ident(
  def name "L4.ml" 112 4259 4296 "L4.ml" 114 4353 4374
)
"L4.ml" 113 4305 4317 "L4.ml" 113 4305 4322
type(
  'n
)
ident(
  def name' "L4.ml" 113 4305 4333 "L4.ml" 113 4305 4352
)
"L4.ml" 113 4305 4324 "L4.ml" 113 4305 4325
type(
  'p
)
"L4.ml" 113 4305 4327 "L4.ml" 113 4305 4328
type(
  'o
)
ident(
  def x "L4.ml" 113 4305 4333 "L4.ml" 113 4305 4352
)
"L4.ml" 113 4305 4317 "L4.ml" 113 4305 4328
type(
  'n * 'p * 'o
)
"L4.ml" 113 4305 4310 "L4.ml" 113 4305 4329
type(
  'o
)
"L4.ml" 113 4305 4333 "L4.ml" 113 4305 4344
type(
  'n -> 'o -> 'n
)
ident(
  int_ref representer "L4.ml" 112 4259 4277 "L4.ml" 112 4259 4288
)
"L4.ml" 113 4305 4345 "L4.ml" 113 4305 4350
type(
  'n
)
ident(
  int_ref name' "L4.ml" 113 4305 4317 "L4.ml" 113 4305 4322
)
"L4.ml" 113 4305 4351 "L4.ml" 113 4305 4352
type(
  'o
)
ident(
  int_ref x "L4.ml" 113 4305 4327 "L4.ml" 113 4305 4328
)
"L4.ml" 113 4305 4333 "L4.ml" 113 4305 4352
call(
  tail
)
type(
  'n
)
"L4.ml" 114 4353 4365 "L4.ml" 114 4353 4366
type(
  'o
)
"L4.ml" 114 4353 4370 "L4.ml" 114 4353 4374
type(
  'n
)
ident(
  int_ref name "L4.ml" 112 4259 4289 "L4.ml" 112 4259 4293
)
"L4.ml" 112 4259 4296 "L4.ml" 114 4353 4374
type(
  'o -> 'n
)
"L4.ml" 112 4259 4289 "L4.ml" 114 4353 4374
type(
  'n -> 'o -> 'n
)
"L4.ml" 116 4388 4401 "L4.ml" 116 4388 4405
type(
  < equal : 'a -> 'a -> bool; primitive : 'a -> bool; string : 'd -> string >
)
ident(
  int_ref self "L4.ml" 109 4158 4171 "L4.ml" 109 4158 4175
)
"L4.ml" 116 4388 4401 "L4.ml" 116 4388 4415
call(
  stack
)
type(
  'a -> bool
)
"L4.ml" 116 4388 4416 "L4.ml" 116 4388 4417
type(
  'a
)
ident(
  int_ref x "L4.ml" 111 4231 4252 "L4.ml" 111 4231 4253
)
"L4.ml" 116 4388 4401 "L4.ml" 116 4388 4417
type(
  bool
)
"L4.ml" 116 4388 4421 "L4.ml" 116 4388 4425
type(
  < equal : 'a -> 'a -> bool; primitive : 'a -> bool; string : 'd -> string >
)
ident(
  int_ref self "L4.ml" 109 4158 4171 "L4.ml" 109 4158 4175
)
"L4.ml" 116 4388 4421 "L4.ml" 116 4388 4435
call(
  stack
)
type(
  'a -> bool
)
"L4.ml" 116 4388 4436 "L4.ml" 116 4388 4437
type(
  'a
)
ident(
  int_ref y "L4.ml" 111 4231 4254 "L4.ml" 111 4231 4255
)
"L4.ml" 116 4388 4421 "L4.ml" 116 4388 4437
type(
  bool
)
"L4.ml" 116 4388 4401 "L4.ml" 116 4388 4437
type(
  bool
)
type(
  bool -> bool -> bool
)
ident(
  ext_ref Pervasives.( && )
)
"L4.ml" 117 4439 4454 "L4.ml" 117 4439 4470
type(
  < equal : 'a -> 'a -> bool;
    primitive : (_[> `Bool | `Int | `User of '_r * '_s * 'q ] as 'q) -> bool;
    string : _[< `Bool | `Int | `User of string * '_t * '_u ] -> string >
)
ident(
  ext_ref PrimitiveType.ts
)
"L4.ml" 117 4439 4454 "L4.ml" 117 4439 4476
call(
  tail
)
type(
  'a -> 'a -> bool
)
"L4.ml" 117 4439 4477 "L4.ml" 117 4439 4478
type(
  'a
)
ident(
  int_ref x "L4.ml" 111 4231 4252 "L4.ml" 111 4231 4253
)
"L4.ml" 117 4439 4479 "L4.ml" 117 4439 4480
type(
  'a
)
ident(
  int_ref y "L4.ml" 111 4231 4254 "L4.ml" 111 4231 4255
)
"L4.ml" 117 4439 4454 "L4.ml" 117 4439 4480
type(
  bool
)
"L4.ml" 118 4482 4503 "L4.ml" 118 4482 4504
type(
  'a
)
ident(
  int_ref x "L4.ml" 111 4231 4252 "L4.ml" 111 4231 4253
)
"L4.ml" 118 4482 4506 "L4.ml" 118 4482 4507
type(
  'a
)
ident(
  int_ref y "L4.ml" 111 4231 4254 "L4.ml" 111 4231 4255
)
"L4.ml" 118 4482 4503 "L4.ml" 118 4482 4507
type(
  'a * 'a
)
"L4.ml" 119 4513 4532 "L4.ml" 119 4513 4534
type(
  'b
)
ident(
  def xn "L4.ml" 119 4513 4563 "L4.ml" 119 4513 4602
)
"L4.ml" 119 4513 4536 "L4.ml" 119 4513 4537
type(
  'c
)
"L4.ml" 119 4513 4539 "L4.ml" 119 4513 4540
type(
  'a
)
ident(
  def x "L4.ml" 119 4513 4563 "L4.ml" 119 4513 4602
)
"L4.ml" 119 4513 4532 "L4.ml" 119 4513 4540
type(
  'b * 'c * 'a
)
"L4.ml" 119 4513 4525 "L4.ml" 119 4513 4541
type(
  'a
)
"L4.ml" 119 4513 4550 "L4.ml" 119 4513 4552
type(
  'b
)
ident(
  def yn "L4.ml" 119 4513 4563 "L4.ml" 119 4513 4602
)
"L4.ml" 119 4513 4554 "L4.ml" 119 4513 4555
type(
  'c
)
"L4.ml" 119 4513 4557 "L4.ml" 119 4513 4558
type(
  'a
)
ident(
  def y "L4.ml" 119 4513 4563 "L4.ml" 119 4513 4602
)
"L4.ml" 119 4513 4550 "L4.ml" 119 4513 4558
type(
  'b * 'c * 'a
)
"L4.ml" 119 4513 4543 "L4.ml" 119 4513 4559
type(
  'a
)
"L4.ml" 119 4513 4525 "L4.ml" 119 4513 4559
type(
  'a * 'a
)
"L4.ml" 119 4513 4564 "L4.ml" 119 4513 4575
type(
  'b -> 'a -> 'b
)
ident(
  int_ref representer "L4.ml" 112 4259 4277 "L4.ml" 112 4259 4288
)
"L4.ml" 119 4513 4576 "L4.ml" 119 4513 4578
type(
  'b
)
ident(
  int_ref xn "L4.ml" 119 4513 4532 "L4.ml" 119 4513 4534
)
"L4.ml" 119 4513 4579 "L4.ml" 119 4513 4580
type(
  'a
)
ident(
  int_ref x "L4.ml" 119 4513 4539 "L4.ml" 119 4513 4540
)
"L4.ml" 119 4513 4563 "L4.ml" 119 4513 4581
call(
  stack
)
type(
  'b
)
"L4.ml" 119 4513 4585 "L4.ml" 119 4513 4596
type(
  'b -> 'a -> 'b
)
ident(
  int_ref representer "L4.ml" 112 4259 4277 "L4.ml" 112 4259 4288
)
"L4.ml" 119 4513 4597 "L4.ml" 119 4513 4599
type(
  'b
)
ident(
  int_ref yn "L4.ml" 119 4513 4550 "L4.ml" 119 4513 4552
)
"L4.ml" 119 4513 4600 "L4.ml" 119 4513 4601
type(
  'a
)
ident(
  int_ref y "L4.ml" 119 4513 4557 "L4.ml" 119 4513 4558
)
"L4.ml" 119 4513 4584 "L4.ml" 119 4513 4602
call(
  stack
)
type(
  'b
)
"L4.ml" 119 4513 4563 "L4.ml" 119 4513 4602
type(
  bool
)
type(
  'b -> 'b -> bool
)
ident(
  ext_ref Pervasives.( = )
)
"L4.ml" 120 4603 4615 "L4.ml" 120 4603 4616
type(
  'a * 'a
)
"L4.ml" 120 4603 4620 "L4.ml" 120 4603 4625
type(
  bool
)
"L4.ml" 118 4482 4497 "L4.ml" 120 4603 4625
type(
  bool
)
"L4.ml" 116 4388 4398 "L4.ml" 120 4603 4625
type(
  bool
)
"L4.ml" 112 4259 4269 "L4.ml" 120 4603 4625
type(
  bool
)
"L4.ml" 111 4231 4254 "L4.ml" 120 4603 4625
type(
  'a -> bool
)
"L4.ml" 111 4231 4252 "L4.ml" 120 4603 4625
type(
  'a -> 'a -> bool
)
type(
  'a -> 'a -> bool
)
"L4.ml" 111 4231 4239 "L4.ml" 120 4603 4625
type(
  < equal : 'a -> 'a -> bool; primitive : 'a -> bool; string : 'd -> string > ->
  'a -> 'a -> bool
)
"L4.ml" 121 4626 4648 "L4.ml" 121 4626 4649
type(
  'd
)
ident(
  def x "L4.ml" 121 4626 4652 "L4.ml" 121 4626 4675
)
"L4.ml" 121 4626 4652 "L4.ml" 121 4626 4660
type(
  Ostap.Pretty.printer -> string
)
ident(
  ext_ref Ostap.Pretty.toString
)
"L4.ml" 121 4626 4662 "L4.ml" 121 4626 4672
type(
  'd -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref PrintR.typ "L4.ml" 54 1907 1915 "L4.ml" 54 1907 1918
)
"L4.ml" 121 4626 4673 "L4.ml" 121 4626 4674
type(
  'd
)
ident(
  int_ref x "L4.ml" 121 4626 4648 "L4.ml" 121 4626 4649
)
"L4.ml" 121 4626 4661 "L4.ml" 121 4626 4675
call(
  stack
)
type(
  Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 121 4626 4652 "L4.ml" 121 4626 4675
call(
  tail
)
type(
  string
)
"L4.ml" 121 4626 4648 "L4.ml" 121 4626 4675
type(
  'd -> string
)
type(
  'd -> string
)
"L4.ml" 121 4626 4634 "L4.ml" 121 4626 4675
type(
  < equal : 'a -> 'a -> bool; primitive : 'a -> bool; string : 'd -> string > ->
  'd -> string
)
"L4.ml" 109 4158 4164 "L4.ml" 122 4676 4685
type(
  < equal : 'a -> 'a -> bool; primitive : 'a -> bool; string : 'd -> string >
)
"L4.ml" 124 4687 4699 "L4.ml" 124 4687 4715
type(
  'v ->
  ([> `Array of 'x * 'y | `User of 'z * 'a1 * 'w ] as 'w) ->
  ('y, Ostap.Msg.t) Checked.t
)
ident(
  def arrayElementType "L4.ml" 124 4687 4691 "L4.ml" 193 7368 7373
)
"L4.ml" 124 4687 4716 "L4.ml" 124 4687 4717
type(
  'v
)
ident(
  def z "L4.ml" 124 4687 4720 "L4.ml" 127 4804 4873
)
"L4.ml" 125 4729 4743 "L4.ml" 125 4729 4744
type(
  'x
)
"L4.ml" 125 4729 4746 "L4.ml" 125 4729 4747
type(
  'y
)
ident(
  def t "L4.ml" 125 4729 4752 "L4.ml" 125 4729 4756
)
"L4.ml" 125 4729 4743 "L4.ml" 125 4729 4747
type(
  'x * 'y
)
"L4.ml" 125 4729 4735 "L4.ml" 125 4729 4748
type(
  'w
)
"L4.ml" 125 4729 4755 "L4.ml" 125 4729 4756
type(
  'y
)
ident(
  int_ref t "L4.ml" 125 4729 4746 "L4.ml" 125 4729 4747
)
"L4.ml" 125 4729 4752 "L4.ml" 125 4729 4756
call(
  tail
)
type(
  ('y, Ostap.Msg.t) Checked.t
)
type(
  'y -> ('y, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.( !! )
)
"L4.ml" 126 4757 4771 "L4.ml" 126 4757 4772
type(
  'z
)
"L4.ml" 126 4757 4774 "L4.ml" 126 4757 4775
type(
  'a1
)
"L4.ml" 126 4757 4777 "L4.ml" 126 4757 4778
type(
  'w
)
ident(
  def t "L4.ml" 126 4757 4783 "L4.ml" 126 4757 4803
)
"L4.ml" 126 4757 4771 "L4.ml" 126 4757 4778
type(
  'z * 'a1 * 'w
)
"L4.ml" 126 4757 4763 "L4.ml" 126 4757 4779
type(
  'w
)
"L4.ml" 126 4757 4783 "L4.ml" 126 4757 4799
type(
  'v -> 'w -> ('y, Ostap.Msg.t) Checked.t
)
ident(
  int_ref arrayElementType "L4.ml" 124 4687 4699 "L4.ml" 124 4687 4715
)
"L4.ml" 126 4757 4800 "L4.ml" 126 4757 4801
type(
  'v
)
ident(
  int_ref z "L4.ml" 124 4687 4716 "L4.ml" 124 4687 4717
)
"L4.ml" 126 4757 4802 "L4.ml" 126 4757 4803
type(
  'w
)
ident(
  int_ref t "L4.ml" 126 4757 4777 "L4.ml" 126 4757 4778
)
"L4.ml" 126 4757 4783 "L4.ml" 126 4757 4803
call(
  tail
)
type(
  ('y, Ostap.Msg.t) Checked.t
)
"L4.ml" 127 4804 4810 "L4.ml" 127 4804 4811
type(
  'w
)
"L4.ml" 127 4804 4820 "L4.ml" 127 4804 4834
type(
  string -> string array -> Ostap.Msg.Locator.t -> Ostap.Msg.t
)
ident(
  ext_ref Ostap.Msg.make
)
"L4.ml" 127 4804 4835 "L4.ml" 127 4804 4856
type(
  string
)
"L4.ml" 127 4804 4857 "L4.ml" 127 4804 4861
type(
  string array
)
"L4.ml" 127 4804 4863 "L4.ml" 127 4804 4869
type(
  'v -> Ostap.Msg.Locator.t
)
ident(
  ext_ref Common.locate
)
"L4.ml" 127 4804 4870 "L4.ml" 127 4804 4871
type(
  'v
)
ident(
  int_ref z "L4.ml" 124 4687 4716 "L4.ml" 124 4687 4717
)
"L4.ml" 127 4804 4862 "L4.ml" 127 4804 4872
call(
  stack
)
type(
  Ostap.Msg.Locator.t
)
"L4.ml" 127 4804 4820 "L4.ml" 127 4804 4872
call(
  stack
)
type(
  Ostap.Msg.t
)
"L4.ml" 127 4804 4819 "L4.ml" 127 4804 4873
type(
  Ostap.Msg.t list
)
type(
  Ostap.Msg.t list
)
"L4.ml" 127 4804 4815 "L4.ml" 127 4804 4873
type(
  ('y, Ostap.Msg.t) Checked.t
)
"L4.ml" 124 4687 4720 "L4.ml" 127 4804 4873
type(
  'w -> ('y, Ostap.Msg.t) Checked.t
)
"L4.ml" 124 4687 4716 "L4.ml" 127 4804 4873
type(
  'v -> 'w -> ('y, Ostap.Msg.t) Checked.t
)
"L4.ml" 129 4875 4887 "L4.ml" 129 4875 4898
type(
  ([> `Array of [> `Const of [> `Literal of 'c1 ] ] * 'd1
    | `User of 'e1 * 'f1 * 'b1 ]
   as 'b1) ->
  'c1
)
ident(
  def arrayLength "L4.ml" 129 4875 4879 "L4.ml" 193 7368 7373
)
"L4.ml" 130 4910 4941 "L4.ml" 130 4910 4942
type(
  'c1
)
ident(
  def x "L4.ml" 130 4910 4951 "L4.ml" 130 4910 4952
)
"L4.ml" 130 4910 4932 "L4.ml" 130 4910 4942
type(
  [> `Literal of 'c1 ] as 'g1
)
"L4.ml" 130 4910 4924 "L4.ml" 130 4910 4943
type(
  [> `Const of 'g1 ] as 'h1
)
"L4.ml" 130 4910 4945 "L4.ml" 130 4910 4946
type(
  'd1
)
"L4.ml" 130 4910 4924 "L4.ml" 130 4910 4946
type(
  'h1 * 'd1
)
"L4.ml" 130 4910 4916 "L4.ml" 130 4910 4947
type(
  'b1
)
"L4.ml" 130 4910 4951 "L4.ml" 130 4910 4952
type(
  'c1
)
ident(
  int_ref x "L4.ml" 130 4910 4941 "L4.ml" 130 4910 4942
)
"L4.ml" 131 4953 4966 "L4.ml" 131 4953 4967
type(
  'e1
)
"L4.ml" 131 4953 4969 "L4.ml" 131 4953 4970
type(
  'f1
)
"L4.ml" 131 4953 4972 "L4.ml" 131 4953 4973
type(
  'b1
)
ident(
  def t "L4.ml" 131 4953 4978 "L4.ml" 131 4953 4991
)
"L4.ml" 131 4953 4966 "L4.ml" 131 4953 4973
type(
  'e1 * 'f1 * 'b1
)
"L4.ml" 131 4953 4959 "L4.ml" 131 4953 4974
type(
  'b1
)
"L4.ml" 131 4953 4978 "L4.ml" 131 4953 4989
type(
  'b1 -> 'c1
)
ident(
  int_ref arrayLength "L4.ml" 129 4875 4887 "L4.ml" 129 4875 4898
)
"L4.ml" 131 4953 4990 "L4.ml" 131 4953 4991
type(
  'b1
)
ident(
  int_ref t "L4.ml" 131 4953 4972 "L4.ml" 131 4953 4973
)
"L4.ml" 131 4953 4978 "L4.ml" 131 4953 4991
call(
  tail
)
type(
  'c1
)
"L4.ml" 132 4992 4998 "L4.ml" 132 4992 4999
type(
  'b1
)
"L4.ml" 132 4992 5003 "L4.ml" 132 4992 5014
type(
  string -> 'c1
)
ident(
  ext_ref Pervasives.invalid_arg
)
"L4.ml" 132 4992 5015 "L4.ml" 132 4992 5034
type(
  string
)
"L4.ml" 132 4992 5003 "L4.ml" 132 4992 5034
call(
  tail
)
type(
  'c1
)
"L4.ml" 129 4875 4901 "L4.ml" 132 4992 5034
type(
  'b1 -> 'c1
)
"L4.ml" 134 5036 5048 "L4.ml" 134 5036 5057
type(
  'i1 ->
  string ->
  ([> `Record of (string * 'k1) list | `User of 'l1 * 'm1 * 'j1 ] as 'j1) ->
  ('k1, Ostap.Msg.t) Checked.t
)
ident(
  def fieldType "L4.ml" 134 5036 5040 "L4.ml" 193 7368 7373
)
"L4.ml" 134 5036 5058 "L4.ml" 134 5036 5059
type(
  'i1
)
ident(
  def z "L4.ml" 134 5036 5060 "L4.ml" 142 5395 5470
)
"L4.ml" 134 5036 5060 "L4.ml" 134 5036 5064
type(
  string
)
ident(
  def name "L4.ml" 134 5036 5067 "L4.ml" 142 5395 5470
)
"L4.ml" 135 5076 5090 "L4.ml" 135 5076 5091
type(
  (string * 'k1) list
)
ident(
  def f "L4.ml" 136 5095 5103 "L4.ml" 140 5334 5343
)
"L4.ml" 135 5076 5082 "L4.ml" 135 5076 5091
type(
  'j1
)
"L4.ml" 136 5095 5112 "L4.ml" 136 5095 5115
type(
  string * 'k1 -> 'k1
)
ident(
  ext_ref Pervasives.snd
)
"L4.ml" 136 5095 5117 "L4.ml" 136 5095 5126
type(
  (string * 'k1 -> bool) -> (string * 'k1) list -> string * 'k1
)
ident(
  ext_ref List.find
)
"L4.ml" 136 5095 5133 "L4.ml" 136 5095 5134
type(
  string
)
ident(
  def n "L4.ml" 136 5095 5142 "L4.ml" 136 5095 5150
)
"L4.ml" 136 5095 5136 "L4.ml" 136 5095 5137
type(
  'k1
)
"L4.ml" 136 5095 5133 "L4.ml" 136 5095 5137
type(
  string * 'k1
)
"L4.ml" 136 5095 5142 "L4.ml" 136 5095 5143
type(
  string
)
ident(
  int_ref n "L4.ml" 136 5095 5133 "L4.ml" 136 5095 5134
)
"L4.ml" 136 5095 5146 "L4.ml" 136 5095 5150
type(
  string
)
ident(
  int_ref name "L4.ml" 134 5036 5060 "L4.ml" 134 5036 5064
)
"L4.ml" 136 5095 5142 "L4.ml" 136 5095 5150
type(
  bool
)
type(
  string -> string -> bool
)
ident(
  ext_ref Pervasives.( = )
)
"L4.ml" 136 5095 5127 "L4.ml" 136 5095 5151
type(
  string * 'k1 -> bool
)
"L4.ml" 136 5095 5152 "L4.ml" 136 5095 5153
type(
  (string * 'k1) list
)
ident(
  int_ref f "L4.ml" 135 5076 5090 "L4.ml" 135 5076 5091
)
"L4.ml" 136 5095 5116 "L4.ml" 136 5095 5154
call(
  stack
)
type(
  string * 'k1
)
"L4.ml" 136 5095 5111 "L4.ml" 136 5095 5155
type(
  'k1
)
"L4.ml" 136 5095 5108 "L4.ml" 136 5095 5155
call(
  stack
)
type(
  ('k1, Ostap.Msg.t) Checked.t
)
type(
  'k1 -> ('k1, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.( !! )
)
"L4.ml" 137 5162 5173 "L4.ml" 137 5162 5182
type(
  exn
)
"L4.ml" 137 5162 5192 "L4.ml" 137 5162 5206
type(
  string -> string array -> Ostap.Msg.Locator.t -> Ostap.Msg.t
)
ident(
  ext_ref Ostap.Msg.make
)
"L4.ml" 137 5162 5207 "L4.ml" 137 5162 5247
type(
  string
)
"L4.ml" 138 5249 5282 "L4.ml" 138 5249 5286
type(
  string
)
ident(
  int_ref name "L4.ml" 134 5036 5060 "L4.ml" 134 5036 5064
)
"L4.ml" 138 5249 5280 "L4.ml" 138 5249 5288
type(
  string array
)
"L4.ml" 138 5249 5290 "L4.ml" 138 5249 5296
type(
  string -> Ostap.Msg.Locator.t
)
ident(
  ext_ref Common.locate
)
"L4.ml" 138 5249 5297 "L4.ml" 138 5249 5301
type(
  string
)
ident(
  int_ref name "L4.ml" 134 5036 5060 "L4.ml" 134 5036 5064
)
"L4.ml" 138 5249 5289 "L4.ml" 138 5249 5302
call(
  stack
)
type(
  Ostap.Msg.Locator.t
)
"L4.ml" 137 5162 5192 "L4.ml" 138 5249 5302
call(
  stack
)
type(
  Ostap.Msg.t
)
"L4.ml" 137 5162 5191 "L4.ml" 139 5303 5333
type(
  Ostap.Msg.t list
)
type(
  Ostap.Msg.t list
)
"L4.ml" 137 5162 5186 "L4.ml" 139 5303 5333
type(
  ('k1, Ostap.Msg.t) Checked.t
)
"L4.ml" 136 5095 5103 "L4.ml" 140 5334 5343
type(
  ('k1, Ostap.Msg.t) Checked.t
)
"L4.ml" 141 5347 5364 "L4.ml" 141 5347 5365
type(
  'l1
)
"L4.ml" 141 5347 5367 "L4.ml" 141 5347 5368
type(
  'm1
)
"L4.ml" 141 5347 5370 "L4.ml" 141 5347 5371
type(
  'j1
)
ident(
  def t "L4.ml" 141 5347 5376 "L4.ml" 141 5347 5394
)
"L4.ml" 141 5347 5364 "L4.ml" 141 5347 5371
type(
  'l1 * 'm1 * 'j1
)
"L4.ml" 141 5347 5357 "L4.ml" 141 5347 5372
type(
  'j1
)
"L4.ml" 141 5347 5376 "L4.ml" 141 5347 5385
type(
  'i1 -> string -> 'j1 -> ('k1, Ostap.Msg.t) Checked.t
)
ident(
  int_ref fieldType "L4.ml" 134 5036 5048 "L4.ml" 134 5036 5057
)
"L4.ml" 141 5347 5386 "L4.ml" 141 5347 5387
type(
  'i1
)
ident(
  int_ref z "L4.ml" 134 5036 5058 "L4.ml" 134 5036 5059
)
"L4.ml" 141 5347 5388 "L4.ml" 141 5347 5392
type(
  string
)
ident(
  int_ref name "L4.ml" 134 5036 5060 "L4.ml" 134 5036 5064
)
"L4.ml" 141 5347 5393 "L4.ml" 141 5347 5394
type(
  'j1
)
ident(
  int_ref t "L4.ml" 141 5347 5370 "L4.ml" 141 5347 5371
)
"L4.ml" 141 5347 5376 "L4.ml" 141 5347 5394
call(
  tail
)
type(
  ('k1, Ostap.Msg.t) Checked.t
)
"L4.ml" 142 5395 5405 "L4.ml" 142 5395 5406
type(
  'j1
)
"L4.ml" 142 5395 5416 "L4.ml" 142 5395 5430
type(
  string -> string array -> Ostap.Msg.Locator.t -> Ostap.Msg.t
)
ident(
  ext_ref Ostap.Msg.make
)
"L4.ml" 142 5395 5431 "L4.ml" 142 5395 5453
type(
  string
)
"L4.ml" 142 5395 5454 "L4.ml" 142 5395 5458
type(
  string array
)
"L4.ml" 142 5395 5460 "L4.ml" 142 5395 5466
type(
  'i1 -> Ostap.Msg.Locator.t
)
ident(
  ext_ref Common.locate
)
"L4.ml" 142 5395 5467 "L4.ml" 142 5395 5468
type(
  'i1
)
ident(
  int_ref z "L4.ml" 134 5036 5058 "L4.ml" 134 5036 5059
)
"L4.ml" 142 5395 5459 "L4.ml" 142 5395 5469
call(
  stack
)
type(
  Ostap.Msg.Locator.t
)
"L4.ml" 142 5395 5416 "L4.ml" 142 5395 5469
call(
  stack
)
type(
  Ostap.Msg.t
)
"L4.ml" 142 5395 5415 "L4.ml" 142 5395 5470
type(
  Ostap.Msg.t list
)
type(
  Ostap.Msg.t list
)
"L4.ml" 142 5395 5410 "L4.ml" 142 5395 5470
type(
  ('k1, Ostap.Msg.t) Checked.t
)
"L4.ml" 134 5036 5067 "L4.ml" 142 5395 5470
type(
  'j1 -> ('k1, Ostap.Msg.t) Checked.t
)
"L4.ml" 134 5036 5060 "L4.ml" 142 5395 5470
type(
  string -> 'j1 -> ('k1, Ostap.Msg.t) Checked.t
)
"L4.ml" 134 5036 5058 "L4.ml" 142 5395 5470
type(
  'i1 -> string -> 'j1 -> ('k1, Ostap.Msg.t) Checked.t
)
"L4.ml" 144 5472 5484 "L4.ml" 144 5472 5493
type(
  < equal : [> `Bool | `Int ] ->
            ([> `Array of [> `Const of [> `Literal of int ] ] * 'n1
              | `Bool
              | `Int
              | `Record of (string * 'n1) list
              | `User of 'o1 * 'p1 * 'n1 ]
             as 'n1) ->
            bool;
    .. > ->
  (([> `Binop of
         ([> `And | `Eq | `Ge | `Gt | `Le | `Lt | `Ne | `Or ] as 'r1) * 'q1 *
         'q1
     | `Const of [< `False | `Literal of int | `True > `Literal ] as 's1
     | `Field of 'q1 * string
     | `Ident of
         't1 *
         [> `Const of [> `Literal of 'v1 ] as 'u1
          | `Param of 'w1 * 'n1
          | `VParam of 'x1 * 'n1
          | `Var of 'y1 * 'n1 ]
     | `Index of 'q1 * 'q1
     | `Unop of [< `Neg | `Not ] * 'q1 ]
    as 'q1) ->
   (([> `Binop of 'r1 * 'z1 * 'z1
      | `Const of 's1
      | `Field of ('a2 * 'n1) * string
      | `Ident of
          't1 *
          [> `Const of 'u1
           | `Param of 'w1 * 'n1
           | `VParam of 'x1 * 'n1
           | `Var of 'y1 * 'n1 ]
      | `Index of ('a2 * 'n1) * ('a2 * 'n1)
      | `Unop of [> `Neg | `Not ] * ('a2 * 'n1) ]
     as 'a2) *
    'n1 as 'z1)
   Monad.Checked.t) ->
  'q1 -> 'z1 Monad.Checked.t
)
ident(
  def reference "L4.ml" 144 5472 5476 "L4.ml" 193 7368 7373
)
"L4.ml" 144 5472 5494 "L4.ml" 144 5472 5496
type(
  < equal : [> `Bool | `Int ] -> 'n1 -> bool; .. > as 'b2
)
ident(
  def ts "L4.ml" 144 5472 5497 "L4.ml" 164 6331 6369
)
"L4.ml" 144 5472 5497 "L4.ml" 144 5472 5500
type(
  'q1 -> 'z1 Monad.Checked.t
)
ident(
  def ext "L4.ml" 144 5472 5501 "L4.ml" 164 6331 6369
)
"L4.ml" 144 5472 5501 "L4.ml" 144 5472 5504
type(
  'q1
)
ident(
  def ref "L4.ml" 145 5508 5514 "L4.ml" 164 6331 6369
)
"L4.ml" 145 5508 5518 "L4.ml" 145 5508 5527
type(
  'q1 -> 'z1 Monad.Checked.t
)
ident(
  def reference "L4.ml" 146 5550 5556 "L4.ml" 164 6331 6369
)
"L4.ml" 145 5508 5530 "L4.ml" 145 5508 5539
type(
  'b2 -> ('q1 -> 'z1 Monad.Checked.t) -> 'q1 -> 'z1 Monad.Checked.t
)
ident(
  int_ref reference "L4.ml" 144 5472 5484 "L4.ml" 144 5472 5493
)
"L4.ml" 145 5508 5540 "L4.ml" 145 5508 5542
type(
  'b2
)
ident(
  int_ref ts "L4.ml" 144 5472 5494 "L4.ml" 144 5472 5496
)
"L4.ml" 145 5508 5543 "L4.ml" 145 5508 5546
type(
  'q1 -> 'z1 Monad.Checked.t
)
ident(
  int_ref ext "L4.ml" 144 5472 5497 "L4.ml" 144 5472 5500
)
"L4.ml" 145 5508 5530 "L4.ml" 145 5508 5546
call(
  stack
)
type(
  'q1 -> 'z1 Monad.Checked.t
)
"L4.ml" 146 5550 5560 "L4.ml" 146 5550 5565
type(
  'a2 -> 'a2
)
ident(
  def reloc "L4.ml" 147 5590 5596 "L4.ml" 164 6331 6369
)
"L4.ml" 146 5550 5568 "L4.ml" 146 5550 5573
type(
  Ostap.Msg.Locator.t -> 'a2 -> 'a2
)
ident(
  ext_ref Common.reloc
)
"L4.ml" 146 5550 5575 "L4.ml" 146 5550 5581
type(
  'q1 -> Ostap.Msg.Locator.t
)
ident(
  ext_ref Common.locate
)
"L4.ml" 146 5550 5582 "L4.ml" 146 5550 5585
type(
  'q1
)
ident(
  int_ref ref "L4.ml" 144 5472 5501 "L4.ml" 144 5472 5504
)
"L4.ml" 146 5550 5574 "L4.ml" 146 5550 5586
call(
  stack
)
type(
  Ostap.Msg.Locator.t
)
"L4.ml" 146 5550 5568 "L4.ml" 146 5550 5586
call(
  stack
)
type(
  'a2 -> 'a2
)
"L4.ml" 147 5590 5602 "L4.ml" 147 5590 5605
type(
  'q1
)
ident(
  int_ref ref "L4.ml" 144 5472 5501 "L4.ml" 144 5472 5504
)
"L4.ml" 148 5611 5627 "L4.ml" 148 5611 5628
type(
  'q1
)
ident(
  def r "L4.ml" 149 5637 5646 "L4.ml" 160 6178 6188
)
"L4.ml" 148 5611 5630 "L4.ml" 148 5611 5631
type(
  'q1
)
ident(
  def i "L4.ml" 149 5637 5646 "L4.ml" 160 6178 6188
)
"L4.ml" 148 5611 5627 "L4.ml" 148 5611 5631
type(
  'q1 * 'q1
)
"L4.ml" 148 5611 5619 "L4.ml" 148 5611 5632
type(
  'q1
)
"L4.ml" 149 5637 5646 "L4.ml" 149 5637 5651
type(
  'z1 Monad.Checked.t * 'z1 Monad.Checked.t ->
  ('z1 * 'z1, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.tuple
)
"L4.ml" 149 5637 5653 "L4.ml" 149 5637 5662
type(
  'q1 -> 'z1 Monad.Checked.t
)
ident(
  int_ref reference "L4.ml" 145 5508 5518 "L4.ml" 145 5508 5527
)
"L4.ml" 149 5637 5663 "L4.ml" 149 5637 5664
type(
  'q1
)
ident(
  int_ref r "L4.ml" 148 5611 5627 "L4.ml" 148 5611 5628
)
"L4.ml" 149 5637 5653 "L4.ml" 149 5637 5664
call(
  stack
)
type(
  'z1 Monad.Checked.t
)
"L4.ml" 149 5637 5666 "L4.ml" 149 5637 5676
type(
  'b2 -> 'q1 -> 'z1 Monad.Checked.t
)
ident(
  int_ref expression "L4.ml" 165 6370 6378 "L4.ml" 165 6370 6388
)
"L4.ml" 149 5637 5677 "L4.ml" 149 5637 5679
type(
  'b2
)
ident(
  int_ref ts "L4.ml" 144 5472 5494 "L4.ml" 144 5472 5496
)
"L4.ml" 149 5637 5680 "L4.ml" 149 5637 5681
type(
  'q1
)
ident(
  int_ref i "L4.ml" 148 5611 5630 "L4.ml" 148 5611 5631
)
"L4.ml" 149 5637 5666 "L4.ml" 149 5637 5681
call(
  stack
)
type(
  'z1 Monad.Checked.t
)
"L4.ml" 149 5637 5652 "L4.ml" 149 5637 5682
type(
  'z1 Monad.Checked.t * 'z1 Monad.Checked.t
)
"L4.ml" 149 5637 5646 "L4.ml" 149 5637 5682
call(
  stack
)
type(
  ('z1 * 'z1, Ostap.Msg.t) Checked.t
)
"L4.ml" 150 5689 5705 "L4.ml" 150 5689 5706
type(
  'a2
)
ident(
  def z "L4.ml" 151 5731 5743 "L4.ml" 159 6164 6177
)
"L4.ml" 150 5689 5708 "L4.ml" 150 5689 5710
type(
  'n1
)
ident(
  def tr "L4.ml" 151 5731 5743 "L4.ml" 159 6164 6177
)
"L4.ml" 150 5689 5705 "L4.ml" 150 5689 5710
type(
  'z1
)
"L4.ml" 150 5689 5704 "L4.ml" 150 5689 5716
type(
  'z1
)
ident(
  def r "L4.ml" 151 5731 5743 "L4.ml" 159 6164 6177
)
"L4.ml" 150 5689 5719 "L4.ml" 150 5689 5720
type(
  'a2
)
ident(
  def i "L4.ml" 151 5731 5743 "L4.ml" 159 6164 6177
)
"L4.ml" 150 5689 5722 "L4.ml" 150 5689 5724
type(
  'n1
)
ident(
  def ti "L4.ml" 151 5731 5743 "L4.ml" 159 6164 6177
)
"L4.ml" 150 5689 5719 "L4.ml" 150 5689 5724
type(
  'z1
)
"L4.ml" 150 5689 5704 "L4.ml" 150 5689 5725
type(
  'z1 * 'z1
)
"L4.ml" 151 5731 5743 "L4.ml" 151 5731 5748
type(
  ('a2 * 'n1, Ostap.Msg.t) Checked.t * ('n1, Ostap.Msg.t) Checked.t ->
  (('a2 * 'n1) * 'n1, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.tuple
)
"L4.ml" 151 5731 5750 "L4.ml" 151 5731 5760
type(
  'b2 -> 'a2 -> 'n1 -> 'n1 -> ('a2 * 'n1, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Common.int
)
"L4.ml" 151 5731 5761 "L4.ml" 151 5731 5763
type(
  'b2
)
ident(
  int_ref ts "L4.ml" 144 5472 5494 "L4.ml" 144 5472 5496
)
"L4.ml" 151 5731 5764 "L4.ml" 151 5731 5765
type(
  'a2
)
ident(
  int_ref i "L4.ml" 150 5689 5719 "L4.ml" 150 5689 5720
)
"L4.ml" 151 5731 5766 "L4.ml" 151 5731 5768
type(
  'n1
)
ident(
  int_ref ti "L4.ml" 150 5689 5722 "L4.ml" 150 5689 5724
)
"L4.ml" 151 5731 5769 "L4.ml" 151 5731 5771
type(
  'n1
)
ident(
  int_ref ti "L4.ml" 150 5689 5722 "L4.ml" 150 5689 5724
)
"L4.ml" 151 5731 5750 "L4.ml" 151 5731 5771
call(
  stack
)
type(
  ('a2 * 'n1, Ostap.Msg.t) Checked.t
)
"L4.ml" 151 5731 5773 "L4.ml" 151 5731 5789
type(
  'a2 -> 'n1 -> ('n1, Ostap.Msg.t) Checked.t
)
ident(
  int_ref arrayElementType "L4.ml" 124 4687 4699 "L4.ml" 124 4687 4715
)
"L4.ml" 151 5731 5790 "L4.ml" 151 5731 5791
type(
  'a2
)
ident(
  int_ref z "L4.ml" 150 5689 5705 "L4.ml" 150 5689 5706
)
"L4.ml" 151 5731 5792 "L4.ml" 151 5731 5794
type(
  'n1
)
ident(
  int_ref tr "L4.ml" 150 5689 5708 "L4.ml" 150 5689 5710
)
"L4.ml" 151 5731 5773 "L4.ml" 151 5731 5794
call(
  stack
)
type(
  ('n1, Ostap.Msg.t) Checked.t
)
"L4.ml" 151 5731 5749 "L4.ml" 151 5731 5795
type(
  ('a2 * 'n1, Ostap.Msg.t) Checked.t * ('n1, Ostap.Msg.t) Checked.t
)
"L4.ml" 151 5731 5743 "L4.ml" 151 5731 5795
call(
  stack
)
type(
  (('a2 * 'n1) * 'n1, Ostap.Msg.t) Checked.t
)
"L4.ml" 152 5802 5820 "L4.ml" 152 5802 5821
type(
  'a2 * 'n1
)
ident(
  def i "L4.ml" 153 5830 5845 "L4.ml" 158 6112 6163
)
"L4.ml" 152 5802 5823 "L4.ml" 152 5802 5824
type(
  'n1
)
ident(
  def t "L4.ml" 153 5830 5845 "L4.ml" 158 6112 6163
)
"L4.ml" 152 5802 5820 "L4.ml" 152 5802 5824
type(
  ('a2 * 'n1) * 'n1
)
"L4.ml" 153 5830 5851 "L4.ml" 153 5830 5852
type(
  'a2 * 'n1
)
ident(
  int_ref i "L4.ml" 152 5802 5820 "L4.ml" 152 5802 5821
)
"L4.ml" 154 5858 5892 "L4.ml" 154 5858 5893
type(
  int
)
ident(
  def v "L4.ml" 155 5902 5920 "L4.ml" 157 6059 6111
)
"L4.ml" 154 5858 5883 "L4.ml" 154 5858 5893
type(
  's1
)
"L4.ml" 154 5858 5875 "L4.ml" 154 5858 5894
type(
  'a2
)
"L4.ml" 154 5858 5896 "L4.ml" 154 5858 5897
type(
  'n1
)
"L4.ml" 154 5858 5875 "L4.ml" 154 5858 5897
type(
  'a2 * 'n1
)
"L4.ml" 155 5902 5923 "L4.ml" 155 5902 5924
type(
  int
)
ident(
  int_ref v "L4.ml" 154 5858 5892 "L4.ml" 154 5858 5893
)
"L4.ml" 155 5902 5927 "L4.ml" 155 5902 5928
type(
  int
)
"L4.ml" 155 5902 5923 "L4.ml" 155 5902 5928
type(
  bool
)
type(
  int -> int -> bool
)
ident(
  ext_ref Pervasives.( < )
)
"L4.ml" 155 5902 5932 "L4.ml" 155 5902 5933
type(
  int
)
ident(
  int_ref v "L4.ml" 154 5858 5892 "L4.ml" 154 5858 5893
)
"L4.ml" 155 5902 5937 "L4.ml" 155 5902 5948
type(
  'n1 -> int
)
ident(
  int_ref arrayLength "L4.ml" 129 4875 4887 "L4.ml" 129 4875 4898
)
"L4.ml" 155 5902 5949 "L4.ml" 155 5902 5951
type(
  'n1
)
ident(
  int_ref tr "L4.ml" 150 5689 5708 "L4.ml" 150 5689 5710
)
"L4.ml" 155 5902 5937 "L4.ml" 155 5902 5951
call(
  stack
)
type(
  int
)
"L4.ml" 155 5902 5932 "L4.ml" 155 5902 5951
type(
  bool
)
type(
  int -> int -> bool
)
ident(
  ext_ref Pervasives.( >= )
)
"L4.ml" 155 5902 5923 "L4.ml" 155 5902 5951
type(
  bool
)
type(
  bool -> bool -> bool
)
ident(
  ext_ref Pervasives.( || )
)
"L4.ml" 156 5953 5982 "L4.ml" 156 5953 5996
type(
  string -> string array -> Ostap.Msg.Locator.t -> Ostap.Msg.t
)
ident(
  ext_ref Ostap.Msg.make
)
"L4.ml" 156 5953 5997 "L4.ml" 156 5953 6024
type(
  string
)
"L4.ml" 156 5953 6027 "L4.ml" 156 5953 6040
type(
  int -> string
)
ident(
  ext_ref Pervasives.string_of_int
)
"L4.ml" 156 5953 6041 "L4.ml" 156 5953 6042
type(
  int
)
ident(
  int_ref v "L4.ml" 154 5858 5892 "L4.ml" 154 5858 5893
)
"L4.ml" 156 5953 6027 "L4.ml" 156 5953 6042
call(
  stack
)
type(
  string
)
"L4.ml" 156 5953 6025 "L4.ml" 156 5953 6044
type(
  string array
)
"L4.ml" 156 5953 6046 "L4.ml" 156 5953 6052
type(
  'q1 -> Ostap.Msg.Locator.t
)
ident(
  ext_ref Common.locate
)
"L4.ml" 156 5953 6053 "L4.ml" 156 5953 6056
type(
  'q1
)
ident(
  int_ref ref "L4.ml" 144 5472 5501 "L4.ml" 144 5472 5504
)
"L4.ml" 156 5953 6045 "L4.ml" 156 5953 6057
call(
  stack
)
type(
  Ostap.Msg.Locator.t
)
"L4.ml" 156 5953 5982 "L4.ml" 156 5953 6057
call(
  stack
)
type(
  Ostap.Msg.t
)
"L4.ml" 156 5953 5981 "L4.ml" 156 5953 6058
type(
  Ostap.Msg.t list
)
type(
  Ostap.Msg.t list
)
"L4.ml" 156 5953 5976 "L4.ml" 156 5953 6058
type(
  ('z1, Ostap.Msg.t) Checked.t
)
"L4.ml" 157 6059 6086 "L4.ml" 157 6059 6091
type(
  'a2 -> 'a2
)
ident(
  int_ref reloc "L4.ml" 146 5550 5560 "L4.ml" 146 5550 5565
)
"L4.ml" 157 6059 6101 "L4.ml" 157 6059 6102
type(
  'a2 * 'n1
)
ident(
  int_ref r "L4.ml" 150 5689 5704 "L4.ml" 150 5689 5716
)
"L4.ml" 157 6059 6104 "L4.ml" 157 6059 6105
type(
  'a2 * 'n1
)
ident(
  int_ref i "L4.ml" 152 5802 5820 "L4.ml" 152 5802 5821
)
"L4.ml" 157 6059 6100 "L4.ml" 157 6059 6106
type(
  ('a2 * 'n1) * ('a2 * 'n1)
)
"L4.ml" 157 6059 6092 "L4.ml" 157 6059 6107
type(
  'a2
)
"L4.ml" 157 6059 6086 "L4.ml" 157 6059 6107
call(
  stack
)
type(
  'a2
)
"L4.ml" 157 6059 6109 "L4.ml" 157 6059 6110
type(
  'n1
)
ident(
  int_ref t "L4.ml" 152 5802 5823 "L4.ml" 152 5802 5824
)
"L4.ml" 157 6059 6085 "L4.ml" 157 6059 6111
type(
  'z1
)
"L4.ml" 157 6059 6082 "L4.ml" 157 6059 6111
call(
  tail
)
type(
  ('z1, Ostap.Msg.t) Checked.t
)
type(
  'z1 -> ('z1, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.( !! )
)
"L4.ml" 155 5902 5920 "L4.ml" 157 6059 6111
type(
  ('z1, Ostap.Msg.t) Checked.t
)
"L4.ml" 158 6112 6129 "L4.ml" 158 6112 6130
type(
  'a2 * 'n1
)
"L4.ml" 158 6112 6138 "L4.ml" 158 6112 6143
type(
  'a2 -> 'a2
)
ident(
  int_ref reloc "L4.ml" 146 5550 5560 "L4.ml" 146 5550 5565
)
"L4.ml" 158 6112 6153 "L4.ml" 158 6112 6154
type(
  'a2 * 'n1
)
ident(
  int_ref r "L4.ml" 150 5689 5704 "L4.ml" 150 5689 5716
)
"L4.ml" 158 6112 6156 "L4.ml" 158 6112 6157
type(
  'a2 * 'n1
)
ident(
  int_ref i "L4.ml" 152 5802 5820 "L4.ml" 152 5802 5821
)
"L4.ml" 158 6112 6152 "L4.ml" 158 6112 6158
type(
  ('a2 * 'n1) * ('a2 * 'n1)
)
"L4.ml" 158 6112 6144 "L4.ml" 158 6112 6159
type(
  'a2
)
"L4.ml" 158 6112 6138 "L4.ml" 158 6112 6159
call(
  stack
)
type(
  'a2
)
"L4.ml" 158 6112 6161 "L4.ml" 158 6112 6162
type(
  'n1
)
ident(
  int_ref t "L4.ml" 152 5802 5823 "L4.ml" 152 5802 5824
)
"L4.ml" 158 6112 6137 "L4.ml" 158 6112 6163
type(
  'z1
)
"L4.ml" 158 6112 6134 "L4.ml" 158 6112 6163
call(
  tail
)
type(
  ('z1, Ostap.Msg.t) Checked.t
)
type(
  'z1 -> ('z1, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.( !! )
)
"L4.ml" 153 5830 5845 "L4.ml" 158 6112 6163
type(
  ('z1, Ostap.Msg.t) Checked.t
)
"L4.ml" 152 5802 5814 "L4.ml" 159 6164 6177
type(
  ('a2 * 'n1) * 'n1 -> ('z1, Ostap.Msg.t) Checked.t
)
"L4.ml" 151 5731 5743 "L4.ml" 159 6164 6177
call(
  tail
)
type(
  ('z1, Ostap.Msg.t) Checked.t
)
type(
  (('a2 * 'n1) * 'n1, Ostap.Msg.t) Checked.t ->
  (('a2 * 'n1) * 'n1 -> ('z1, Ostap.Msg.t) Checked.t) ->
  ('z1, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.( -?->> )
)
"L4.ml" 150 5689 5698 "L4.ml" 160 6178 6188
type(
  'z1 * 'z1 -> ('z1, Ostap.Msg.t) Checked.t
)
"L4.ml" 149 5637 5646 "L4.ml" 160 6178 6188
call(
  tail
)
type(
  'z1 Monad.Checked.t
)
type(
  ('z1 * 'z1, Ostap.Msg.t) Checked.t ->
  ('z1 * 'z1 -> ('z1, Ostap.Msg.t) Checked.t) -> 'z1 Monad.Checked.t
)
ident(
  ext_ref Checked.( -?->> )
)
"L4.ml" 161 6189 6205 "L4.ml" 161 6189 6206
type(
  'q1
)
ident(
  def r "L4.ml" 162 6214 6223 "L4.ml" 163 6242 6330
)
"L4.ml" 161 6189 6208 "L4.ml" 161 6189 6209
type(
  string
)
ident(
  def f "L4.ml" 162 6214 6223 "L4.ml" 163 6242 6330
)
"L4.ml" 161 6189 6205 "L4.ml" 161 6189 6209
type(
  'q1 * string
)
"L4.ml" 161 6189 6197 "L4.ml" 161 6189 6210
type(
  'q1
)
"L4.ml" 162 6214 6223 "L4.ml" 162 6214 6232
type(
  'q1 -> 'z1 Monad.Checked.t
)
ident(
  int_ref reference "L4.ml" 145 5508 5518 "L4.ml" 145 5508 5527
)
"L4.ml" 162 6214 6233 "L4.ml" 162 6214 6234
type(
  'q1
)
ident(
  int_ref r "L4.ml" 161 6189 6205 "L4.ml" 161 6189 6206
)
"L4.ml" 162 6214 6223 "L4.ml" 162 6214 6234
call(
  stack
)
type(
  'z1 Monad.Checked.t
)
"L4.ml" 163 6242 6258 "L4.ml" 163 6242 6259
type(
  'a2
)
ident(
  def z "L4.ml" 163 6242 6273 "L4.ml" 163 6242 6329
)
"L4.ml" 163 6242 6261 "L4.ml" 163 6242 6262
type(
  'n1
)
ident(
  def t "L4.ml" 163 6242 6273 "L4.ml" 163 6242 6329
)
"L4.ml" 163 6242 6258 "L4.ml" 163 6242 6262
type(
  'z1
)
"L4.ml" 163 6242 6257 "L4.ml" 163 6242 6268
type(
  'z1
)
ident(
  def r "L4.ml" 163 6242 6273 "L4.ml" 163 6242 6329
)
"L4.ml" 163 6242 6273 "L4.ml" 163 6242 6282
type(
  'a2 -> string -> 'n1 -> ('n1, Ostap.Msg.t) Checked.t
)
ident(
  int_ref fieldType "L4.ml" 134 5036 5048 "L4.ml" 134 5036 5057
)
"L4.ml" 163 6242 6283 "L4.ml" 163 6242 6284
type(
  'a2
)
ident(
  int_ref z "L4.ml" 163 6242 6258 "L4.ml" 163 6242 6259
)
"L4.ml" 163 6242 6285 "L4.ml" 163 6242 6286
type(
  string
)
ident(
  int_ref f "L4.ml" 161 6189 6208 "L4.ml" 161 6189 6209
)
"L4.ml" 163 6242 6287 "L4.ml" 163 6242 6288
type(
  'n1
)
ident(
  int_ref t "L4.ml" 163 6242 6261 "L4.ml" 163 6242 6262
)
"L4.ml" 163 6242 6273 "L4.ml" 163 6242 6288
call(
  stack
)
type(
  ('n1, Ostap.Msg.t) Checked.t
)
"L4.ml" 163 6242 6299 "L4.ml" 163 6242 6300
type(
  'n1
)
ident(
  def t "L4.ml" 163 6242 6304 "L4.ml" 163 6242 6328
)
"L4.ml" 163 6242 6304 "L4.ml" 163 6242 6309
type(
  'a2 -> 'a2
)
ident(
  int_ref reloc "L4.ml" 146 5550 5560 "L4.ml" 146 5550 5565
)
"L4.ml" 163 6242 6319 "L4.ml" 163 6242 6320
type(
  'a2 * 'n1
)
ident(
  int_ref r "L4.ml" 163 6242 6257 "L4.ml" 163 6242 6268
)
"L4.ml" 163 6242 6322 "L4.ml" 163 6242 6323
type(
  string
)
ident(
  int_ref f "L4.ml" 161 6189 6208 "L4.ml" 161 6189 6209
)
"L4.ml" 163 6242 6318 "L4.ml" 163 6242 6324
type(
  ('a2 * 'n1) * string
)
"L4.ml" 163 6242 6310 "L4.ml" 163 6242 6325
type(
  'a2
)
"L4.ml" 163 6242 6304 "L4.ml" 163 6242 6325
call(
  stack
)
type(
  'a2
)
"L4.ml" 163 6242 6327 "L4.ml" 163 6242 6328
type(
  'n1
)
ident(
  int_ref t "L4.ml" 163 6242 6299 "L4.ml" 163 6242 6300
)
"L4.ml" 163 6242 6304 "L4.ml" 163 6242 6328
type(
  'a2 * 'n1
)
"L4.ml" 163 6242 6294 "L4.ml" 163 6242 6329
type(
  'n1 -> 'z1
)
"L4.ml" 163 6242 6273 "L4.ml" 163 6242 6329
call(
  tail
)
type(
  ('z1, Ostap.Msg.t) Checked.t
)
type(
  ('n1, Ostap.Msg.t) Checked.t ->
  ('n1 -> 'z1) -> ('z1, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.( -?-> )
)
"L4.ml" 163 6242 6251 "L4.ml" 163 6242 6330
type(
  'z1 -> ('z1, Ostap.Msg.t) Checked.t
)
"L4.ml" 162 6214 6223 "L4.ml" 163 6242 6330
call(
  tail
)
type(
  'z1 Monad.Checked.t
)
type(
  'z1 Monad.Checked.t ->
  ('z1 -> ('z1, Ostap.Msg.t) Checked.t) -> 'z1 Monad.Checked.t
)
ident(
  ext_ref Checked.( -?->> )
)
"L4.ml" 164 6331 6339 "L4.ml" 164 6331 6340
type(
  'q1
)
ident(
  def x "L4.ml" 164 6331 6344 "L4.ml" 164 6331 6369
)
"L4.ml" 164 6331 6344 "L4.ml" 164 6331 6363
type(
  ('q1 -> 'z1 Monad.Checked.t) -> 'q1 -> 'z1 Monad.Checked.t
)
ident(
  ext_ref L3.Typecheck.reference
)
"L4.ml" 164 6331 6364 "L4.ml" 164 6331 6367
type(
  'q1 -> 'z1 Monad.Checked.t
)
ident(
  int_ref ext "L4.ml" 144 5472 5497 "L4.ml" 144 5472 5500
)
"L4.ml" 164 6331 6368 "L4.ml" 164 6331 6369
type(
  'q1
)
ident(
  int_ref x "L4.ml" 164 6331 6339 "L4.ml" 164 6331 6340
)
"L4.ml" 164 6331 6344 "L4.ml" 164 6331 6369
call(
  tail
)
type(
  'z1 Monad.Checked.t
)
"L4.ml" 147 5590 5596 "L4.ml" 164 6331 6369
type(
  'z1 Monad.Checked.t
)
"L4.ml" 146 5550 5556 "L4.ml" 164 6331 6369
type(
  'z1 Monad.Checked.t
)
"L4.ml" 145 5508 5514 "L4.ml" 164 6331 6369
type(
  'z1 Monad.Checked.t
)
"L4.ml" 144 5472 5501 "L4.ml" 164 6331 6369
type(
  'q1 -> 'z1 Monad.Checked.t
)
"L4.ml" 144 5472 5497 "L4.ml" 164 6331 6369
type(
  ('q1 -> 'z1 Monad.Checked.t) -> 'q1 -> 'z1 Monad.Checked.t
)
"L4.ml" 144 5472 5494 "L4.ml" 164 6331 6369
type(
  'b2 -> ('q1 -> 'z1 Monad.Checked.t) -> 'q1 -> 'z1 Monad.Checked.t
)
"L4.ml" 165 6370 6378 "L4.ml" 165 6370 6388
type(
  'b2 -> 'q1 -> 'z1 Monad.Checked.t
)
ident(
  def expression "L4.ml" 144 5472 5476 "L4.ml" 193 7368 7373
)
"L4.ml" 165 6370 6389 "L4.ml" 165 6370 6391
type(
  'b2
)
ident(
  def ts "L4.ml" 165 6370 6392 "L4.ml" 165 6370 6448
)
"L4.ml" 165 6370 6392 "L4.ml" 165 6370 6396
type(
  'q1
)
ident(
  def expr "L4.ml" 165 6370 6399 "L4.ml" 165 6370 6448
)
"L4.ml" 165 6370 6399 "L4.ml" 165 6370 6425
type(
  'b2 ->
  (('q1 -> 'z1 Monad.Checked.t) -> 'q1 -> 'z1 Monad.Checked.t) ->
  'q1 -> 'z1 Monad.Checked.t
)
ident(
  ext_ref SimpleExpression.typecheck
)
"L4.ml" 165 6370 6426 "L4.ml" 165 6370 6428
type(
  'b2
)
ident(
  int_ref ts "L4.ml" 165 6370 6389 "L4.ml" 165 6370 6391
)
"L4.ml" 165 6370 6430 "L4.ml" 165 6370 6439
type(
  'b2 -> ('q1 -> 'z1 Monad.Checked.t) -> 'q1 -> 'z1 Monad.Checked.t
)
ident(
  int_ref reference "L4.ml" 144 5472 5484 "L4.ml" 144 5472 5493
)
"L4.ml" 165 6370 6440 "L4.ml" 165 6370 6442
type(
  'b2
)
ident(
  int_ref ts "L4.ml" 165 6370 6389 "L4.ml" 165 6370 6391
)
"L4.ml" 165 6370 6429 "L4.ml" 165 6370 6443
call(
  stack
)
type(
  ('q1 -> 'z1 Monad.Checked.t) -> 'q1 -> 'z1 Monad.Checked.t
)
"L4.ml" 165 6370 6444 "L4.ml" 165 6370 6448
type(
  'q1
)
ident(
  int_ref expr "L4.ml" 165 6370 6392 "L4.ml" 165 6370 6396
)
"L4.ml" 165 6370 6399 "L4.ml" 165 6370 6448
call(
  tail
)
type(
  'z1 Monad.Checked.t
)
"L4.ml" 165 6370 6392 "L4.ml" 165 6370 6448
type(
  'q1 -> 'z1 Monad.Checked.t
)
"L4.ml" 165 6370 6389 "L4.ml" 165 6370 6448
type(
  'b2 -> 'q1 -> 'z1 Monad.Checked.t
)
"L4.ml" 167 6450 6458 "L4.ml" 167 6450 6467
type(
  < equal : ([> `Array of [> `Const of [> `Literal of int ] ] * 'c2
              | `Bool
              | `Int
              | `Record of (string * 'c2) list
              | `User of 'd2 * 'e2 * 'c2 ]
             as 'c2) ->
            'c2 -> bool;
    primitive : 'c2 -> bool; string : 'c2 -> string; .. > ->
  ([> `Assign of
        ([> `Binop of
              ([> `And | `Eq | `Ge | `Gt | `Le | `Lt | `Ne | `Or ] as 'h2) *
              'g2 * 'g2
          | `Const of [< `False | `Literal of int | `True > `Literal ] as 'i2
          | `Field of 'g2 * string
          | `Ident of
              'j2 *
              [> `Const of [> `Literal of 'l2 ] as 'k2
               | `Param of 'm2 * 'c2
               | `VParam of 'n2 * 'c2
               | `Var of 'o2 * 'c2 ]
          | `Index of 'g2 * 'g2
          | `Unop of [< `Neg | `Not ] * 'g2 ]
         as 'g2) *
        'g2
    | `Call of 'p2 * 'g2 list * [> `Proc of 'q2 * ('r2 * 's2 * 'c2) list ]
    | `Case of
        'g2 *
        ([< `Atom of 'g2 | `Interval of 'g2 * 'g2 ] list * 'f2 list) list *
        'f2 list
    | `For of 'g2 * 'g2 * 'g2 * 'g2 option * 'f2 list
    | `If of ('g2 * 'f2 list) list * 'f2 list
    | `While of 'g2 * 'f2 list ]
   as 'f2) ->
  ([> `Assign of
        (([> `Binop of 'h2 * ('u2 * 'c2) * ('u2 * 'c2)
           | `Const of 'i2
           | `Field of ('u2 * 'c2) * string
           | `Ident of
               'j2 *
               [> `Const of 'k2
                | `Param of 'm2 * 'c2
                | `VParam of 'n2 * 'c2
                | `Var of 'o2 * 'c2 ]
           | `Index of ('u2 * 'c2) * ('u2 * 'c2)
           | `Unop of [> `Neg | `Not ] * ('u2 * 'c2) ]
          as 'u2) *
         'c2) *
        ('u2 * 'c2)
    | `Call of
        'p2 * ('u2 * 'c2) list *
        ('p2 * 'g2 list * [> `Proc of 'q2 * ('r2 * 's2 * 'c2) list ])
    | `Case of
        ('u2 * 'c2) *
        ([ `Atom of 'u2 * 'c2 | `Interval of ('u2 * 'c2) * ('u2 * 'c2) ] list *
         't2 list)
        list * 't2 list
    | `For of
        ('u2 * 'c2) * ('u2 * 'c2) * ('u2 * 'c2) * ('u2 * 'c2) option *
        't2 list
    | `If of (('u2 * 'c2) * 't2 list) list * 't2 list
    | `While of ('u2 * 'c2) * 't2 list ]
   as 't2)
  Monad.Checked.t
)
ident(
  def statement "L4.ml" 169 6524 6528 "L4.ml" 193 7368 7373
)
"L4.ml" 167 6450 6468 "L4.ml" 167 6450 6470
type(
  < equal : 'c2 -> 'c2 -> bool; primitive : 'c2 -> bool;
    string : 'c2 -> string; .. >
  as 'v2
)
ident(
  def ts "L4.ml" 167 6450 6471 "L4.ml" 167 6450 6522
)
"L4.ml" 167 6450 6471 "L4.ml" 167 6450 6475
type(
  'f2
)
ident(
  def stmt "L4.ml" 167 6450 6478 "L4.ml" 167 6450 6522
)
"L4.ml" 167 6450 6478 "L4.ml" 167 6450 6497
type(
  'v2 ->
  ('v2 -> 'g2 -> ('u2 * 'c2) Monad.Checked.t) ->
  (('f2 -> 't2 Monad.Checked.t) -> 'f2 -> 't2 Monad.Checked.t) ->
  'f2 -> 't2 Monad.Checked.t
)
ident(
  ext_ref L3.Typecheck.statement
)
"L4.ml" 167 6450 6498 "L4.ml" 167 6450 6500
type(
  'v2
)
ident(
  int_ref ts "L4.ml" 167 6450 6468 "L4.ml" 167 6450 6470
)
"L4.ml" 167 6450 6501 "L4.ml" 167 6450 6511
type(
  'v2 -> 'g2 -> ('u2 * 'c2) Monad.Checked.t
)
ident(
  int_ref expression "L4.ml" 165 6370 6378 "L4.ml" 165 6370 6388
)
"L4.ml" 167 6450 6512 "L4.ml" 167 6450 6517
type(
  ('f2 -> 't2 Monad.Checked.t) -> 'f2 -> 't2 Monad.Checked.t
)
ident(
  ext_ref Common.apply
)
"L4.ml" 167 6450 6518 "L4.ml" 167 6450 6522
type(
  'f2
)
ident(
  int_ref stmt "L4.ml" 167 6450 6471 "L4.ml" 167 6450 6475
)
"L4.ml" 167 6450 6478 "L4.ml" 167 6450 6522
call(
  tail
)
type(
  't2 Monad.Checked.t
)
"L4.ml" 167 6450 6471 "L4.ml" 167 6450 6522
type(
  'f2 -> 't2 Monad.Checked.t
)
"L4.ml" 167 6450 6468 "L4.ml" 167 6450 6522
type(
  'v2 -> 'f2 -> 't2 Monad.Checked.t
)
"L4.ml" 169 6524 6532 "L4.ml" 169 6524 6544
type(
  < equal : ([> `Array of [> `Const of [> `Literal of int ] ] * 'w2
              | `Bool
              | `Int
              | `Record of (string * 'w2) list
              | `User of 'x2 * 'y2 * 'w2 ]
             as 'w2) ->
            'w2 -> bool;
    primitive : 'w2 -> bool; string : 'w2 -> string; .. > ->
  (('z2 *
    ([> `Binop of
          [> `And | `Eq | `Ge | `Gt | `Le | `Lt | `Ne | `Or ] * 'a3 * 'a3
      | `Const of [< `False | `Literal of 'b3 | `True ]
      | `Ident of
          'c3 * [> `Const of [> `Literal of 'd3 ] | `Var of 'e3 * 'w2 ]
      | `Unop of [< `Neg | `Not ] * 'a3 ]
     as 'a3))
   list *
   ('f3 *
    ([> `Array of
          ([> `Binop of
                [> `And | `Eq | `Ge | `Gt | `Le | `Lt | `Ne | `Or ] * 'h3 *
                'h3
            | `Const of [< `False | `Literal of int | `True > `Literal ]
            | `Field of 'h3 * string
            | `Ident of
                'i3 *
                [> `Const of [> `Literal of 'j3 ]
                 | `Param of 'k3 * 'w2
                 | `VParam of 'l3 * 'w2
                 | `Var of 'm3 * 'w2 ]
            | `Index of 'h3 * 'h3
            | `Unop of [< `Neg | `Not ] * 'h3 ]
           as 'h3) *
          'g3
      | `Bool
      | `Int
      | `Record of ('n3 * 'g3) list
      | `User of 'o3 ]
     as 'g3))
   list * 'p3) *
  (('r3 * 's3 * ((('z2 * 'a3) list * ('f3 * 'g3) list * 'p3) * 'q3) *
    ([> `Assign of
          ([> `Binop of
                ([> `And | `Eq | `Ge | `Gt | `Le | `Lt | `Ne | `Or ] as 'v3) *
                'u3 * 'u3
            | `Const of
                [< `False | `Literal of int | `True > `Literal ] as 'w3
            | `Field of 'u3 * string
            | `Ident of
                'x3 *
                [> `Const of [> `Literal of 'z3 ] as 'y3
                 | `Param of 'a4 * 'w2
                 | `VParam of 'b4 * 'w2
                 | `Var of 'c4 * 'w2 ]
            | `Index of 'u3 * 'u3
            | `Unop of [< `Neg | `Not ] * 'u3 ]
           as 'u3) *
          'u3
      | `Call of 'd4 * 'u3 list * [> `Proc of 'e4 * ('f4 * 'g4 * 'w2) list ]
      | `Case of
          'u3 *
          ([< `Atom of 'u3 | `Interval of 'u3 * 'u3 ] list * 't3 list) list *
          't3 list
      | `For of 'u3 * 'u3 * 'u3 * 'u3 option * 't3 list
      | `If of ('u3 * 't3 list) list * 't3 list
      | `While of 'u3 * 't3 list ]
     as 't3)
    list)
   list as 'q3) ->
  ((('z2 * 'a3) list * ('f3 * 'g3) list * 'p3) *
   ('r3 * 's3 * 'h4 *
    ([> `Assign of
          (([> `Binop of 'v3 * ('j4 * 'w2) * ('j4 * 'w2)
             | `Const of 'w3
             | `Field of ('j4 * 'w2) * string
             | `Ident of
                 'x3 *
                 [> `Const of 'y3
                  | `Param of 'a4 * 'w2
                  | `VParam of 'b4 * 'w2
                  | `Var of 'c4 * 'w2 ]
             | `Index of ('j4 * 'w2) * ('j4 * 'w2)
             | `Unop of [> `Neg | `Not ] * ('j4 * 'w2) ]
            as 'j4) *
           'w2) *
          ('j4 * 'w2)
      | `Call of
          'd4 * ('j4 * 'w2) list *
          ('d4 * 'u3 list * [> `Proc of 'e4 * ('f4 * 'g4 * 'w2) list ])
      | `Case of
          ('j4 * 'w2) *
          ([ `Atom of 'j4 * 'w2 | `Interval of ('j4 * 'w2) * ('j4 * 'w2) ]
           list * 'i4 list)
          list * 'i4 list
      | `For of
          ('j4 * 'w2) * ('j4 * 'w2) * ('j4 * 'w2) * ('j4 * 'w2) option *
          'i4 list
      | `If of (('j4 * 'w2) * 'i4 list) list * 'i4 list
      | `While of ('j4 * 'w2) * 'i4 list ]
     as 'i4)
    list)
   list as 'h4, Ostap.Msg.t)
  Checked.t
)
ident(
  def declarations "L4.ml" 191 7293 7297 "L4.ml" 193 7368 7373
)
"L4.ml" 169 6524 6545 "L4.ml" 169 6524 6547
type(
  < equal : 'w2 -> 'w2 -> bool; primitive : 'w2 -> bool;
    string : 'w2 -> string; .. >
  as 'k4
)
ident(
  def ts "L4.ml" 169 6524 6548 "L4.ml" 189 7227 7291
)
"L4.ml" 169 6524 6551 "L4.ml" 169 6524 6552
type(
  ('z2 * 'a3) list
)
"L4.ml" 169 6524 6554 "L4.ml" 169 6524 6555
type(
  ('f3 * 'g3) list
)
ident(
  def t "L4.ml" 170 6574 6580 "L4.ml" 189 7227 7291
)
"L4.ml" 169 6524 6557 "L4.ml" 169 6524 6558
type(
  'p3
)
"L4.ml" 169 6524 6551 "L4.ml" 169 6524 6558
type(
  ('z2 * 'a3) list * ('f3 * 'g3) list * 'p3
)
"L4.ml" 169 6524 6561 "L4.ml" 169 6524 6562
type(
  'q3
)
"L4.ml" 169 6524 6550 "L4.ml" 169 6524 6562
type(
  (('z2 * 'a3) list * ('f3 * 'g3) list * 'p3) * 'q3
)
"L4.ml" 169 6524 6549 "L4.ml" 169 6524 6568
type(
  (('z2 * 'a3) list * ('f3 * 'g3) list * 'p3) * 'q3
)
ident(
  def d "L4.ml" 170 6574 6580 "L4.ml" 189 7227 7291
)
"L4.ml" 170 6574 6584 "L4.ml" 170 6574 6586
type(
  (('f3 * 'g3) list, Ostap.Msg.t) Checked.t
)
ident(
  def mt "L4.ml" 189 7227 7233 "L4.ml" 189 7227 7291
)
"L4.ml" 170 6574 6588 "L4.ml" 170 6574 6589
type(
  ('f3 * 'g3) list
)
"L4.ml" 170 6574 6584 "L4.ml" 170 6574 6589
type(
  (('f3 * 'g3) list, Ostap.Msg.t) Checked.t * ('f3 * 'g3) list
)
"L4.ml" 171 6593 6601 "L4.ml" 171 6593 6613
type(
  ('f3 * 'g3 -> ('f3 * 'g3, Ostap.Msg.t) Checked.t) ->
  ('f3 * 'g3) list ->
  (('f3 * 'g3) list, Ostap.Msg.t) Checked.t * ('f3 * 'g3) list
)
ident(
  ext_ref Common.resolveDecls
)
"L4.ml" 172 6615 6631 "L4.ml" 172 6615 6635
type(
  'f3
)
ident(
  def name "L4.ml" 173 6644 6657 "L4.ml" 185 7149 7191
)
"L4.ml" 172 6615 6637 "L4.ml" 172 6615 6638
type(
  'g3
)
ident(
  def t "L4.ml" 173 6644 6657 "L4.ml" 185 7149 7191
)
"L4.ml" 172 6615 6631 "L4.ml" 172 6615 6638
type(
  'f3 * 'g3
)
"L4.ml" 173 6644 6665 "L4.ml" 173 6644 6670
type(
  ([> `Array of
        ([> `Binop of
              ([> `And | `Eq | `Ge | `Gt | `Le | `Lt | `Ne | `Or ] as 'n4) *
              'm4 * 'm4
          | `Const of [< `False | `Literal of int | `True > `Literal ] as 'o4
          | `Field of 'm4 * string
          | `Ident of
              'p4 *
              [> `Const of [> `Literal of 'r4 ] as 'q4
               | `Param of 's4 * 'w2
               | `VParam of 't4 * 'w2
               | `Var of 'u4 * 'w2 ]
          | `Index of 'm4 * 'm4
          | `Unop of [< `Neg | `Not ] * 'm4 ]
         as 'm4) *
        'l4
    | `Bool
    | `Int
    | `Record of ('v4 * 'l4) list
    | `User of 'w4 ]
   as 'l4) ->
  ([> `Array of
        (([> `Binop of 'n4 * ('y4 * 'w2) * ('y4 * 'w2)
           | `Const of 'o4
           | `Field of ('y4 * 'w2) * string
           | `Ident of
               'p4 *
               [> `Const of 'q4
                | `Param of 's4 * 'w2
                | `VParam of 't4 * 'w2
                | `Var of 'u4 * 'w2 ]
           | `Index of ('y4 * 'w2) * ('y4 * 'w2)
           | `Unop of [> `Neg | `Not ] * ('y4 * 'w2) ]
          as 'y4) *
         'w2) *
        'x4
    | `Bool
    | `Int
    | `Record of ('v4 * 'x4) list
    | `User of 'w4 ]
   as 'x4)
  Monad.Checked.t
)
ident(
  def inner "L4.ml" 173 6644 6657 "L4.ml" 185 7149 7191
)
"L4.ml" 173 6644 6671 "L4.ml" 173 6644 6672
type(
  'l4
)
ident(
  def t "L4.ml" 173 6644 6675 "L4.ml" 183 7108 7131
)
"L4.ml" 174 6677 6692 "L4.ml" 174 6677 6710
type(
  < array : 'l4 -> 'y4 * 'w2 -> 'x4 -> 'x4 Monad.Checked.t;
    record : 'l4 -> ('v4 * 'x4) list -> 'x4 Monad.Checked.t > ->
  ('m4 -> ('y4 * 'w2) Monad.Checked.t) ->
  (('l4 -> 'x4 Monad.Checked.t) -> 'l4 -> 'x4 Monad.Checked.t) ->
  'l4 -> 'x4 Monad.Checked.t
)
ident(
  ext_ref CompositeType.cmap
)
"L4.ml" 176 6738 6771 "L4.ml" 176 6738 6772
type(
  'l4
)
"L4.ml" 176 6738 6776 "L4.ml" 176 6738 6777
type(
  'y4
)
ident(
  def s "L4.ml" 176 6738 6790 "L4.ml" 177 6795 6871
)
"L4.ml" 176 6738 6779 "L4.ml" 176 6738 6781
type(
  'w2
)
ident(
  def st "L4.ml" 176 6738 6790 "L4.ml" 177 6795 6871
)
"L4.ml" 176 6738 6776 "L4.ml" 176 6738 6781
type(
  'y4 * 'w2
)
"L4.ml" 176 6738 6775 "L4.ml" 176 6738 6788
type(
  'y4 * 'w2
)
ident(
  def s' "L4.ml" 176 6738 6790 "L4.ml" 177 6795 6871
)
"L4.ml" 176 6738 6790 "L4.ml" 176 6738 6791
type(
  'x4
)
ident(
  def t "L4.ml" 177 6795 6817 "L4.ml" 177 6795 6871
)
"L4.ml" 177 6795 6817 "L4.ml" 177 6795 6827
type(
  'k4 ->
  'y4 -> 'w2 -> (_[> `Int ] as 'z4) -> ('y4 * 'z4, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Common.int
)
"L4.ml" 177 6795 6828 "L4.ml" 177 6795 6830
type(
  'k4
)
ident(
  int_ref ts "L4.ml" 169 6524 6545 "L4.ml" 169 6524 6547
)
"L4.ml" 177 6795 6831 "L4.ml" 177 6795 6832
type(
  'y4
)
ident(
  int_ref s "L4.ml" 176 6738 6776 "L4.ml" 176 6738 6777
)
"L4.ml" 177 6795 6833 "L4.ml" 177 6795 6835
type(
  'w2
)
ident(
  int_ref st "L4.ml" 176 6738 6779 "L4.ml" 176 6738 6781
)
"L4.ml" 177 6795 6836 "L4.ml" 177 6795 6840
type(
  'z4
)
"L4.ml" 177 6795 6817 "L4.ml" 177 6795 6840
call(
  stack
)
type(
  ('y4 * 'z4, Ostap.Msg.t) Checked.t
)
"L4.ml" 177 6795 6851 "L4.ml" 177 6795 6852
type(
  'y4 * 'z4
)
"L4.ml" 177 6795 6864 "L4.ml" 177 6795 6866
type(
  'y4 * 'w2
)
ident(
  int_ref s' "L4.ml" 176 6738 6775 "L4.ml" 176 6738 6788
)
"L4.ml" 177 6795 6868 "L4.ml" 177 6795 6869
type(
  'x4
)
ident(
  int_ref t "L4.ml" 176 6738 6790 "L4.ml" 176 6738 6791
)
"L4.ml" 177 6795 6863 "L4.ml" 177 6795 6870
type(
  ('y4 * 'w2) * 'x4
)
"L4.ml" 177 6795 6856 "L4.ml" 177 6795 6870
type(
  'x4
)
"L4.ml" 177 6795 6846 "L4.ml" 177 6795 6871
type(
  'y4 * 'z4 -> 'x4
)
"L4.ml" 177 6795 6817 "L4.ml" 177 6795 6871
call(
  tail
)
type(
  'x4 Monad.Checked.t
)
type(
  ('y4 * 'z4, Ostap.Msg.t) Checked.t ->
  ('y4 * 'z4 -> 'x4) -> 'x4 Monad.Checked.t
)
ident(
  ext_ref Checked.( -?-> )
)
"L4.ml" 176 6738 6790 "L4.ml" 177 6795 6871
type(
  'x4 -> 'x4 Monad.Checked.t
)
"L4.ml" 176 6738 6774 "L4.ml" 177 6795 6871
type(
  'y4 * 'w2 -> 'x4 -> 'x4 Monad.Checked.t
)
"L4.ml" 176 6738 6771 "L4.ml" 177 6795 6871
type(
  'l4 -> 'y4 * 'w2 -> 'x4 -> 'x4 Monad.Checked.t
)
type(
  'l4 -> 'y4 * 'w2 -> 'x4 -> 'x4 Monad.Checked.t
)
"L4.ml" 176 6738 6758 "L4.ml" 177 6795 6871
type(
  < array : 'l4 -> 'y4 * 'w2 -> 'x4 -> 'x4 Monad.Checked.t;
    record : 'l4 -> ('v4 * 'x4) list -> 'x4 Monad.Checked.t > ->
  'l4 -> 'y4 * 'w2 -> 'x4 -> 'x4 Monad.Checked.t
)
"L4.ml" 178 6874 6908 "L4.ml" 178 6874 6909
type(
  'l4
)
"L4.ml" 178 6874 6910 "L4.ml" 178 6874 6911
type(
  ('v4 * 'x4) list
)
ident(
  def f "L4.ml" 178 6874 6914 "L4.ml" 178 6874 6928
)
"L4.ml" 178 6874 6926 "L4.ml" 178 6874 6927
type(
  ('v4 * 'x4) list
)
ident(
  int_ref f "L4.ml" 178 6874 6910 "L4.ml" 178 6874 6911
)
"L4.ml" 178 6874 6917 "L4.ml" 178 6874 6928
type(
  'x4
)
"L4.ml" 178 6874 6914 "L4.ml" 178 6874 6928
call(
  tail
)
type(
  'x4 Monad.Checked.t
)
type(
  'x4 -> 'x4 Monad.Checked.t
)
ident(
  ext_ref Checked.( !! )
)
"L4.ml" 178 6874 6910 "L4.ml" 178 6874 6928
type(
  ('v4 * 'x4) list -> 'x4 Monad.Checked.t
)
"L4.ml" 178 6874 6908 "L4.ml" 178 6874 6928
type(
  'l4 -> ('v4 * 'x4) list -> 'x4 Monad.Checked.t
)
type(
  'l4 -> ('v4 * 'x4) list -> 'x4 Monad.Checked.t
)
"L4.ml" 178 6874 6894 "L4.ml" 178 6874 6928
type(
  < array : 'l4 -> 'y4 * 'w2 -> 'x4 -> 'x4 Monad.Checked.t;
    record : 'l4 -> ('v4 * 'x4) list -> 'x4 Monad.Checked.t > ->
  'l4 -> ('v4 * 'x4) list -> 'x4 Monad.Checked.t
)
"L4.ml" 175 6713 6730 "L4.ml" 180 6951 6969
type(
  < array : 'l4 -> 'y4 * 'w2 -> 'x4 -> 'x4 Monad.Checked.t;
    record : 'l4 -> ('v4 * 'x4) list -> 'x4 Monad.Checked.t >
)
type(
  < array : 'l4 -> 'y4 * 'w2 -> 'x4 -> 'x4 Monad.Checked.t;
    record : 'l4 -> ('v4 * 'x4) list -> 'x4 Monad.Checked.t >
)
"L4.ml" 181 6970 6988 "L4.ml" 181 6970 6998
type(
  'k4 -> 'm4 -> ('y4 * 'w2) Monad.Checked.t
)
ident(
  int_ref expression "L4.ml" 165 6370 6378 "L4.ml" 165 6370 6388
)
"L4.ml" 181 6970 6999 "L4.ml" 181 6970 7001
type(
  'k4
)
ident(
  int_ref ts "L4.ml" 169 6524 6545 "L4.ml" 169 6524 6547
)
"L4.ml" 181 6970 6987 "L4.ml" 181 6970 7002
call(
  stack
)
type(
  'm4 -> ('y4 * 'w2) Monad.Checked.t
)
"L4.ml" 174 6677 6692 "L4.ml" 181 6970 7002
call(
  stack
)
type(
  (('l4 -> 'x4 Monad.Checked.t) -> 'l4 -> 'x4 Monad.Checked.t) ->
  'l4 -> 'x4 Monad.Checked.t
)
"L4.ml" 182 7006 7028 "L4.ml" 182 7006 7031
type(
  ('l4 -> 'x4 Monad.Checked.t) -> 'l4 -> 'x4 Monad.Checked.t
)
ident(
  def ext "L4.ml" 182 7006 7032 "L4.ml" 182 7006 7106
)
"L4.ml" 182 7006 7032 "L4.ml" 182 7006 7033
type(
  'l4
)
ident(
  def t "L4.ml" 182 7006 7037 "L4.ml" 182 7006 7106
)
"L4.ml" 182 7006 7043 "L4.ml" 182 7006 7044
type(
  'l4
)
ident(
  int_ref t "L4.ml" 182 7006 7032 "L4.ml" 182 7006 7033
)
"L4.ml" 182 7006 7051 "L4.ml" 182 7006 7055
type(
  'l4
)
"L4.ml" 182 7006 7058 "L4.ml" 182 7006 7063
type(
  'l4
)
"L4.ml" 182 7006 7051 "L4.ml" 182 7006 7063
type(
  'l4
)
"L4.ml" 182 7006 7072 "L4.ml" 182 7006 7073
type(
  'w4
)
"L4.ml" 182 7006 7066 "L4.ml" 182 7006 7073
type(
  'l4
)
"L4.ml" 182 7006 7051 "L4.ml" 182 7006 7073
type(
  'l4
)
"L4.ml" 182 7006 7050 "L4.ml" 182 7006 7079
type(
  'l4
)
ident(
  def x "L4.ml" 182 7006 7083 "L4.ml" 182 7006 7087
)
"L4.ml" 182 7006 7086 "L4.ml" 182 7006 7087
type(
  'x4
)
ident(
  int_ref x "L4.ml" 182 7006 7050 "L4.ml" 182 7006 7079
)
"L4.ml" 182 7006 7083 "L4.ml" 182 7006 7087
call(
  tail
)
type(
  'x4 Monad.Checked.t
)
type(
  'x4 -> 'x4 Monad.Checked.t
)
ident(
  ext_ref Checked.( !! )
)
"L4.ml" 182 7006 7090 "L4.ml" 182 7006 7091
type(
  'l4
)
ident(
  def x "L4.ml" 182 7006 7095 "L4.ml" 182 7006 7106
)
"L4.ml" 182 7006 7095 "L4.ml" 182 7006 7098
type(
  ('l4 -> 'x4 Monad.Checked.t) -> 'l4 -> 'x4 Monad.Checked.t
)
ident(
  int_ref ext "L4.ml" 182 7006 7028 "L4.ml" 182 7006 7031
)
"L4.ml" 182 7006 7099 "L4.ml" 182 7006 7104
type(
  'l4 -> 'x4 Monad.Checked.t
)
ident(
  int_ref inner "L4.ml" 173 6644 6665 "L4.ml" 173 6644 6670
)
"L4.ml" 182 7006 7105 "L4.ml" 182 7006 7106
type(
  'l4
)
ident(
  int_ref x "L4.ml" 182 7006 7090 "L4.ml" 182 7006 7091
)
"L4.ml" 182 7006 7095 "L4.ml" 182 7006 7106
call(
  tail
)
type(
  'x4 Monad.Checked.t
)
"L4.ml" 182 7006 7037 "L4.ml" 182 7006 7106
type(
  'x4 Monad.Checked.t
)
"L4.ml" 182 7006 7032 "L4.ml" 182 7006 7106
type(
  'l4 -> 'x4 Monad.Checked.t
)
"L4.ml" 182 7006 7023 "L4.ml" 182 7006 7107
type(
  (('l4 -> 'x4 Monad.Checked.t) -> 'l4 -> 'x4 Monad.Checked.t) ->
  'l4 -> 'x4 Monad.Checked.t
)
"L4.ml" 174 6677 6692 "L4.ml" 182 7006 7107
type(
  ((('l4 -> 'x4 Monad.Checked.t) -> 'l4 -> 'x4 Monad.Checked.t) ->
   'l4 -> 'x4 Monad.Checked.t) ->
  ((('l4 -> 'x4 Monad.Checked.t) -> 'l4 -> 'x4 Monad.Checked.t) ->
   'l4 -> 'x4 Monad.Checked.t) ->
  (('l4 -> 'x4 Monad.Checked.t) -> 'l4 -> 'x4 Monad.Checked.t) ->
  'l4 -> 'x4 Monad.Checked.t
)
ident(
  ext_ref Common.( ++ )
)
"L4.ml" 183 7108 7124 "L4.ml" 183 7108 7129
type(
  ('l4 -> 'x4 Monad.Checked.t) -> 'l4 -> 'x4 Monad.Checked.t
)
ident(
  ext_ref Common.apply
)
"L4.ml" 183 7108 7130 "L4.ml" 183 7108 7131
type(
  'l4
)
ident(
  int_ref t "L4.ml" 173 6644 6671 "L4.ml" 173 6644 6672
)
"L4.ml" 173 6644 6675 "L4.ml" 183 7108 7131
call(
  tail
)
type(
  'x4 Monad.Checked.t
)
"L4.ml" 173 6644 6671 "L4.ml" 183 7108 7131
type(
  'l4 -> 'x4 Monad.Checked.t
)
"L4.ml" 185 7149 7162 "L4.ml" 185 7149 7167
type(
  'g3 ->
  (_[> `Array of
         ((_[> `Binop of
                 ([> `And | `Eq | `Ge | `Gt | `Le | `Lt | `Ne | `Or ] as 'c5) *
                 ('b5 * 'w2) * ('b5 * 'w2)
             | `Const of
                 [< `False | `Literal of int | `True > `Literal ] as 'd5
             | `Field of ('b5 * 'w2) * string
             | `Ident of
                 'i3 *
                 _[> `Const of [> `Literal of 'j3 ] as 'e5
                   | `Param of 'k3 * 'w2
                   | `VParam of 'l3 * 'w2
                   | `Var of 'm3 * 'w2 ]
             | `Index of ('b5 * 'w2) * ('b5 * 'w2)
             | `Unop of _[> `Neg | `Not ] * ('b5 * 'w2) ]
           as 'b5) *
          'w2) *
         'a5
     | `Bool
     | `Int
     | `Record of ('n3 * 'a5) list
     | `User of 'o3 ]
   as 'a5)
  Monad.Checked.t
)
ident(
  int_ref inner "L4.ml" 173 6644 6665 "L4.ml" 173 6644 6670
)
"L4.ml" 185 7149 7168 "L4.ml" 185 7149 7169
type(
  'g3
)
ident(
  int_ref t "L4.ml" 172 6615 6637 "L4.ml" 172 6615 6638
)
"L4.ml" 185 7149 7162 "L4.ml" 185 7149 7169
call(
  stack
)
type(
  'a5 Monad.Checked.t
)
"L4.ml" 185 7149 7175 "L4.ml" 185 7149 7181
type(
  'f3 * 'g3 -> 'a5 -> 'f3 * 'g3
)
ident(
  ext_ref Common.return
)
"L4.ml" 185 7149 7183 "L4.ml" 185 7149 7187
type(
  'f3
)
ident(
  int_ref name "L4.ml" 172 6615 6631 "L4.ml" 172 6615 6635
)
"L4.ml" 185 7149 7189 "L4.ml" 185 7149 7190
type(
  'g3
)
ident(
  int_ref t "L4.ml" 172 6615 6637 "L4.ml" 172 6615 6638
)
"L4.ml" 185 7149 7182 "L4.ml" 185 7149 7191
type(
  'f3 * 'g3
)
"L4.ml" 185 7149 7175 "L4.ml" 185 7149 7191
call(
  stack
)
type(
  'a5 -> 'f3 * 'g3
)
"L4.ml" 185 7149 7162 "L4.ml" 185 7149 7191
call(
  tail
)
type(
  ('f3 * 'g3, Ostap.Msg.t) Checked.t
)
type(
  'a5 Monad.Checked.t ->
  ('a5 -> 'f3 * 'g3) -> ('f3 * 'g3, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.( -?-> )
)
"L4.ml" 173 6644 6657 "L4.ml" 185 7149 7191
type(
  ('f3 * 'g3, Ostap.Msg.t) Checked.t
)
"L4.ml" 172 6615 6625 "L4.ml" 186 7192 7203
type(
  'f3 * 'g3 -> ('f3 * 'g3, Ostap.Msg.t) Checked.t
)
"L4.ml" 187 7205 7215 "L4.ml" 187 7205 7216
type(
  ('f3 * 'g3) list
)
ident(
  int_ref t "L4.ml" 169 6524 6554 "L4.ml" 169 6524 6555
)
"L4.ml" 171 6593 6601 "L4.ml" 187 7205 7216
call(
  stack
)
type(
  (('f3 * 'g3) list, Ostap.Msg.t) Checked.t * ('f3 * 'g3) list
)
"L4.ml" 189 7227 7233 "L4.ml" 189 7227 7238
type(
  (('f3 * 'g3) list, Ostap.Msg.t) Checked.t * ('h4, Ostap.Msg.t) Checked.t ->
  (('f3 * 'g3) list * 'h4, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.tuple
)
"L4.ml" 189 7227 7240 "L4.ml" 189 7227 7242
type(
  (('f3 * 'g3) list, Ostap.Msg.t) Checked.t
)
ident(
  int_ref mt "L4.ml" 170 6574 6584 "L4.ml" 170 6574 6586
)
"L4.ml" 189 7227 7244 "L4.ml" 189 7227 7266
type(
  'k4 ->
  ('k4 -> 't3 -> 'i4 Monad.Checked.t) ->
  ((('z2 * 'a3) list * ('f3 * 'g3) list * 'p3) * 'q3 as 'f5) ->
  ('h4, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref L3.Typecheck.declarations
)
"L4.ml" 189 7227 7267 "L4.ml" 189 7227 7269
type(
  'k4
)
ident(
  int_ref ts "L4.ml" 169 6524 6545 "L4.ml" 169 6524 6547
)
"L4.ml" 189 7227 7270 "L4.ml" 189 7227 7279
type(
  'k4 -> 't3 -> 'i4 Monad.Checked.t
)
ident(
  int_ref statement "L4.ml" 167 6450 6458 "L4.ml" 167 6450 6467
)
"L4.ml" 189 7227 7280 "L4.ml" 189 7227 7281
type(
  'f5
)
ident(
  int_ref d "L4.ml" 169 6524 6549 "L4.ml" 169 6524 6568
)
"L4.ml" 189 7227 7244 "L4.ml" 189 7227 7281
call(
  stack
)
type(
  ('h4, Ostap.Msg.t) Checked.t
)
"L4.ml" 189 7227 7239 "L4.ml" 189 7227 7282
type(
  (('f3 * 'g3) list, Ostap.Msg.t) Checked.t * ('h4, Ostap.Msg.t) Checked.t
)
"L4.ml" 189 7227 7233 "L4.ml" 189 7227 7282
call(
  stack
)
type(
  (('f3 * 'g3) list * 'h4, Ostap.Msg.t) Checked.t
)
"L4.ml" 189 7227 7288 "L4.ml" 189 7227 7291
type(
  ('f3 * 'g3) list * 'h4 -> 'h4
)
ident(
  ext_ref Pervasives.snd
)
"L4.ml" 189 7227 7233 "L4.ml" 189 7227 7291
call(
  tail
)
type(
  ('h4, Ostap.Msg.t) Checked.t
)
type(
  (('f3 * 'g3) list * 'h4, Ostap.Msg.t) Checked.t ->
  (('f3 * 'g3) list * 'h4 -> 'h4) -> ('h4, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.( -?-> )
)
"L4.ml" 170 6574 6580 "L4.ml" 189 7227 7291
type(
  ('h4, Ostap.Msg.t) Checked.t
)
"L4.ml" 169 6524 6548 "L4.ml" 189 7227 7291
type(
  (('z2 * 'a3) list * ('f3 * 'g3) list * 'p3) * 'q3 ->
  ('h4, Ostap.Msg.t) Checked.t
)
"L4.ml" 169 6524 6545 "L4.ml" 189 7227 7291
type(
  'k4 ->
  (('z2 * 'a3) list * ('f3 * 'g3) list * 'p3) * 'q3 ->
  ('h4, Ostap.Msg.t) Checked.t
)
"L4.ml" 191 7293 7301 "L4.ml" 191 7293 7308
type(
  'g5 *
  ((('h5 *
     ([> `Binop of
           [> `And | `Eq | `Ge | `Gt | `Le | `Lt | `Ne | `Or ] * 'i5 * 'i5
       | `Const of [< `False | `Literal of 'j5 | `True ]
       | `Ident of
           'k5 *
           [> `Const of [> `Literal of 'l5 ]
            | `Var of
                'm5 *
                ([> `Array of
                      ([> `Binop of
                            [< `Add
                             | `And
                             | `Div
                             | `Eq
                             | `Ge
                             | `Gt
                             | `Le
                             | `Lt
                             | `Mod
                             | `Mul
                             | `Ne
                             | `Or
                             | `Sub ] *
                            'o5 * 'o5
                        | `Const of
                            [< `False | `Literal of int | `True > `Literal ]
                        | `Field of 'o5 * string
                        | `Ident of string * 'p5
                        | `Index of 'o5 * 'o5
                        | `Unop of [< `Neg | `Not ] * 'o5 ]
                       as 'o5) *
                      'n5
                  | `Bool
                  | `Int
                  | `Record of (string * 'n5) list
                  | `User of 'q5 * string * 'n5 ]
                 as 'n5) ]
       | `Unop of [< `Neg | `Not ] * 'i5 ]
      as 'i5))
    list *
    ('r5 *
     ([> `Array of
           ([> `Binop of
                 [> `And | `Eq | `Ge | `Gt | `Le | `Lt | `Ne | `Or ] * 't5 *
                 't5
             | `Const of [< `False | `Literal of int | `True > `Literal ]
             | `Field of 't5 * string
             | `Ident of
                 'u5 *
                 [> `Const of [> `Literal of 'v5 ]
                  | `Param of 'w5 * 'n5
                  | `VParam of 'x5 * 'n5
                  | `Var of 'y5 * 'n5 ]
             | `Index of 't5 * 't5
             | `Unop of [< `Neg | `Not ] * 't5 ]
            as 't5) *
           's5
       | `Bool
       | `Int
       | `Record of ('z5 * 's5) list
       | `User of 'a6 ]
      as 's5))
    list * 'b6) *
   (('d6 * 'e6 * ((('h5 * 'i5) list * ('r5 * 's5) list * 'b6) * 'c6) *
     ([> `Assign of
           ([> `Binop of
                 ([> `And | `Eq | `Ge | `Gt | `Le | `Lt | `Ne | `Or ] as 'h6) *
                 'g6 * 'g6
             | `Const of
                 [< `False | `Literal of int | `True > `Literal ] as 'i6
             | `Field of 'g6 * string
             | `Ident of
                 'j6 *
                 [> `Const of [> `Literal of 'l6 ] as 'k6
                  | `Param of 'm6 * 'n5
                  | `VParam of 'n6 * 'n5
                  | `Var of 'o6 * 'n5 ]
             | `Index of 'g6 * 'g6
             | `Unop of [< `Neg | `Not ] * 'g6 ]
            as 'g6) *
           'g6
       | `Call of 'p6 * 'g6 list * [> `Proc of 'q6 * ('r6 * 's6 * 'n5) list ]
       | `Case of
           'g6 *
           ([< `Atom of 'g6 | `Interval of 'g6 * 'g6 ] list * 'f6 list) list *
           'f6 list
       | `For of 'g6 * 'g6 * 'g6 * 'g6 option * 'f6 list
       | `If of ('g6 * 'f6 list) list * 'f6 list
       | `While of 'g6 * 'f6 list ]
      as 'f6)
     list)
    list as 'c6)) *
  ([> `Assign of
        ([> `Binop of
              ([> `And | `Eq | `Ge | `Gt | `Le | `Lt | `Ne | `Or ] as 'v6) *
              'u6 * 'u6
          | `Const of [< `False | `Literal of int | `True > `Literal ] as 'w6
          | `Field of 'u6 * string
          | `Ident of
              'x6 *
              [> `Const of [> `Literal of 'z6 ] as 'y6
               | `Param of
                   'a7 *
                   ([> `Array of
                         ([> `Binop of
                               [< `Add
                                | `And
                                | `Div
                                | `Eq
                                | `Ge
                                | `Gt
                                | `Le
                                | `Lt
                                | `Mod
                                | `Mul
                                | `Ne
                                | `Or
                                | `Sub ] *
                               'c7 * 'c7
                           | `Const of
                               [< `False | `Literal of int | `True
                                > `Literal ]
                           | `Field of 'c7 * string
                           | `Ident of string * 'd7
                           | `Index of 'c7 * 'c7
                           | `Unop of [< `Neg | `Not ] * 'c7 ]
                          as 'c7) *
                         'b7
                     | `Bool
                     | `Int
                     | `Record of (string * 'b7) list
                     | `User of 'e7 * string * 'b7 ]
                    as 'b7)
               | `VParam of 'f7 * 'b7
               | `Var of 'g7 * 'b7 ]
          | `Index of 'u6 * 'u6
          | `Unop of [< `Neg | `Not ] * 'u6 ]
         as 'u6) *
        'u6
    | `Call of 'h7 * 'u6 list * [> `Proc of 'i7 * ('j7 * 'k7 * 'b7) list ]
    | `Case of
        'u6 *
        ([< `Atom of 'u6 | `Interval of 'u6 * 'u6 ] list * 't6 list) list *
        't6 list
    | `For of 'u6 * 'u6 * 'u6 * 'u6 option * 't6 list
    | `If of ('u6 * 't6 list) list * 't6 list
    | `While of 'u6 * 't6 list ]
   as 't6)
  list ->
  ('g5 *
   ((('h5 * 'i5) list * ('r5 * 's5) list * 'b6) *
    ('d6 * 'e6 * 'l7 *
     ([> `Assign of
           (([> `Binop of 'h6 * ('n7 * 'n5) * ('n7 * 'n5)
              | `Const of 'i6
              | `Field of ('n7 * 'n5) * string
              | `Ident of
                  'j6 *
                  [> `Const of 'k6
                   | `Param of 'm6 * 'n5
                   | `VParam of 'n6 * 'n5
                   | `Var of 'o6 * 'n5 ]
              | `Index of ('n7 * 'n5) * ('n7 * 'n5)
              | `Unop of [> `Neg | `Not ] * ('n7 * 'n5) ]
             as 'n7) *
            'n5) *
           ('n7 * 'n5)
       | `Call of
           'p6 * ('n7 * 'n5) list *
           ('p6 * 'g6 list * [> `Proc of 'q6 * ('r6 * 's6 * 'n5) list ])
       | `Case of
           ('n7 * 'n5) *
           ([ `Atom of 'n7 * 'n5 | `Interval of ('n7 * 'n5) * ('n7 * 'n5) ]
            list * 'm7 list)
           list * 'm7 list
       | `For of
           ('n7 * 'n5) * ('n7 * 'n5) * ('n7 * 'n5) * ('n7 * 'n5) option *
           'm7 list
       | `If of (('n7 * 'n5) * 'm7 list) list * 'm7 list
       | `While of ('n7 * 'n5) * 'm7 list ]
      as 'm7)
     list)
    list as 'l7) *
   ([> `Assign of
         (([> `Binop of 'v6 * ('p7 * 'b7) * ('p7 * 'b7)
            | `Const of 'w6
            | `Field of ('p7 * 'b7) * string
            | `Ident of
                'x6 *
                [> `Const of 'y6
                 | `Param of 'a7 * 'b7
                 | `VParam of 'f7 * 'b7
                 | `Var of 'g7 * 'b7 ]
            | `Index of ('p7 * 'b7) * ('p7 * 'b7)
            | `Unop of [> `Neg | `Not ] * ('p7 * 'b7) ]
           as 'p7) *
          'b7) *
         ('p7 * 'b7)
     | `Call of
         'h7 * ('p7 * 'b7) list *
         ('h7 * 'u6 list * [> `Proc of 'i7 * ('j7 * 'k7 * 'b7) list ])
     | `Case of
         ('p7 * 'b7) *
         ([ `Atom of 'p7 * 'b7 | `Interval of ('p7 * 'b7) * ('p7 * 'b7) ]
          list * 'o7 list)
         list * 'o7 list
     | `For of
         ('p7 * 'b7) * ('p7 * 'b7) * ('p7 * 'b7) * ('p7 * 'b7) option *
         'o7 list
     | `If of (('p7 * 'b7) * 'o7 list) list * 'o7 list
     | `While of ('p7 * 'b7) * 'o7 list ]
    as 'o7)
   list, Ostap.Msg.t)
  Checked.t
)
ident(
  def program "L4.ml" 191 7293 7364 "L4.ml" 193 7368 7373
)
"L4.ml" 191 7293 7309 "L4.ml" 191 7293 7310
type(
  'g5 * ((('h5 * 'i5) list * ('r5 * 's5) list * 'b6) * 'c6) * 't6 list
)
ident(
  def m "L4.ml" 191 7293 7313 "L4.ml" 191 7293 7364
)
"L4.ml" 191 7293 7313 "L4.ml" 191 7293 7329
type(
  ((('h5 * 'i5) list * ('r5 * 's5) list * 'b6) * 'c6 ->
   ('l7, Ostap.Msg.t) Checked.t) ->
  ('t6 -> 'o7 Monad.Checked.t) ->
  'g5 * ((('h5 * 'i5) list * ('r5 * 's5) list * 'b6) * 'c6) * 't6 list ->
  ('g5 * 'l7 * 'o7 list, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Module.typecheck
)
"L4.ml" 191 7293 7331 "L4.ml" 191 7293 7343
type(
  < equal : 'n5 -> 'n5 -> bool; primitive : 'n5 -> bool;
    string : 'n5 -> string > ->
  (('h5 * 'i5) list * ('r5 * 's5) list * 'b6) * 'c6 ->
  ('l7, Ostap.Msg.t) Checked.t
)
ident(
  int_ref declarations "L4.ml" 169 6524 6532 "L4.ml" 169 6524 6544
)
"L4.ml" 191 7293 7344 "L4.ml" 191 7293 7346
type(
  < equal : 'n5 -> 'n5 -> bool; primitive : 'n5 -> bool;
    string : 'n5 -> string >
)
ident(
  int_ref ts "L4.ml" 108 4139 4147 "L4.ml" 108 4139 4149
)
"L4.ml" 191 7293 7330 "L4.ml" 191 7293 7347
call(
  stack
)
type(
  (('h5 * 'i5) list * ('r5 * 's5) list * 'b6) * 'c6 ->
  ('l7, Ostap.Msg.t) Checked.t
)
"L4.ml" 191 7293 7349 "L4.ml" 191 7293 7358
type(
  < equal : 'b7 -> 'b7 -> bool; primitive : 'b7 -> bool;
    string : 'b7 -> string > ->
  't6 -> 'o7 Monad.Checked.t
)
ident(
  int_ref statement "L4.ml" 167 6450 6458 "L4.ml" 167 6450 6467
)
"L4.ml" 191 7293 7359 "L4.ml" 191 7293 7361
type(
  < equal : 'b7 -> 'b7 -> bool; primitive : 'b7 -> bool;
    string : 'b7 -> string >
)
ident(
  int_ref ts "L4.ml" 108 4139 4147 "L4.ml" 108 4139 4149
)
"L4.ml" 191 7293 7348 "L4.ml" 191 7293 7362
call(
  stack
)
type(
  't6 -> 'o7 Monad.Checked.t
)
"L4.ml" 191 7293 7363 "L4.ml" 191 7293 7364
type(
  'g5 * ((('h5 * 'i5) list * ('r5 * 's5) list * 'b6) * 'c6) * 't6 list
)
ident(
  int_ref m "L4.ml" 191 7293 7309 "L4.ml" 191 7293 7310
)
"L4.ml" 191 7293 7313 "L4.ml" 191 7293 7364
call(
  tail
)
type(
  ('g5 * 'l7 * 'o7 list, Ostap.Msg.t) Checked.t
)
"L4.ml" 191 7293 7309 "L4.ml" 191 7293 7364
type(
  'g5 * ((('h5 * 'i5) list * ('r5 * 's5) list * 'b6) * 'c6) * 't6 list ->
  ('g5 * 'l7 * 'o7 list, Ostap.Msg.t) Checked.t
)
"L4.ml" 202 7501 7509 "L4.ml" 202 7501 7514
type(
  < getName : string -> 'a; .. > ->
  ([> `Assign of
        ([> `Binop of
              [> `Add
               | `And
               | `Div
               | `Eq
               | `Ge
               | `Gt
               | `Le
               | `Lt
               | `Mod
               | `Mul
               | `Ne
               | `Or
               | `Sub ] *
              'c * 'c
          | `Const of [> `False | `Literal of int | `True ]
          | `Ident of 'a * [> `Var of 'a * [> `Int ] ]
          | `Unop of [> `Neg | `Not ] * 'c ]
         as 'c) *
        'c
    | `Call of 'd * 'e * 'f
    | `Case of
        'c * ([< `Atom of 'c | `Interval of 'c * 'c ] list * 'b list) list *
        'b list
    | `For of 'c * 'c * 'c * 'c option * 'b list
    | `If of ('c * 'b list) list * 'b list
    | `While of 'c * 'b list ]
   as 'b) ->
  ([> `Assign of 'c * 'c
    | `Call of 'd * 'e * 'f
    | `If of ('c * 'g list) list * 'g list
    | `While of 'c * 'g list ]
   as 'g)
  Monad.List.t * ('a list * [> `Int ]) list
)
ident(
  def lower "L4.ml" 253 9920 9924 "L4.ml" 271 10584 10589
)
"L4.ml" 202 7501 7515 "L4.ml" 202 7501 7520
type(
  < getName : string -> 'a; .. > as 'h
)
ident(
  def namer "L4.ml" 202 7501 7521 "L4.ml" 251 9816 9918
)
"L4.ml" 202 7501 7521 "L4.ml" 202 7501 7522
type(
  'b
)
ident(
  def s "L4.ml" 203 7525 7531 "L4.ml" 251 9816 9918
)
"L4.ml" 204 7543 7557 "L4.ml" 204 7543 7559
type(
  string ->
  ([> `Binop of
        [> `Add
         | `And
         | `Div
         | `Eq
         | `Ge
         | `Gt
         | `Le
         | `Lt
         | `Mod
         | `Mul
         | `Ne
         | `Or
         | `Sub ] *
        'i * 'i
    | `Const of [> `False | `Literal of int | `True ]
    | `Unop of [> `Neg | `Not ] * 'i ]
   as 'i)
)
ident(
  def qc "L4.ml" 204 7543 7551 "L4.ml" 204 7543 7580
)
"L4.ml" 204 7543 7562 "L4.ml" 204 7543 7565
call(
  tail
)
type(
  (< coord : 'k; getEOF : ('j, 'l, Ostap.Reason.t) Ostap.Combinators.result;
     getIDENT : ('j, Ostap.Matcher.Token.t, Ostap.Reason.t)
                Ostap.Combinators.result;
     getLITERAL : ('j, Ostap.Matcher.Token.t, Ostap.Reason.t)
                  Ostap.Combinators.result;
     loc : Ostap.Msg.Locator.t;
     look : string -> ('j, 'm, Ostap.Reason.t) Ostap.Combinators.result;
     pos : 'n;
     regexp : string ->
              string -> ('j, 'm, Ostap.Reason.t) Ostap.Combinators.result;
     skip : 'n -> 'k -> [> `Skipped of 'o * Ostap.Msg.Coord.t ]; .. >
   as 'j, 'm, Ostap.Reason.t)
  Ostap.Combinators.parse
)
type(
  ('j, 'm, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  string
)
type(
  string -> ('j, 'm, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'j
)
ident(
  int_ref _ostap_stream "L4.ml" 204 7543 7562 "L4.ml" 204 7543 7565
)
type(
  'j
)
ident(
  def _ostap_stream "L4.ml" 204 7543 7562 "L4.ml" 204 7543 7565
)
"L4.ml" 204 7543 7566 "L4.ml" 204 7543 7568
type(
  string
)
ident(
  def i "L4.ml" 204 7543 7575 "L4.ml" 204 7543 7579
)
"L4.ml" 204 7543 7568 "L4.ml" 204 7543 7573
type(
  ('j, string, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Common.ident
)
"L4.ml" 204 7543 7575 "L4.ml" 204 7543 7577
type(
  string -> 'i
)
ident(
  int_ref qc "L4.ml" 204 7543 7557 "L4.ml" 204 7543 7559
)
"L4.ml" 204 7543 7578 "L4.ml" 204 7543 7579
type(
  string
)
ident(
  int_ref i "L4.ml" 204 7543 7566 "L4.ml" 204 7543 7568
)
"L4.ml" 204 7543 7575 "L4.ml" 204 7543 7579
call(
  tail
)
type(
  'i
)
"L4.ml" 204 7543 7562 "L4.ml" 204 7543 7580
call(
  tail
)
type(
  'm -> ('j, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('j, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  string -> 'i
)
type(
  string
)
ident(
  def _0 "L4.ml" 204 7543 7575 "L4.ml" 204 7543 7579
)
type(
  (string -> 'i) ->
  ('j, string, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('j, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.map
)
type(
  'm
)
ident(
  def _1 "L4.ml" 204 7543 7562 "L4.ml" 204 7543 7580
)
type(
  'm
)
type(
  ('j, 'm, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('m -> ('j, 'i, Ostap.Reason.t) Ostap.Combinators.parse) ->
  ('j, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.seq
)
"L4.ml" 204 7543 7551 "L4.ml" 204 7543 7580
call(
  tail
)
type(
  (string -> 'i) -> ('j, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  'j -> ('j, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('j, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'j
)
ident(
  int_ref _ostap_stream "L4.ml" 204 7543 7551 "L4.ml" 204 7543 7580
)
type(
  'j
)
ident(
  def _ostap_stream "L4.ml" 204 7543 7551 "L4.ml" 204 7543 7580
)
"L4.ml" 205 7582 7596 "L4.ml" 205 7582 7598
type(
  string -> 'i
)
ident(
  def qc "L4.ml" 205 7582 7590 "L4.ml" 205 7582 7636
)
"L4.ml" 205 7582 7603 "L4.ml" 205 7582 7625
type(
  ('j, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  'j -> ('j, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  ext_ref SimpleExpression.parse
)
"L4.ml" 205 7582 7627 "L4.ml" 205 7582 7632
type(
  (string -> 'i) -> ('j, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref qexpr "L4.ml" 204 7543 7551 "L4.ml" 207 7710 7747
)
"L4.ml" 205 7582 7633 "L4.ml" 205 7582 7635
type(
  string -> 'i
)
ident(
  int_ref qc "L4.ml" 205 7582 7596 "L4.ml" 205 7582 7598
)
"L4.ml" 205 7582 7627 "L4.ml" 205 7582 7635
call(
  stack
)
type(
  ('j, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
"L4.ml" 205 7582 7601 "L4.ml" 205 7582 7636
call(
  tail
)
type(
  'j -> ('j, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('j, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'j
)
ident(
  int_ref _ostap_stream "L4.ml" 205 7582 7601 "L4.ml" 205 7582 7636
)
type(
  'j
)
ident(
  def _ostap_stream "L4.ml" 205 7582 7601 "L4.ml" 205 7582 7636
)
"L4.ml" 205 7582 7590 "L4.ml" 205 7582 7636
type(
  (string -> 'i) -> ('j, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  'j -> ('j, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('j, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'j
)
ident(
  int_ref _ostap_stream "L4.ml" 205 7582 7590 "L4.ml" 205 7582 7636
)
type(
  'j
)
ident(
  def _ostap_stream "L4.ml" 205 7582 7590 "L4.ml" 205 7582 7636
)
"L4.ml" 206 7638 7652 "L4.ml" 206 7638 7654
type(
  string -> 'i
)
ident(
  def qc "L4.ml" 206 7638 7646 "L4.ml" 206 7638 7708
)
"L4.ml" 206 7638 7659 "L4.ml" 206 7638 7680
type(
  ('j, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('j, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('j,
   [> `Assign of 'i * 'i
    | `If of ('i * 'p list) list * 'p list
    | `While of 'i * 'p list ]
   as 'p, Ostap.Reason.t)
  Ostap.Combinators.parse ->
  'j -> ('j, 'p, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  ext_ref SimpleStatement.parse
)
"L4.ml" 206 7638 7682 "L4.ml" 206 7638 7686
type(
  (string -> 'i) -> ('j, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref expr "L4.ml" 204 7543 7551 "L4.ml" 207 7710 7747
)
"L4.ml" 206 7638 7687 "L4.ml" 206 7638 7689
type(
  string -> 'i
)
ident(
  int_ref qc "L4.ml" 206 7638 7652 "L4.ml" 206 7638 7654
)
"L4.ml" 206 7638 7682 "L4.ml" 206 7638 7689
call(
  stack
)
type(
  ('j, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
"L4.ml" 206 7638 7691 "L4.ml" 206 7638 7695
type(
  (string -> 'i) -> ('j, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref expr "L4.ml" 204 7543 7551 "L4.ml" 207 7710 7747
)
"L4.ml" 206 7638 7696 "L4.ml" 206 7638 7698
type(
  string -> 'i
)
ident(
  int_ref qc "L4.ml" 206 7638 7652 "L4.ml" 206 7638 7654
)
"L4.ml" 206 7638 7691 "L4.ml" 206 7638 7698
call(
  stack
)
type(
  ('j, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
"L4.ml" 206 7638 7700 "L4.ml" 206 7638 7704
type(
  (string -> 'i) -> ('j, 'p, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref stmt "L4.ml" 204 7543 7551 "L4.ml" 207 7710 7747
)
"L4.ml" 206 7638 7705 "L4.ml" 206 7638 7707
type(
  string -> 'i
)
ident(
  int_ref qc "L4.ml" 206 7638 7652 "L4.ml" 206 7638 7654
)
"L4.ml" 206 7638 7700 "L4.ml" 206 7638 7707
call(
  stack
)
type(
  ('j, 'p, Ostap.Reason.t) Ostap.Combinators.parse
)
"L4.ml" 206 7638 7657 "L4.ml" 206 7638 7708
call(
  tail
)
type(
  'j -> ('j, 'p, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('j, 'p, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'j
)
ident(
  int_ref _ostap_stream "L4.ml" 206 7638 7657 "L4.ml" 206 7638 7708
)
type(
  'j
)
ident(
  def _ostap_stream "L4.ml" 206 7638 7657 "L4.ml" 206 7638 7708
)
"L4.ml" 206 7638 7646 "L4.ml" 206 7638 7708
type(
  (string -> 'i) -> ('j, 'p, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  'j -> ('j, 'p, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('j, 'p, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'j
)
ident(
  int_ref _ostap_stream "L4.ml" 206 7638 7646 "L4.ml" 206 7638 7708
)
type(
  'j
)
ident(
  def _ostap_stream "L4.ml" 206 7638 7646 "L4.ml" 206 7638 7708
)
"L4.ml" 207 7710 7724 "L4.ml" 207 7710 7726
type(
  string -> 'i
)
ident(
  def qc "L4.ml" 207 7710 7718 "L4.ml" 207 7710 7747
)
"L4.ml" 207 7710 7729 "L4.ml" 207 7710 7733
type(
  ('j, 'p, Ostap.Reason.t) Ostap.Combinators.parse ->
  'j -> ('j, 'p list, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  ext_ref Common.oseq
)
"L4.ml" 207 7710 7734 "L4.ml" 207 7710 7738
type(
  (string -> 'i) -> ('j, 'p, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref stmt "L4.ml" 204 7543 7551 "L4.ml" 207 7710 7747
)
"L4.ml" 207 7710 7739 "L4.ml" 207 7710 7741
type(
  string -> 'i
)
ident(
  int_ref qc "L4.ml" 207 7710 7724 "L4.ml" 207 7710 7726
)
"L4.ml" 207 7710 7734 "L4.ml" 207 7710 7741
call(
  stack
)
type(
  ('j, 'p, Ostap.Reason.t) Ostap.Combinators.parse
)
"L4.ml" 207 7710 7729 "L4.ml" 207 7710 7742
call(
  tail
)
type(
  ('j, 'p list, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('j, 'p list, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'j
)
ident(
  int_ref _ostap_stream "L4.ml" 207 7710 7729 "L4.ml" 207 7710 7742
)
type(
  'j
)
ident(
  def _ostap_stream "L4.ml" 207 7710 7729 "L4.ml" 207 7710 7742
)
"L4.ml" 207 7710 7744 "L4.ml" 207 7710 7747
call(
  tail
)
type(
  ('j, 'l, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('j, 'l, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'j
)
ident(
  int_ref _ostap_stream "L4.ml" 207 7710 7744 "L4.ml" 207 7710 7747
)
type(
  'j
)
ident(
  def _ostap_stream "L4.ml" 207 7710 7744 "L4.ml" 207 7710 7747
)
"L4.ml" 207 7710 7729 "L4.ml" 207 7710 7747
call(
  tail
)
type(
  'p list -> ('j, 'p list, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('j, 'p list, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  'l -> 'p list
)
type(
  'p list
)
ident(
  int_ref _0 "L4.ml" 207 7710 7729 "L4.ml" 207 7710 7747
)
type(
  'l
)
type(
  ('l -> 'p list) ->
  ('j, 'l, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('j, 'p list, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.map
)
type(
  'p list
)
ident(
  def _0 "L4.ml" 207 7710 7729 "L4.ml" 207 7710 7747
)
type(
  'p list
)
type(
  ('j, 'p list, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('p list -> ('j, 'p list, Ostap.Reason.t) Ostap.Combinators.parse) ->
  ('j, 'p list, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.seq
)
"L4.ml" 207 7710 7718 "L4.ml" 207 7710 7747
call(
  tail
)
type(
  (string -> 'i) ->
  'j -> ('j, 'p list, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'j -> ('j, 'p list, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('j, 'p list, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'j
)
ident(
  int_ref _ostap_stream "L4.ml" 207 7710 7718 "L4.ml" 207 7710 7747
)
type(
  'j
)
ident(
  def _ostap_stream "L4.ml" 207 7710 7718 "L4.ml" 207 7710 7747
)
"L4.ml" 204 7543 7551 "L4.ml" 207 7710 7747
type(
  (string -> 'i) ->
  'j -> ('j, 'p list, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  def stmts "L4.ml" 203 7525 7531 "L4.ml" 251 9816 9918
)
type(
  (string -> 'i) -> ('j, 'p, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  def stmt "L4.ml" 203 7525 7531 "L4.ml" 251 9816 9918
)
type(
  (string -> 'i) -> ('j, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  def expr "L4.ml" 203 7525 7531 "L4.ml" 251 9816 9918
)
type(
  (string -> 'i) -> ('j, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  def qexpr "L4.ml" 203 7525 7531 "L4.ml" 251 9816 9918
)
"L4.ml" 210 7765 7775 "L4.ml" 210 7765 7780
type(
  (('q -> 'r) ->
   Lexer.t ->
   ('s, 't,
    < retrieve : [> `First of int ] ->
                 [> `Desc ] ->
                 (Ostap.Msg.Locator.t *
                  [< `Comment of string * 'u | `Msg of Ostap.Msg.t ] list)
                 list;
      .. >)
   Ostap.Combinators.result) ->
  ('q * 'r) list -> string -> 't
)
ident(
  def quote "L4.ml" 211 7865 7871 "L4.ml" 251 9816 9918
)
"L4.ml" 210 7765 7781 "L4.ml" 210 7765 7782
type(
  ('q -> 'r) ->
  Lexer.t ->
  ('s, 't,
   < retrieve : [> `First of int ] ->
                [> `Desc ] ->
                (Ostap.Msg.Locator.t *
                 [< `Comment of string * 'u | `Msg of Ostap.Msg.t ] list)
                list;
     .. >
   as 'v)
  Ostap.Combinators.result
)
ident(
  def p "L4.ml" 210 7765 7783 "L4.ml" 210 7765 7861
)
"L4.ml" 210 7765 7783 "L4.ml" 210 7765 7790
type(
  ('q * 'r) list
)
ident(
  def context "L4.ml" 210 7765 7791 "L4.ml" 210 7765 7861
)
"L4.ml" 210 7765 7791 "L4.ml" 210 7765 7794
type(
  string
)
ident(
  def str "L4.ml" 210 7765 7797 "L4.ml" 210 7765 7861
)
"L4.ml" 210 7765 7797 "L4.ml" 210 7765 7804
type(
  ('t, Ostap.Msg.t) Checked.t -> 't
)
ident(
  ext_ref Checked.uncheck
)
"L4.ml" 210 7765 7806 "L4.ml" 210 7765 7811
type(
  ('s, 't, 'v) Ostap.Combinators.result -> ('t, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Common.check
)
"L4.ml" 210 7765 7813 "L4.ml" 210 7765 7814
type(
  ('q -> 'r) -> Lexer.t -> ('s, 't, 'v) Ostap.Combinators.result
)
ident(
  int_ref p "L4.ml" 210 7765 7781 "L4.ml" 210 7765 7782
)
"L4.ml" 210 7765 7820 "L4.ml" 210 7765 7821
type(
  'q
)
ident(
  def x "L4.ml" 210 7765 7825 "L4.ml" 210 7765 7840
)
"L4.ml" 210 7765 7825 "L4.ml" 210 7765 7830
type(
  'q -> ('q * 'r) list -> 'r
)
ident(
  ext_ref List.assoc
)
"L4.ml" 210 7765 7831 "L4.ml" 210 7765 7832
type(
  'q
)
ident(
  int_ref x "L4.ml" 210 7765 7820 "L4.ml" 210 7765 7821
)
"L4.ml" 210 7765 7833 "L4.ml" 210 7765 7840
type(
  ('q * 'r) list
)
ident(
  int_ref context "L4.ml" 210 7765 7783 "L4.ml" 210 7765 7790
)
"L4.ml" 210 7765 7825 "L4.ml" 210 7765 7840
call(
  tail
)
type(
  'r
)
"L4.ml" 210 7765 7815 "L4.ml" 210 7765 7841
type(
  'q -> 'r
)
"L4.ml" 210 7765 7843 "L4.ml" 210 7765 7854
type(
  string -> Lexer.t
)
"L4.ml" 210 7765 7855 "L4.ml" 210 7765 7858
type(
  string
)
ident(
  int_ref str "L4.ml" 210 7765 7791 "L4.ml" 210 7765 7794
)
"L4.ml" 210 7765 7842 "L4.ml" 210 7765 7859
call(
  stack
)
type(
  Lexer.t
)
"L4.ml" 210 7765 7812 "L4.ml" 210 7765 7860
call(
  stack
)
type(
  ('s, 't, 'v) Ostap.Combinators.result
)
"L4.ml" 210 7765 7805 "L4.ml" 210 7765 7861
call(
  stack
)
type(
  ('t, Ostap.Msg.t) Checked.t
)
"L4.ml" 210 7765 7797 "L4.ml" 210 7765 7861
call(
  tail
)
type(
  't
)
"L4.ml" 210 7765 7791 "L4.ml" 210 7765 7861
type(
  string -> 't
)
"L4.ml" 210 7765 7783 "L4.ml" 210 7765 7861
type(
  ('q * 'r) list -> string -> 't
)
"L4.ml" 210 7765 7781 "L4.ml" 210 7765 7861
type(
  (('q -> 'r) -> Lexer.t -> ('s, 't, 'v) Ostap.Combinators.result) ->
  ('q * 'r) list -> string -> 't
)
"L4.ml" 211 7865 7875 "L4.ml" 211 7865 7877
type(
  (string * 'c) list -> string -> 'c
)
ident(
  def qe "L4.ml" 212 7928 7934 "L4.ml" 251 9816 9918
)
"L4.ml" 211 7865 7879 "L4.ml" 211 7865 7881
type(
  (string * 'c) list ->
  string ->
  ([> `Assign of 'c * 'c
    | `If of ('c * 'w list) list * 'w list
    | `While of 'c * 'w list ]
   as 'w)
)
ident(
  def qs "L4.ml" 212 7928 7934 "L4.ml" 251 9816 9918
)
"L4.ml" 211 7865 7883 "L4.ml" 211 7865 7886
type(
  (string * 'c) list ->
  string ->
  ([> `Assign of 'c * 'c
    | `If of ('c * 'x list) list * 'x list
    | `While of 'c * 'x list ]
   as 'x)
  list
)
ident(
  def qss "L4.ml" 212 7928 7934 "L4.ml" 251 9816 9918
)
"L4.ml" 211 7865 7875 "L4.ml" 211 7865 7886
type(
  ((string * 'c) list -> string -> 'c) *
  ((string * 'c) list -> string -> 'w) *
  ((string * 'c) list -> string -> 'x list)
)
"L4.ml" 211 7865 7889 "L4.ml" 211 7865 7894
type(
  ((string -> 'c) -> (Lexer.t, 'c, Ostap.Reason.t) Ostap.Combinators.parse) ->
  (string * 'c) list -> string -> 'c
)
ident(
  int_ref quote "L4.ml" 210 7765 7775 "L4.ml" 210 7765 7780
)
"L4.ml" 211 7865 7895 "L4.ml" 211 7865 7899
type(
  (string -> 'c) -> (Lexer.t, 'c, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref expr "L4.ml" 204 7543 7551 "L4.ml" 207 7710 7747
)
"L4.ml" 211 7865 7889 "L4.ml" 211 7865 7899
call(
  stack
)
type(
  (string * 'c) list -> string -> 'c
)
"L4.ml" 211 7865 7901 "L4.ml" 211 7865 7906
type(
  ((string -> 'c) -> (Lexer.t, 'w, Ostap.Reason.t) Ostap.Combinators.parse) ->
  (string * 'c) list -> string -> 'w
)
ident(
  int_ref quote "L4.ml" 210 7765 7775 "L4.ml" 210 7765 7780
)
"L4.ml" 211 7865 7907 "L4.ml" 211 7865 7911
type(
  (string -> 'c) -> (Lexer.t, 'w, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref stmt "L4.ml" 204 7543 7551 "L4.ml" 207 7710 7747
)
"L4.ml" 211 7865 7901 "L4.ml" 211 7865 7911
call(
  stack
)
type(
  (string * 'c) list -> string -> 'w
)
"L4.ml" 211 7865 7913 "L4.ml" 211 7865 7918
type(
  ((string -> 'c) ->
   Lexer.t -> (Lexer.t, 'x list, Ostap.Reason.t) Ostap.Combinators.result) ->
  (string * 'c) list -> string -> 'x list
)
ident(
  int_ref quote "L4.ml" 210 7765 7775 "L4.ml" 210 7765 7780
)
"L4.ml" 211 7865 7919 "L4.ml" 211 7865 7924
type(
  (string -> 'c) ->
  Lexer.t -> (Lexer.t, 'x list, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  int_ref stmts "L4.ml" 204 7543 7551 "L4.ml" 207 7710 7747
)
"L4.ml" 211 7865 7913 "L4.ml" 211 7865 7924
call(
  stack
)
type(
  (string * 'c) list -> string -> 'x list
)
"L4.ml" 211 7865 7889 "L4.ml" 211 7865 7924
type(
  ((string * 'c) list -> string -> 'c) *
  ((string * 'c) list -> string -> 'w) *
  ((string * 'c) list -> string -> 'x list)
)
"L4.ml" 212 7928 7938 "L4.ml" 212 7928 7943
type(
  ('a list * ([> `Int ] as 'y)) list ref
)
ident(
  def names "L4.ml" 213 7956 7962 "L4.ml" 251 9816 9918
)
"L4.ml" 212 7928 7946 "L4.ml" 212 7928 7949
type(
  ('a list * 'y) list -> ('a list * 'y) list ref
)
ident(
  ext_ref Pervasives.ref
)
"L4.ml" 212 7928 7950 "L4.ml" 212 7928 7952
type(
  ('a list * 'y) list
)
"L4.ml" 212 7928 7946 "L4.ml" 212 7928 7952
type(
  ('a list * 'y) list ref
)
"L4.ml" 213 7956 7966 "L4.ml" 213 7956 7969
type(
  'a * 'y -> unit
)
ident(
  def add "L4.ml" 214 8020 8026 "L4.ml" 251 9816 9918
)
"L4.ml" 213 7956 7971 "L4.ml" 213 7956 7975
type(
  'a
)
ident(
  def name "L4.ml" 213 7956 7984 "L4.ml" 213 7956 8016
)
"L4.ml" 213 7956 7977 "L4.ml" 213 7956 7980
type(
  'y
)
ident(
  def typ "L4.ml" 213 7956 7984 "L4.ml" 213 7956 8016
)
"L4.ml" 213 7956 7971 "L4.ml" 213 7956 7980
type(
  'a * 'y
)
"L4.ml" 213 7956 7984 "L4.ml" 213 7956 7989
type(
  ('a list * 'y) list ref
)
ident(
  int_ref names "L4.ml" 212 7928 7938 "L4.ml" 212 7928 7943
)
"L4.ml" 213 7956 7995 "L4.ml" 213 7956 7999
type(
  'a
)
ident(
  int_ref name "L4.ml" 213 7956 7971 "L4.ml" 213 7956 7975
)
"L4.ml" 213 7956 7994 "L4.ml" 213 7956 8000
type(
  'a list
)
type(
  'a list
)
"L4.ml" 213 7956 8002 "L4.ml" 213 7956 8005
type(
  'y
)
ident(
  int_ref typ "L4.ml" 213 7956 7977 "L4.ml" 213 7956 7980
)
"L4.ml" 213 7956 7993 "L4.ml" 213 7956 8006
type(
  'a list * 'y
)
"L4.ml" 213 7956 8011 "L4.ml" 213 7956 8016
type(
  ('a list * 'y) list ref
)
ident(
  int_ref names "L4.ml" 212 7928 7938 "L4.ml" 212 7928 7943
)
"L4.ml" 213 7956 8010 "L4.ml" 213 7956 8016
type(
  ('a list * 'y) list
)
type(
  ('a list * 'y) list ref -> ('a list * 'y) list
)
ident(
  ext_ref Pervasives.( ! )
)
"L4.ml" 213 7956 7993 "L4.ml" 213 7956 8016
type(
  ('a list * 'y) list
)
"L4.ml" 213 7956 7984 "L4.ml" 213 7956 8016
type(
  unit
)
type(
  ('a list * 'y) list ref -> ('a list * 'y) list -> unit
)
ident(
  ext_ref Pervasives.( := )
)
"L4.ml" 213 7956 7970 "L4.ml" 213 7956 8016
type(
  'a * 'y -> unit
)
"L4.ml" 214 8020 8041 "L4.ml" 214 8020 8076
call(
  stack
)
"L4.ml" 215 8081 8102 "L4.ml" 215 8081 8139
call(
  stack
)
"L4.ml" 216 8143 8153 "L4.ml" 216 8143 8156
type(
  (([> `Call of 'a1 * 'b1 * 'c1
     | `Case of
         'c * ([< `Atom of 'c | `Interval of 'c * 'c ] list * 'z list) list *
         'z list
     | `For of 'c * 'c * 'c * 'c option * 'z list ]
    as 'z) ->
   ([> `Assign of 'c * 'c
     | `Call of 'a1 * 'b1 * 'c1
     | `If of ('c * 'd1 list) list * 'd1 list
     | `While of 'c * 'd1 list ]
    as 'd1)
   Monad.List.t) ->
  'z -> 'd1 Monad.List.t
)
ident(
  def ext "L4.ml" 251 9816 9822 "L4.ml" 251 9816 9918
)
"L4.ml" 216 8143 8157 "L4.ml" 216 8143 8161
type(
  'z -> 'd1 Monad.List.t
)
ident(
  def self "L4.ml" 216 8143 8162 "L4.ml" 249 9786 9806
)
"L4.ml" 216 8143 8162 "L4.ml" 216 8143 8166
type(
  'z
)
ident(
  def stmt "L4.ml" 217 8169 8177 "L4.ml" 249 9786 9806
)
"L4.ml" 217 8169 8177 "L4.ml" 217 8169 8183
type(
  < case : 'z ->
           'c ->
           ([ `Atom of 'c | `Interval of 'c * 'c ] list * 'd1 list) list ->
           'd1 list -> 'd1 Monad.List.t;
    forc : 'z -> 'c -> 'c -> 'c -> 'c option -> 'd1 list -> 'd1 Monad.List.t > ->
  ('c -> 'c Monad.List.t) ->
  ('c -> 'c Monad.List.t) ->
  ('c -> 'c Monad.List.t) ->
  (('z -> 'd1 Monad.List.t) -> 'z -> 'd1 Monad.List.t) ->
  'z -> 'd1 Monad.List.t
)
ident(
  ext_ref E.gmap
)
"L4.ml" 218 8192 8222 "L4.ml" 218 8192 8223
type(
  'z
)
"L4.ml" 218 8192 8224 "L4.ml" 218 8192 8225
type(
  'c
)
ident(
  def e "L4.ml" 218 8192 8226 "L4.ml" 232 8940 8961
)
"L4.ml" 218 8192 8226 "L4.ml" 218 8192 8227
type(
  ([ `Atom of 'c | `Interval of 'c * 'c ] list * 'd1 list) list
)
ident(
  def b "L4.ml" 218 8192 8228 "L4.ml" 232 8940 8961
)
"L4.ml" 218 8192 8228 "L4.ml" 218 8192 8229
type(
  'd1 list
)
ident(
  def s "L4.ml" 219 8233 8253 "L4.ml" 232 8940 8961
)
"L4.ml" 219 8233 8257 "L4.ml" 219 8233 8258
type(
  'a
)
ident(
  def k "L4.ml" 220 8284 8304 "L4.ml" 232 8940 8961
)
"L4.ml" 219 8233 8261 "L4.ml" 219 8233 8266
type(
  'h
)
ident(
  int_ref namer "L4.ml" 202 7501 7515 "L4.ml" 202 7501 7520
)
"L4.ml" 219 8233 8261 "L4.ml" 219 8233 8274
call(
  stack
)
type(
  string -> 'a
)
"L4.ml" 219 8233 8275 "L4.ml" 219 8233 8280
type(
  string
)
"L4.ml" 219 8233 8261 "L4.ml" 219 8233 8280
type(
  'a
)
"L4.ml" 220 8284 8304 "L4.ml" 220 8284 8307
type(
  'a * 'y -> unit
)
ident(
  int_ref add "L4.ml" 213 7956 7966 "L4.ml" 213 7956 7969
)
"L4.ml" 220 8284 8309 "L4.ml" 220 8284 8310
type(
  'a
)
ident(
  int_ref k "L4.ml" 219 8233 8257 "L4.ml" 219 8233 8258
)
"L4.ml" 220 8284 8312 "L4.ml" 220 8284 8316
type(
  'y
)
"L4.ml" 220 8284 8308 "L4.ml" 220 8284 8317
type(
  'a * 'y
)
"L4.ml" 220 8284 8304 "L4.ml" 220 8284 8317
call(
  stack
)
type(
  unit
)
"L4.ml" 221 8319 8343 "L4.ml" 221 8319 8344
type(
  [> `Ident of 'a * [> `Var of 'a * [> `Int ] ] ]
)
ident(
  def k "L4.ml" 222 8377 8397 "L4.ml" 232 8940 8961
)
"L4.ml" 221 8319 8355 "L4.ml" 221 8319 8356
type(
  'a
)
ident(
  int_ref k "L4.ml" 219 8233 8257 "L4.ml" 219 8233 8258
)
"L4.ml" 221 8319 8364 "L4.ml" 221 8319 8365
type(
  'a
)
ident(
  int_ref k "L4.ml" 219 8233 8257 "L4.ml" 219 8233 8258
)
"L4.ml" 221 8319 8367 "L4.ml" 221 8319 8371
type(
  [> `Int ] as 'e1
)
"L4.ml" 221 8319 8363 "L4.ml" 221 8319 8372
type(
  'a * 'e1
)
"L4.ml" 221 8319 8358 "L4.ml" 221 8319 8372
type(
  [> `Var of 'a * 'e1 ] as 'f1
)
"L4.ml" 221 8319 8354 "L4.ml" 221 8319 8373
type(
  'a * 'f1
)
"L4.ml" 221 8319 8347 "L4.ml" 221 8319 8373
type(
  [> `Ident of 'a * 'f1 ] as 'g1
)
"L4.ml" 222 8377 8401 "L4.ml" 222 8377 8405
type(
  [< `Atom of 'c | `Interval of 'c * 'c ] -> 'c
)
ident(
  def cond "L4.ml" 226 8618 8638 "L4.ml" 232 8940 8961
)
"L4.ml" 223 8418 8446 "L4.ml" 223 8418 8447
type(
  'c
)
ident(
  def e "L4.ml" 223 8418 8451 "L4.ml" 223 8418 8480
)
"L4.ml" 223 8418 8440 "L4.ml" 223 8418 8447
type(
  [< `Atom of 'c | `Interval of 'c * 'c ] as 'h1
)
"L4.ml" 223 8418 8451 "L4.ml" 223 8418 8453
type(
  (string * 'c) list -> string -> 'c
)
ident(
  int_ref qe "L4.ml" 211 7865 7875 "L4.ml" 211 7865 7877
)
"L4.ml" 223 8418 8455 "L4.ml" 223 8418 8458
type(
  string
)
"L4.ml" 223 8418 8460 "L4.ml" 223 8418 8461
type(
  'c
)
ident(
  int_ref k "L4.ml" 221 8319 8343 "L4.ml" 221 8319 8344
)
"L4.ml" 223 8418 8455 "L4.ml" 223 8418 8461
type(
  string * 'c
)
"L4.ml" 223 8418 8463 "L4.ml" 223 8418 8466
type(
  string
)
"L4.ml" 223 8418 8468 "L4.ml" 223 8418 8469
type(
  'c
)
ident(
  int_ref e "L4.ml" 223 8418 8446 "L4.ml" 223 8418 8447
)
"L4.ml" 223 8418 8463 "L4.ml" 223 8418 8469
type(
  string * 'c
)
"L4.ml" 223 8418 8454 "L4.ml" 223 8418 8470
type(
  (string * 'c) list
)
type(
  (string * 'c) list
)
type(
  (string * 'c) list
)
"L4.ml" 223 8418 8471 "L4.ml" 223 8418 8480
type(
  string
)
"L4.ml" 223 8418 8451 "L4.ml" 223 8418 8480
call(
  tail
)
type(
  'c
)
"L4.ml" 224 8481 8514 "L4.ml" 224 8481 8515
type(
  'c
)
ident(
  def l "L4.ml" 224 8481 8523 "L4.ml" 224 8481 8576
)
"L4.ml" 224 8481 8517 "L4.ml" 224 8481 8518
type(
  'c
)
ident(
  def u "L4.ml" 224 8481 8523 "L4.ml" 224 8481 8576
)
"L4.ml" 224 8481 8514 "L4.ml" 224 8481 8518
type(
  'c * 'c
)
"L4.ml" 224 8481 8503 "L4.ml" 224 8481 8519
type(
  'h1
)
"L4.ml" 224 8481 8523 "L4.ml" 224 8481 8525
type(
  (string * 'c) list -> string -> 'c
)
ident(
  int_ref qe "L4.ml" 211 7865 7875 "L4.ml" 211 7865 7877
)
"L4.ml" 224 8481 8527 "L4.ml" 224 8481 8530
type(
  string
)
"L4.ml" 224 8481 8532 "L4.ml" 224 8481 8533
type(
  'c
)
ident(
  int_ref k "L4.ml" 221 8319 8343 "L4.ml" 221 8319 8344
)
"L4.ml" 224 8481 8527 "L4.ml" 224 8481 8533
type(
  string * 'c
)
"L4.ml" 224 8481 8535 "L4.ml" 224 8481 8538
type(
  string
)
"L4.ml" 224 8481 8540 "L4.ml" 224 8481 8541
type(
  'c
)
ident(
  int_ref l "L4.ml" 224 8481 8514 "L4.ml" 224 8481 8515
)
"L4.ml" 224 8481 8535 "L4.ml" 224 8481 8541
type(
  string * 'c
)
"L4.ml" 224 8481 8543 "L4.ml" 224 8481 8546
type(
  string
)
"L4.ml" 224 8481 8548 "L4.ml" 224 8481 8549
type(
  'c
)
ident(
  int_ref u "L4.ml" 224 8481 8517 "L4.ml" 224 8481 8518
)
"L4.ml" 224 8481 8543 "L4.ml" 224 8481 8549
type(
  string * 'c
)
"L4.ml" 224 8481 8526 "L4.ml" 224 8481 8550
type(
  (string * 'c) list
)
type(
  (string * 'c) list
)
type(
  (string * 'c) list
)
type(
  (string * 'c) list
)
"L4.ml" 224 8481 8551 "L4.ml" 224 8481 8576
type(
  string
)
"L4.ml" 224 8481 8523 "L4.ml" 224 8481 8576
call(
  tail
)
type(
  'c
)
"L4.ml" 222 8377 8408 "L4.ml" 224 8481 8576
type(
  'h1 -> 'c
)
"L4.ml" 226 8618 8638 "L4.ml" 226 8618 8640
type(
  (string * 'c) list -> string -> 'd1
)
ident(
  int_ref qs "L4.ml" 211 7865 7879 "L4.ml" 211 7865 7881
)
"L4.ml" 226 8618 8642 "L4.ml" 226 8618 8645
type(
  string
)
"L4.ml" 226 8618 8647 "L4.ml" 226 8618 8648
type(
  'c
)
ident(
  int_ref k "L4.ml" 221 8319 8343 "L4.ml" 221 8319 8344
)
"L4.ml" 226 8618 8642 "L4.ml" 226 8618 8648
type(
  string * 'c
)
"L4.ml" 226 8618 8650 "L4.ml" 226 8618 8653
type(
  string
)
"L4.ml" 226 8618 8655 "L4.ml" 226 8618 8656
type(
  'c
)
ident(
  int_ref e "L4.ml" 218 8192 8224 "L4.ml" 218 8192 8225
)
"L4.ml" 226 8618 8650 "L4.ml" 226 8618 8656
type(
  string * 'c
)
"L4.ml" 226 8618 8641 "L4.ml" 226 8618 8657
type(
  (string * 'c) list
)
type(
  (string * 'c) list
)
type(
  (string * 'c) list
)
"L4.ml" 226 8618 8658 "L4.ml" 226 8618 8668
type(
  string
)
"L4.ml" 226 8618 8638 "L4.ml" 226 8618 8668
call(
  stack
)
type(
  'd1
)
"L4.ml" 227 8672 8698 "L4.ml" 227 8672 8701
type(
  ([ `Atom of 'c | `Interval of 'c * 'c ] list * 'd1 list -> 'c * 'd1 list) ->
  ([ `Atom of 'c | `Interval of 'c * 'c ] list * 'd1 list) list ->
  ('c * 'd1 list) list
)
ident(
  ext_ref List.map
)
"L4.ml" 227 8672 8708 "L4.ml" 227 8672 8709
type(
  [ `Atom of 'c | `Interval of 'c * 'c ]
)
ident(
  def h "L4.ml" 228 8721 8753 "L4.ml" 230 8873 8906
)
"L4.ml" 227 8672 8711 "L4.ml" 227 8672 8712
type(
  [ `Atom of 'c | `Interval of 'c * 'c ] list
)
ident(
  def t "L4.ml" 228 8721 8753 "L4.ml" 230 8873 8906
)
"L4.ml" 227 8672 8708 "L4.ml" 227 8672 8712
type(
  [ `Atom of 'c | `Interval of 'c * 'c ] list
)
"L4.ml" 227 8672 8714 "L4.ml" 227 8672 8715
type(
  'd1 list
)
ident(
  def s "L4.ml" 228 8721 8753 "L4.ml" 230 8873 8906
)
"L4.ml" 227 8672 8708 "L4.ml" 227 8672 8715
type(
  [ `Atom of 'c | `Interval of 'c * 'c ] list * 'd1 list
)
"L4.ml" 228 8721 8753 "L4.ml" 228 8721 8762
type(
  ('c -> [ `Atom of 'c | `Interval of 'c * 'c ] -> 'c) ->
  'c -> [ `Atom of 'c | `Interval of 'c * 'c ] list -> 'c
)
ident(
  ext_ref List.fold_left
)
"L4.ml" 228 8721 8768 "L4.ml" 228 8721 8771
type(
  'c
)
ident(
  def acc "L4.ml" 228 8721 8772 "L4.ml" 228 8721 8824
)
"L4.ml" 228 8721 8772 "L4.ml" 228 8721 8773
type(
  [ `Atom of 'c | `Interval of 'c * 'c ]
)
ident(
  def c "L4.ml" 228 8721 8777 "L4.ml" 228 8721 8824
)
"L4.ml" 228 8721 8777 "L4.ml" 228 8721 8779
type(
  (string * 'c) list -> string -> 'c
)
ident(
  int_ref qe "L4.ml" 211 7865 7875 "L4.ml" 211 7865 7877
)
"L4.ml" 228 8721 8781 "L4.ml" 228 8721 8786
type(
  string
)
"L4.ml" 228 8721 8788 "L4.ml" 228 8721 8791
type(
  'c
)
ident(
  int_ref acc "L4.ml" 228 8721 8768 "L4.ml" 228 8721 8771
)
"L4.ml" 228 8721 8781 "L4.ml" 228 8721 8791
type(
  string * 'c
)
"L4.ml" 228 8721 8793 "L4.ml" 228 8721 8799
type(
  string
)
"L4.ml" 228 8721 8801 "L4.ml" 228 8721 8805
type(
  [ `Atom of 'c | `Interval of 'c * 'c ] -> 'c
)
ident(
  int_ref cond "L4.ml" 222 8377 8401 "L4.ml" 222 8377 8405
)
"L4.ml" 228 8721 8806 "L4.ml" 228 8721 8807
type(
  [ `Atom of 'c | `Interval of 'c * 'c ]
)
ident(
  int_ref c "L4.ml" 228 8721 8772 "L4.ml" 228 8721 8773
)
"L4.ml" 228 8721 8801 "L4.ml" 228 8721 8807
call(
  stack
)
type(
  'c
)
"L4.ml" 228 8721 8793 "L4.ml" 228 8721 8807
type(
  string * 'c
)
"L4.ml" 228 8721 8780 "L4.ml" 228 8721 8808
type(
  (string * 'c) list
)
type(
  (string * 'c) list
)
type(
  (string * 'c) list
)
"L4.ml" 228 8721 8809 "L4.ml" 228 8721 8824
type(
  string
)
"L4.ml" 228 8721 8777 "L4.ml" 228 8721 8824
call(
  tail
)
type(
  'c
)
"L4.ml" 228 8721 8772 "L4.ml" 228 8721 8824
type(
  [ `Atom of 'c | `Interval of 'c * 'c ] -> 'c
)
"L4.ml" 228 8721 8763 "L4.ml" 228 8721 8825
type(
  'c -> [ `Atom of 'c | `Interval of 'c * 'c ] -> 'c
)
"L4.ml" 229 8827 8862 "L4.ml" 229 8827 8866
type(
  [ `Atom of 'c | `Interval of 'c * 'c ] -> 'c
)
ident(
  int_ref cond "L4.ml" 222 8377 8401 "L4.ml" 222 8377 8405
)
"L4.ml" 229 8827 8867 "L4.ml" 229 8827 8868
type(
  [ `Atom of 'c | `Interval of 'c * 'c ]
)
ident(
  int_ref h "L4.ml" 227 8672 8708 "L4.ml" 227 8672 8709
)
"L4.ml" 229 8827 8861 "L4.ml" 229 8827 8869
call(
  stack
)
type(
  'c
)
"L4.ml" 229 8827 8870 "L4.ml" 229 8827 8871
type(
  [ `Atom of 'c | `Interval of 'c * 'c ] list
)
ident(
  int_ref t "L4.ml" 227 8672 8711 "L4.ml" 227 8672 8712
)
"L4.ml" 228 8721 8753 "L4.ml" 229 8827 8871
call(
  stack
)
type(
  'c
)
"L4.ml" 230 8873 8905 "L4.ml" 230 8873 8906
type(
  'd1 list
)
ident(
  int_ref s "L4.ml" 227 8672 8714 "L4.ml" 227 8672 8715
)
"L4.ml" 228 8721 8753 "L4.ml" 230 8873 8906
type(
  'c * 'd1 list
)
"L4.ml" 227 8672 8702 "L4.ml" 230 8873 8907
type(
  [ `Atom of 'c | `Interval of 'c * 'c ] list * 'd1 list -> 'c * 'd1 list
)
"L4.ml" 230 8873 8908 "L4.ml" 230 8873 8909
type(
  ([ `Atom of 'c | `Interval of 'c * 'c ] list * 'd1 list) list
)
ident(
  int_ref b "L4.ml" 218 8192 8226 "L4.ml" 218 8192 8227
)
"L4.ml" 227 8672 8698 "L4.ml" 230 8873 8909
call(
  stack
)
type(
  ('c * 'd1 list) list
)
"L4.ml" 231 8911 8937 "L4.ml" 231 8911 8938
type(
  'd1 list
)
ident(
  int_ref s "L4.ml" 218 8192 8228 "L4.ml" 218 8192 8229
)
"L4.ml" 227 8672 8697 "L4.ml" 231 8911 8939
type(
  ('c * 'd1 list) list * 'd1 list
)
"L4.ml" 227 8672 8693 "L4.ml" 231 8911 8939
type(
  'd1
)
"L4.ml" 227 8672 8692 "L4.ml" 232 8940 8961
type(
  'd1 list
)
type(
  'd1 list
)
"L4.ml" 226 8618 8638 "L4.ml" 232 8940 8961
type(
  'd1 Monad.List.t
)
"L4.ml" 222 8377 8397 "L4.ml" 232 8940 8961
type(
  'd1 Monad.List.t
)
"L4.ml" 221 8319 8339 "L4.ml" 232 8940 8961
type(
  'd1 Monad.List.t
)
"L4.ml" 220 8284 8304 "L4.ml" 232 8940 8961
type(
  'd1 Monad.List.t
)
"L4.ml" 219 8233 8253 "L4.ml" 232 8940 8961
type(
  'd1 Monad.List.t
)
"L4.ml" 218 8192 8228 "L4.ml" 232 8940 8961
type(
  'd1 list -> 'd1 Monad.List.t
)
"L4.ml" 218 8192 8226 "L4.ml" 232 8940 8961
type(
  ([ `Atom of 'c | `Interval of 'c * 'c ] list * 'd1 list) list ->
  'd1 list -> 'd1 Monad.List.t
)
"L4.ml" 218 8192 8224 "L4.ml" 232 8940 8961
type(
  'c ->
  ([ `Atom of 'c | `Interval of 'c * 'c ] list * 'd1 list) list ->
  'd1 list -> 'd1 Monad.List.t
)
"L4.ml" 218 8192 8222 "L4.ml" 232 8940 8961
type(
  'z ->
  'c ->
  ([ `Atom of 'c | `Interval of 'c * 'c ] list * 'd1 list) list ->
  'd1 list -> 'd1 Monad.List.t
)
type(
  'z ->
  'c ->
  ([ `Atom of 'c | `Interval of 'c * 'c ] list * 'd1 list) list ->
  'd1 list -> 'd1 Monad.List.t
)
"L4.ml" 218 8192 8210 "L4.ml" 232 8940 8961
type(
  < case : 'z ->
           'c ->
           ([ `Atom of 'c | `Interval of 'c * 'c ] list * 'd1 list) list ->
           'd1 list -> 'd1 Monad.List.t;
    forc : 'z -> 'c -> 'c -> 'c -> 'c option -> 'd1 list -> 'd1 Monad.List.t > ->
  'z ->
  'c ->
  ([ `Atom of 'c | `Interval of 'c * 'c ] list * 'd1 list) list ->
  'd1 list -> 'd1 Monad.List.t
)
"L4.ml" 233 8962 8992 "L4.ml" 233 8962 8993
type(
  'z
)
"L4.ml" 233 8962 8994 "L4.ml" 233 8962 8995
type(
  'c
)
ident(
  def i "L4.ml" 233 8962 8996 "L4.ml" 243 9456 9571
)
"L4.ml" 233 8962 8996 "L4.ml" 233 8962 8997
type(
  'c
)
ident(
  def l "L4.ml" 233 8962 8998 "L4.ml" 243 9456 9571
)
"L4.ml" 233 8962 8998 "L4.ml" 233 8962 8999
type(
  'c
)
ident(
  def u "L4.ml" 233 8962 9000 "L4.ml" 243 9456 9571
)
"L4.ml" 233 8962 9000 "L4.ml" 233 8962 9001
type(
  'c option
)
ident(
  def s "L4.ml" 233 8962 9002 "L4.ml" 243 9456 9571
)
"L4.ml" 233 8962 9002 "L4.ml" 233 8962 9003
type(
  'd1 list
)
ident(
  def b "L4.ml" 234 9006 9026 "L4.ml" 243 9456 9571
)
"L4.ml" 234 9006 9030 "L4.ml" 234 9006 9033
type(
  'a
)
ident(
  def upb "L4.ml" 235 9059 9079 "L4.ml" 243 9456 9571
)
"L4.ml" 234 9006 9036 "L4.ml" 234 9006 9041
type(
  'h
)
ident(
  int_ref namer "L4.ml" 202 7501 7515 "L4.ml" 202 7501 7520
)
"L4.ml" 234 9006 9036 "L4.ml" 234 9006 9049
call(
  stack
)
type(
  string -> 'a
)
"L4.ml" 234 9006 9050 "L4.ml" 234 9006 9055
type(
  string
)
"L4.ml" 234 9006 9036 "L4.ml" 234 9006 9055
type(
  'a
)
"L4.ml" 235 9059 9079 "L4.ml" 235 9059 9082
type(
  'a * 'y -> unit
)
ident(
  int_ref add "L4.ml" 213 7956 7966 "L4.ml" 213 7956 7969
)
"L4.ml" 235 9059 9084 "L4.ml" 235 9059 9087
type(
  'a
)
ident(
  int_ref upb "L4.ml" 234 9006 9030 "L4.ml" 234 9006 9033
)
"L4.ml" 235 9059 9089 "L4.ml" 235 9059 9093
type(
  'y
)
"L4.ml" 235 9059 9083 "L4.ml" 235 9059 9094
type(
  'a * 'y
)
"L4.ml" 235 9059 9079 "L4.ml" 235 9059 9094
call(
  stack
)
type(
  unit
)
"L4.ml" 236 9096 9120 "L4.ml" 236 9096 9121
type(
  string -> 'c
)
ident(
  def e "L4.ml" 242 9408 9428 "L4.ml" 243 9456 9571
)
"L4.ml" 236 9096 9123 "L4.ml" 236 9096 9124
type(
  string ->
  ([> `Assign of 'c * 'c
    | `If of ('c * 'i1 list) list * 'i1 list
    | `While of 'c * 'i1 list ]
   as 'i1)
)
ident(
  def s "L4.ml" 242 9408 9428 "L4.ml" 243 9456 9571
)
"L4.ml" 236 9096 9126 "L4.ml" 236 9096 9128
type(
  string ->
  ([> `Assign of 'c * 'c
    | `If of ('c * 'j1 list) list * 'j1 list
    | `While of 'c * 'j1 list ]
   as 'j1)
  list
)
ident(
  def ss "L4.ml" 242 9408 9428 "L4.ml" 243 9456 9571
)
"L4.ml" 236 9096 9120 "L4.ml" 236 9096 9128
type(
  (string -> 'c) * (string -> 'i1) * (string -> 'j1 list)
)
"L4.ml" 237 9132 9159 "L4.ml" 237 9132 9161
type(
  (string * 'c) list
)
ident(
  def qc "L4.ml" 237 9132 9165 "L4.ml" 237 9132 9185
)
"L4.ml" 237 9132 9165 "L4.ml" 237 9132 9167
type(
  (string * 'c) list -> string -> 'c
)
ident(
  int_ref qe "L4.ml" 211 7865 7875 "L4.ml" 211 7865 7877
)
"L4.ml" 237 9132 9168 "L4.ml" 237 9132 9170
type(
  (string * 'c) list
)
ident(
  int_ref qc "L4.ml" 237 9132 9159 "L4.ml" 237 9132 9161
)
"L4.ml" 237 9132 9165 "L4.ml" 237 9132 9170
call(
  stack
)
type(
  string -> 'c
)
"L4.ml" 237 9132 9172 "L4.ml" 237 9132 9174
type(
  (string * 'c) list -> string -> 'i1
)
ident(
  int_ref qs "L4.ml" 211 7865 7879 "L4.ml" 211 7865 7881
)
"L4.ml" 237 9132 9175 "L4.ml" 237 9132 9177
type(
  (string * 'c) list
)
ident(
  int_ref qc "L4.ml" 237 9132 9159 "L4.ml" 237 9132 9161
)
"L4.ml" 237 9132 9172 "L4.ml" 237 9132 9177
call(
  stack
)
type(
  string -> 'i1
)
"L4.ml" 237 9132 9179 "L4.ml" 237 9132 9182
type(
  (string * 'c) list -> string -> 'j1 list
)
ident(
  int_ref qss "L4.ml" 211 7865 7883 "L4.ml" 211 7865 7886
)
"L4.ml" 237 9132 9183 "L4.ml" 237 9132 9185
type(
  (string * 'c) list
)
ident(
  int_ref qc "L4.ml" 237 9132 9159 "L4.ml" 237 9132 9161
)
"L4.ml" 237 9132 9179 "L4.ml" 237 9132 9185
call(
  stack
)
type(
  string -> 'j1 list
)
"L4.ml" 237 9132 9165 "L4.ml" 237 9132 9185
type(
  (string -> 'c) * (string -> 'i1) * (string -> 'j1 list)
)
"L4.ml" 237 9132 9154 "L4.ml" 237 9132 9186
type(
  (string * 'c) list ->
  (string -> 'c) * (string -> 'i1) * (string -> 'j1 list)
)
"L4.ml" 238 9187 9210 "L4.ml" 238 9187 9213
type(
  string
)
"L4.ml" 238 9187 9215 "L4.ml" 238 9187 9216
type(
  'c
)
ident(
  int_ref i "L4.ml" 233 8962 8994 "L4.ml" 233 8962 8995
)
"L4.ml" 238 9187 9210 "L4.ml" 238 9187 9216
type(
  string * 'c
)
"L4.ml" 238 9187 9218 "L4.ml" 238 9187 9221
type(
  string
)
"L4.ml" 238 9187 9223 "L4.ml" 238 9187 9224
type(
  'c
)
ident(
  int_ref u "L4.ml" 233 8962 8998 "L4.ml" 233 8962 8999
)
"L4.ml" 238 9187 9218 "L4.ml" 238 9187 9224
type(
  string * 'c
)
"L4.ml" 238 9187 9226 "L4.ml" 238 9187 9229
type(
  string
)
"L4.ml" 238 9187 9231 "L4.ml" 238 9187 9232
type(
  'c
)
ident(
  int_ref l "L4.ml" 233 8962 8996 "L4.ml" 233 8962 8997
)
"L4.ml" 238 9187 9226 "L4.ml" 238 9187 9232
type(
  string * 'c
)
"L4.ml" 239 9234 9257 "L4.ml" 239 9234 9262
type(
  string
)
"L4.ml" 239 9234 9272 "L4.ml" 239 9234 9275
type(
  'a
)
ident(
  int_ref upb "L4.ml" 234 9006 9030 "L4.ml" 234 9006 9033
)
"L4.ml" 239 9234 9283 "L4.ml" 239 9234 9286
type(
  'a
)
ident(
  int_ref upb "L4.ml" 234 9006 9030 "L4.ml" 234 9006 9033
)
"L4.ml" 239 9234 9288 "L4.ml" 239 9234 9292
type(
  [> `Int ] as 'k1
)
"L4.ml" 239 9234 9282 "L4.ml" 239 9234 9294
type(
  'a * 'k1
)
"L4.ml" 239 9234 9277 "L4.ml" 239 9234 9294
type(
  [> `Var of 'a * 'k1 ] as 'l1
)
"L4.ml" 239 9234 9271 "L4.ml" 239 9234 9295
type(
  'a * 'l1
)
"L4.ml" 239 9234 9264 "L4.ml" 239 9234 9295
type(
  'c
)
"L4.ml" 239 9234 9257 "L4.ml" 239 9234 9295
type(
  string * 'c
)
"L4.ml" 240 9298 9321 "L4.ml" 240 9298 9324
type(
  string
)
"L4.ml" 240 9298 9334 "L4.ml" 240 9298 9335
type(
  'c option
)
ident(
  int_ref s "L4.ml" 233 8962 9000 "L4.ml" 233 8962 9001
)
"L4.ml" 240 9298 9341 "L4.ml" 240 9298 9345
type(
  'c option
)
"L4.ml" 240 9298 9366 "L4.ml" 240 9298 9367
type(
  int
)
"L4.ml" 240 9298 9356 "L4.ml" 240 9298 9368
type(
  [> `False | `Literal of int | `True ] as 'm1
)
"L4.ml" 240 9298 9349 "L4.ml" 240 9298 9368
type(
  'c
)
"L4.ml" 240 9298 9376 "L4.ml" 240 9298 9377
type(
  'c
)
ident(
  def s "L4.ml" 240 9298 9381 "L4.ml" 240 9298 9382
)
"L4.ml" 240 9298 9371 "L4.ml" 240 9298 9377
type(
  'c option
)
"L4.ml" 240 9298 9381 "L4.ml" 240 9298 9382
type(
  'c
)
ident(
  int_ref s "L4.ml" 240 9298 9376 "L4.ml" 240 9298 9377
)
"L4.ml" 240 9298 9328 "L4.ml" 240 9298 9382
type(
  'c
)
"L4.ml" 240 9298 9321 "L4.ml" 240 9298 9382
type(
  string * 'c
)
"L4.ml" 238 9187 9209 "L4.ml" 240 9298 9383
type(
  (string * 'c) list
)
type(
  (string * 'c) list
)
type(
  (string * 'c) list
)
type(
  (string * 'c) list
)
type(
  (string * 'c) list
)
type(
  (string * 'c) list
)
"L4.ml" 237 9132 9154 "L4.ml" 240 9298 9383
type(
  (string -> 'c) * (string -> 'i1) * (string -> 'j1 list)
)
"L4.ml" 242 9408 9428 "L4.ml" 242 9408 9430
type(
  string -> 'd1 list
)
ident(
  int_ref ss "L4.ml" 236 9096 9126 "L4.ml" 236 9096 9128
)
"L4.ml" 242 9408 9431 "L4.ml" 242 9408 9453
type(
  string
)
"L4.ml" 242 9408 9428 "L4.ml" 242 9408 9453
call(
  stack
)
type(
  'd1 list
)
"L4.ml" 243 9456 9485 "L4.ml" 243 9456 9486
type(
  string -> 'c
)
ident(
  int_ref e "L4.ml" 236 9096 9120 "L4.ml" 236 9096 9121
)
"L4.ml" 243 9456 9487 "L4.ml" 243 9456 9544
type(
  string
)
"L4.ml" 243 9456 9485 "L4.ml" 243 9456 9544
call(
  stack
)
type(
  'c
)
"L4.ml" 243 9456 9546 "L4.ml" 243 9456 9547
type(
  'd1 list
)
ident(
  int_ref b "L4.ml" 233 8962 9002 "L4.ml" 233 8962 9003
)
"L4.ml" 243 9456 9551 "L4.ml" 243 9456 9552
type(
  string -> 'd1
)
ident(
  int_ref s "L4.ml" 236 9096 9123 "L4.ml" 236 9096 9124
)
"L4.ml" 243 9456 9553 "L4.ml" 243 9456 9568
type(
  string
)
"L4.ml" 243 9456 9551 "L4.ml" 243 9456 9568
call(
  stack
)
type(
  'd1
)
"L4.ml" 243 9456 9550 "L4.ml" 243 9456 9569
type(
  'd1 list
)
type(
  'd1 list
)
"L4.ml" 243 9456 9546 "L4.ml" 243 9456 9569
call(
  stack
)
type(
  'd1 list
)
type(
  'd1 list -> 'd1 list -> 'd1 list
)
ident(
  ext_ref Pervasives.( @ )
)
"L4.ml" 243 9456 9484 "L4.ml" 243 9456 9570
type(
  'c * 'd1 list
)
"L4.ml" 243 9456 9477 "L4.ml" 243 9456 9570
type(
  'd1
)
"L4.ml" 243 9456 9476 "L4.ml" 243 9456 9571
type(
  'd1 list
)
type(
  'd1 list
)
"L4.ml" 242 9408 9428 "L4.ml" 243 9456 9571
call(
  tail
)
type(
  'd1 Monad.List.t
)
type(
  'd1 list -> 'd1 list -> 'd1 Monad.List.t
)
ident(
  ext_ref Pervasives.( @ )
)
"L4.ml" 236 9096 9116 "L4.ml" 243 9456 9571
type(
  'd1 Monad.List.t
)
"L4.ml" 235 9059 9079 "L4.ml" 243 9456 9571
type(
  'd1 Monad.List.t
)
"L4.ml" 234 9006 9026 "L4.ml" 243 9456 9571
type(
  'd1 Monad.List.t
)
"L4.ml" 233 8962 9002 "L4.ml" 243 9456 9571
type(
  'd1 list -> 'd1 Monad.List.t
)
"L4.ml" 233 8962 9000 "L4.ml" 243 9456 9571
type(
  'c option -> 'd1 list -> 'd1 Monad.List.t
)
"L4.ml" 233 8962 8998 "L4.ml" 243 9456 9571
type(
  'c -> 'c option -> 'd1 list -> 'd1 Monad.List.t
)
"L4.ml" 233 8962 8996 "L4.ml" 243 9456 9571
type(
  'c -> 'c -> 'c option -> 'd1 list -> 'd1 Monad.List.t
)
"L4.ml" 233 8962 8994 "L4.ml" 243 9456 9571
type(
  'c -> 'c -> 'c -> 'c option -> 'd1 list -> 'd1 Monad.List.t
)
"L4.ml" 233 8962 8992 "L4.ml" 243 9456 9571
type(
  'z -> 'c -> 'c -> 'c -> 'c option -> 'd1 list -> 'd1 Monad.List.t
)
type(
  'z -> 'c -> 'c -> 'c -> 'c option -> 'd1 list -> 'd1 Monad.List.t
)
"L4.ml" 233 8962 8980 "L4.ml" 243 9456 9571
type(
  < case : 'z ->
           'c ->
           ([ `Atom of 'c | `Interval of 'c * 'c ] list * 'd1 list) list ->
           'd1 list -> 'd1 Monad.List.t;
    forc : 'z -> 'c -> 'c -> 'c -> 'c option -> 'd1 list -> 'd1 Monad.List.t > ->
  'z -> 'c -> 'c -> 'c -> 'c option -> 'd1 list -> 'd1 Monad.List.t
)
"L4.ml" 217 8169 8184 "L4.ml" 244 9572 9592
type(
  < case : 'z ->
           'c ->
           ([ `Atom of 'c | `Interval of 'c * 'c ] list * 'd1 list) list ->
           'd1 list -> 'd1 Monad.List.t;
    forc : 'z -> 'c -> 'c -> 'c -> 'c option -> 'd1 list -> 'd1 Monad.List.t >
)
type(
  < case : 'z ->
           'c ->
           ([ `Atom of 'c | `Interval of 'c * 'c ] list * 'd1 list) list ->
           'd1 list -> 'd1 Monad.List.t;
    forc : 'z -> 'c -> 'c -> 'c -> 'c option -> 'd1 list -> 'd1 Monad.List.t >
)
"L4.ml" 245 9594 9610 "L4.ml" 245 9594 9627
type(
  'c -> 'c Monad.List.t
)
ident(
  ext_ref Monad.List.return
)
"L4.ml" 246 9629 9645 "L4.ml" 246 9629 9662
type(
  'c -> 'c Monad.List.t
)
ident(
  ext_ref Monad.List.return
)
"L4.ml" 247 9664 9680 "L4.ml" 247 9664 9697
type(
  'c -> 'c Monad.List.t
)
ident(
  ext_ref Monad.List.return
)
"L4.ml" 248 9699 9716 "L4.ml" 248 9699 9722
type(
  ('z -> 'd1 Monad.List.t) ->
  ('z -> 'd1 Monad.List.t) -> 'z -> 'd1 Monad.List.t
)
ident(
  ext_ref Common.return
)
"L4.ml" 248 9699 9740 "L4.ml" 248 9699 9741
type(
  'a1
)
ident(
  def p "L4.ml" 248 9699 9752 "L4.ml" 248 9699 9769
)
"L4.ml" 248 9699 9743 "L4.ml" 248 9699 9744
type(
  'b1
)
ident(
  def a "L4.ml" 248 9699 9752 "L4.ml" 248 9699 9769
)
"L4.ml" 248 9699 9746 "L4.ml" 248 9699 9747
type(
  'c1
)
ident(
  def z "L4.ml" 248 9699 9752 "L4.ml" 248 9699 9769
)
"L4.ml" 248 9699 9740 "L4.ml" 248 9699 9747
type(
  'a1 * 'b1 * 'c1
)
"L4.ml" 248 9699 9733 "L4.ml" 248 9699 9748
type(
  'z
)
"L4.ml" 248 9699 9760 "L4.ml" 248 9699 9761
type(
  'a1
)
ident(
  int_ref p "L4.ml" 248 9699 9740 "L4.ml" 248 9699 9741
)
"L4.ml" 248 9699 9763 "L4.ml" 248 9699 9764
type(
  'b1
)
ident(
  int_ref a "L4.ml" 248 9699 9743 "L4.ml" 248 9699 9744
)
"L4.ml" 248 9699 9766 "L4.ml" 248 9699 9767
type(
  'c1
)
ident(
  int_ref z "L4.ml" 248 9699 9746 "L4.ml" 248 9699 9747
)
"L4.ml" 248 9699 9759 "L4.ml" 248 9699 9768
type(
  'a1 * 'b1 * 'c1
)
"L4.ml" 248 9699 9753 "L4.ml" 248 9699 9768
type(
  'd1
)
"L4.ml" 248 9699 9752 "L4.ml" 248 9699 9769
type(
  'd1 list
)
type(
  'd1 Monad.List.t
)
"L4.ml" 248 9699 9772 "L4.ml" 248 9699 9773
type(
  'z
)
ident(
  def x "L4.ml" 248 9699 9777 "L4.ml" 248 9699 9783
)
"L4.ml" 248 9699 9777 "L4.ml" 248 9699 9781
type(
  'z -> 'd1 Monad.List.t
)
ident(
  int_ref self "L4.ml" 216 8143 8157 "L4.ml" 216 8143 8161
)
"L4.ml" 248 9699 9782 "L4.ml" 248 9699 9783
type(
  'z
)
ident(
  int_ref x "L4.ml" 248 9699 9772 "L4.ml" 248 9699 9773
)
"L4.ml" 248 9699 9777 "L4.ml" 248 9699 9783
call(
  tail
)
type(
  'd1 Monad.List.t
)
"L4.ml" 248 9699 9723 "L4.ml" 248 9699 9784
type(
  'z -> 'd1 Monad.List.t
)
"L4.ml" 248 9699 9715 "L4.ml" 248 9699 9785
call(
  stack
)
type(
  ('z -> 'd1 Monad.List.t) -> 'z -> 'd1 Monad.List.t
)
"L4.ml" 249 9786 9802 "L4.ml" 249 9786 9806
type(
  'z
)
ident(
  int_ref stmt "L4.ml" 216 8143 8162 "L4.ml" 216 8143 8166
)
"L4.ml" 217 8169 8177 "L4.ml" 249 9786 9806
call(
  tail
)
type(
  'd1 Monad.List.t
)
"L4.ml" 216 8143 8162 "L4.ml" 249 9786 9806
type(
  'z -> 'd1 Monad.List.t
)
"L4.ml" 216 8143 8157 "L4.ml" 249 9786 9806
type(
  ('z -> 'd1 Monad.List.t) -> 'z -> 'd1 Monad.List.t
)
"L4.ml" 251 9816 9822 "L4.ml" 251 9816 9828
type(
  < assign : 'b -> 'c -> 'c -> 'g Monad.List.t;
    ifc : 'b -> ('c * 'g list) list -> 'g list -> 'g Monad.List.t;
    whilec : 'b -> 'c -> 'g list -> 'g Monad.List.t > ->
  ('c -> 'c Monad.List.t) ->
  ('c -> 'c Monad.List.t) ->
  (('b -> 'g Monad.List.t) -> 'b -> 'g Monad.List.t) -> 'b -> 'g Monad.List.t
)
ident(
  ext_ref M.gmap
)
"L4.ml" 251 9816 9830 "L4.ml" 251 9816 9850
type(
  ('b -> 'g -> 'g Monad.List.t) ->
  < assign : 'b -> 'c -> 'c -> 'g Monad.List.t;
    ifc : 'b -> ('c * 'g list) list -> 'g list -> 'g Monad.List.t;
    whilec : 'b -> 'c -> 'g list -> 'g Monad.List.t >
)
ident(
  ext_ref SimpleStatement.mapT
)
"L4.ml" 251 9816 9856 "L4.ml" 251 9816 9857
type(
  'b
)
"L4.ml" 251 9816 9858 "L4.ml" 251 9816 9859
type(
  'g
)
ident(
  def s "L4.ml" 251 9816 9863 "L4.ml" 251 9816 9866
)
"L4.ml" 251 9816 9864 "L4.ml" 251 9816 9865
type(
  'g
)
ident(
  int_ref s "L4.ml" 251 9816 9858 "L4.ml" 251 9816 9859
)
"L4.ml" 251 9816 9863 "L4.ml" 251 9816 9866
type(
  'g list
)
type(
  'g Monad.List.t
)
"L4.ml" 251 9816 9858 "L4.ml" 251 9816 9866
type(
  'g -> 'g Monad.List.t
)
"L4.ml" 251 9816 9851 "L4.ml" 251 9816 9867
type(
  'b -> 'g -> 'g Monad.List.t
)
"L4.ml" 251 9816 9829 "L4.ml" 251 9816 9868
call(
  stack
)
type(
  < assign : 'b -> 'c -> 'c -> 'g Monad.List.t;
    ifc : 'b -> ('c * 'g list) list -> 'g list -> 'g Monad.List.t;
    whilec : 'b -> 'c -> 'g list -> 'g Monad.List.t >
)
"L4.ml" 251 9816 9869 "L4.ml" 251 9816 9886
type(
  'c -> 'c Monad.List.t
)
ident(
  ext_ref Monad.List.return
)
"L4.ml" 251 9816 9887 "L4.ml" 251 9816 9904
type(
  'c -> 'c Monad.List.t
)
ident(
  ext_ref Monad.List.return
)
"L4.ml" 251 9816 9905 "L4.ml" 251 9816 9908
type(
  ('b -> 'g Monad.List.t) -> 'b -> 'g Monad.List.t
)
ident(
  int_ref ext "L4.ml" 216 8143 8153 "L4.ml" 216 8143 8156
)
"L4.ml" 251 9816 9909 "L4.ml" 251 9816 9910
type(
  'b
)
ident(
  int_ref s "L4.ml" 202 7501 7521 "L4.ml" 202 7501 7522
)
"L4.ml" 251 9816 9822 "L4.ml" 251 9816 9910
call(
  stack
)
type(
  'g Monad.List.t
)
"L4.ml" 251 9816 9913 "L4.ml" 251 9816 9918
type(
  ('a list * 'y) list ref
)
ident(
  int_ref names "L4.ml" 212 7928 7938 "L4.ml" 212 7928 7943
)
"L4.ml" 251 9816 9912 "L4.ml" 251 9816 9918
type(
  ('a list * 'y) list
)
type(
  ('a list * 'y) list ref -> ('a list * 'y) list
)
ident(
  ext_ref Pervasives.( ! )
)
"L4.ml" 251 9816 9822 "L4.ml" 251 9816 9918
type(
  'g Monad.List.t * ('a list * 'y) list
)
"L4.ml" 216 8143 8149 "L4.ml" 251 9816 9918
type(
  'g Monad.List.t * ('a list * 'y) list
)
"L4.ml" 215 8081 8087 "L4.ml" 251 9816 9918
type(
  'g Monad.List.t * ('a list * 'y) list
)
"L4.ml" 214 8020 8026 "L4.ml" 251 9816 9918
type(
  'g Monad.List.t * ('a list * 'y) list
)
"L4.ml" 213 7956 7962 "L4.ml" 251 9816 9918
type(
  'g Monad.List.t * ('a list * 'y) list
)
"L4.ml" 212 7928 7934 "L4.ml" 251 9816 9918
type(
  'g Monad.List.t * ('a list * 'y) list
)
"L4.ml" 211 7865 7871 "L4.ml" 251 9816 9918
type(
  'g Monad.List.t * ('a list * 'y) list
)
"L4.ml" 210 7765 7771 "L4.ml" 251 9816 9918
type(
  'g Monad.List.t * ('a list * 'y) list
)
"L4.ml" 203 7525 7531 "L4.ml" 251 9816 9918
type(
  'g Monad.List.t * ('a list * 'y) list
)
"L4.ml" 202 7501 7521 "L4.ml" 251 9816 9918
type(
  'b -> 'g Monad.List.t * ('a list * 'y) list
)
"L4.ml" 202 7501 7515 "L4.ml" 251 9816 9918
type(
  'h -> 'b -> 'g Monad.List.t * ('a list * 'y) list
)
"L4.ml" 253 9920 9928 "L4.ml" 253 9920 9935
type(
  ('n1 *
   (('p1 * 'q1 * ('r1 list * ([> `Int ] as 's1)) list) *
    ('t1 * 'u1 * 'o1 *
     ([> `Assign of
           ([> `Binop of
                 [> `Add
                  | `And
                  | `Div
                  | `Eq
                  | `Ge
                  | `Gt
                  | `Le
                  | `Lt
                  | `Mod
                  | `Mul
                  | `Ne
                  | `Or
                  | `Sub ] *
                 'w1 * 'w1
             | `Const of [> `False | `Literal of int | `True ]
             | `Ident of 'r1 * [> `Var of 'r1 * [> `Int ] ]
             | `Unop of [> `Neg | `Not ] * 'w1 ]
            as 'w1) *
           'w1
       | `Call of 'x1 * 'y1 * 'z1
       | `Case of
           'w1 *
           ([< `Atom of 'w1 | `Interval of 'w1 * 'w1 ] list * 'v1 list) list *
           'v1 list
       | `For of 'w1 * 'w1 * 'w1 * 'w1 option * 'v1 list
       | `If of ('w1 * 'v1 list) list * 'v1 list
       | `While of 'w1 * 'v1 list ]
      as 'v1)
     list)
    list as 'o1) *
   ([> `Assign of
         ([> `Binop of
               [> `Add
                | `And
                | `Div
                | `Eq
                | `Ge
                | `Gt
                | `Le
                | `Lt
                | `Mod
                | `Mul
                | `Ne
                | `Or
                | `Sub ] *
               'b2 * 'b2
           | `Const of [> `False | `Literal of int | `True ]
           | `Ident of 'r1 * [> `Var of 'r1 * [> `Int ] ]
           | `Unop of [> `Neg | `Not ] * 'b2 ]
          as 'b2) *
         'b2
     | `Call of 'c2 * 'd2 * 'e2
     | `Case of
         'b2 *
         ([< `Atom of 'b2 | `Interval of 'b2 * 'b2 ] list * 'a2 list) list *
         'a2 list
     | `For of 'b2 * 'b2 * 'b2 * 'b2 option * 'a2 list
     | `If of ('b2 * 'a2 list) list * 'a2 list
     | `While of 'b2 * 'a2 list ]
    as 'a2)
   list) *
  < getName : string -> 'r1; .. > ->
  'n1 *
  (('p1 * 'q1 * ('r1 list * 's1) list) *
   (('t1 * 'u1 * (('p1 * 'q1 * ('r1 list * 's1) list) * 'f2) *
     ([> `Assign of 'w1 * 'w1
       | `Call of 'x1 * 'y1 * 'z1
       | `If of ('w1 * 'g2 list) list * 'g2 list
       | `While of 'w1 * 'g2 list ]
      as 'g2)
     list)
    list as 'f2)) *
  ([> `Assign of 'b2 * 'b2
    | `Call of 'c2 * 'd2 * 'e2
    | `If of ('b2 * 'h2 list) list * 'h2 list
    | `While of 'b2 * 'h2 list ]
   as 'h2)
  list
)
ident(
  def program "L4.ml" 269 10533 10576 "L4.ml" 271 10584 10589
)
"L4.ml" 253 9920 9938 "L4.ml" 253 9920 9942
type(
  'n1
)
ident(
  def name "L4.ml" 254 9968 9974 "L4.ml" 269 10533 10576
)
"L4.ml" 253 9920 9944 "L4.ml" 253 9920 9949
type(
  'o1
)
ident(
  def decls "L4.ml" 254 9968 9974 "L4.ml" 269 10533 10576
)
"L4.ml" 253 9920 9951 "L4.ml" 253 9920 9956
type(
  'a2 list
)
ident(
  def stmts "L4.ml" 254 9968 9974 "L4.ml" 269 10533 10576
)
"L4.ml" 253 9920 9938 "L4.ml" 253 9920 9956
type(
  'n1 * 'o1 * 'a2 list
)
"L4.ml" 253 9920 9959 "L4.ml" 253 9920 9964
type(
  < getName : string -> 'r1; .. > as 'i2
)
ident(
  def namer "L4.ml" 254 9968 9974 "L4.ml" 269 10533 10576
)
"L4.ml" 253 9920 9937 "L4.ml" 253 9920 9964
type(
  ('n1 * 'o1 * 'a2 list) * 'i2
)
"L4.ml" 254 9968 9978 "L4.ml" 254 9968 9988
type(
  ([> `Assign of
        ([> `Binop of
              [> `Add
               | `And
               | `Div
               | `Eq
               | `Ge
               | `Gt
               | `Le
               | `Lt
               | `Mod
               | `Mul
               | `Ne
               | `Or
               | `Sub ] *
              'k2 * 'k2
          | `Const of [> `False | `Literal of int | `True ]
          | `Ident of 'r1 * [> `Var of 'r1 * [> `Int ] ]
          | `Unop of [> `Neg | `Not ] * 'k2 ]
         as 'k2) *
        'k2
    | `Call of 'l2 * 'm2 * 'n2
    | `Case of
        'k2 *
        ([< `Atom of 'k2 | `Interval of 'k2 * 'k2 ] list * 'j2 list) list *
        'j2 list
    | `For of 'k2 * 'k2 * 'k2 * 'k2 option * 'j2 list
    | `If of ('k2 * 'j2 list) list * 'j2 list
    | `While of 'k2 * 'j2 list ]
   as 'j2)
  list ->
  ([> `Assign of 'k2 * 'k2
    | `Call of 'l2 * 'm2 * 'n2
    | `If of ('k2 * 'o2 list) list * 'o2 list
    | `While of 'k2 * 'o2 list ]
   as 'o2)
  list * ('r1 list * [> `Int ]) list
)
ident(
  def statements "L4.ml" 258 10112 10118 "L4.ml" 269 10533 10576
)
"L4.ml" 254 9968 9989 "L4.ml" 254 9968 9994
type(
  'j2 list
)
ident(
  def stmts "L4.ml" 255 9997 10005 "L4.ml" 256 10059 10095
)
"L4.ml" 255 9997 10009 "L4.ml" 255 9997 10014
type(
  ([> `Assign of 'k2 * 'k2
    | `Call of 'l2 * 'm2 * 'n2
    | `If of ('k2 * 'p2 list) list * 'p2 list
    | `While of 'k2 * 'p2 list ]
   as 'p2)
  Monad.List.t list
)
ident(
  def stmts "L4.ml" 256 10059 10067 "L4.ml" 256 10059 10095
)
"L4.ml" 255 9997 10016 "L4.ml" 255 9997 10021
type(
  ('r1 list * [> `Int ]) list list
)
ident(
  def names "L4.ml" 256 10059 10067 "L4.ml" 256 10059 10095
)
"L4.ml" 255 9997 10009 "L4.ml" 255 9997 10021
type(
  'p2 Monad.List.t list * ('r1 list * ([> `Int ] as 'q2)) list list
)
"L4.ml" 255 9997 10024 "L4.ml" 255 9997 10029
type(
  ('p2 Monad.List.t * ('r1 list * 'q2) list) list ->
  'p2 Monad.List.t list * ('r1 list * 'q2) list list
)
ident(
  ext_ref List.split
)
"L4.ml" 255 9997 10031 "L4.ml" 255 9997 10034
type(
  ('j2 -> 'p2 Monad.List.t * ('r1 list * 'q2) list) ->
  'j2 list -> ('p2 Monad.List.t * ('r1 list * 'q2) list) list
)
ident(
  ext_ref List.map
)
"L4.ml" 255 9997 10036 "L4.ml" 255 9997 10041
type(
  'i2 -> 'j2 -> 'p2 Monad.List.t * ('r1 list * 'q2) list
)
ident(
  int_ref lower "L4.ml" 202 7501 7509 "L4.ml" 202 7501 7514
)
"L4.ml" 255 9997 10042 "L4.ml" 255 9997 10047
type(
  'i2
)
ident(
  int_ref namer "L4.ml" 253 9920 9959 "L4.ml" 253 9920 9964
)
"L4.ml" 255 9997 10035 "L4.ml" 255 9997 10048
call(
  stack
)
type(
  'j2 -> 'p2 Monad.List.t * ('r1 list * 'q2) list
)
"L4.ml" 255 9997 10049 "L4.ml" 255 9997 10054
type(
  'j2 list
)
ident(
  int_ref stmts "L4.ml" 254 9968 9989 "L4.ml" 254 9968 9994
)
"L4.ml" 255 9997 10030 "L4.ml" 255 9997 10055
call(
  stack
)
type(
  ('p2 Monad.List.t * ('r1 list * 'q2) list) list
)
"L4.ml" 255 9997 10024 "L4.ml" 255 9997 10055
call(
  stack
)
type(
  'p2 Monad.List.t list * ('r1 list * 'q2) list list
)
"L4.ml" 256 10059 10067 "L4.ml" 256 10059 10074
type(
  'o2 Monad.List.t list -> 'o2 list
)
ident(
  ext_ref List.flatten
)
"L4.ml" 256 10059 10075 "L4.ml" 256 10059 10080
type(
  'o2 Monad.List.t list
)
ident(
  int_ref stmts "L4.ml" 255 9997 10009 "L4.ml" 255 9997 10014
)
"L4.ml" 256 10059 10067 "L4.ml" 256 10059 10080
call(
  stack
)
type(
  'o2 list
)
"L4.ml" 256 10059 10082 "L4.ml" 256 10059 10089
type(
  ('r1 list * ([> `Int ] as 'r2)) list list -> ('r1 list * 'r2) list
)
ident(
  ext_ref List.flatten
)
"L4.ml" 256 10059 10090 "L4.ml" 256 10059 10095
type(
  ('r1 list * 'r2) list list
)
ident(
  int_ref names "L4.ml" 255 9997 10016 "L4.ml" 255 9997 10021
)
"L4.ml" 256 10059 10082 "L4.ml" 256 10059 10095
call(
  stack
)
type(
  ('r1 list * 'r2) list
)
"L4.ml" 256 10059 10067 "L4.ml" 256 10059 10095
type(
  'o2 list * ('r1 list * 'r2) list
)
"L4.ml" 255 9997 10005 "L4.ml" 256 10059 10095
type(
  'o2 list * ('r1 list * 'r2) list
)
"L4.ml" 254 9968 9989 "L4.ml" 256 10059 10095
type(
  'j2 list -> 'o2 list * ('r1 list * 'r2) list
)
"L4.ml" 258 10112 10126 "L4.ml" 258 10112 10138
type(
  (('t2 * 'u2 * ('r1 list * ([> `Int ] as 'v2)) list) *
   ('w2 * 'x2 * 's2 *
    ([> `Assign of
          ([> `Binop of
                [> `Add
                 | `And
                 | `Div
                 | `Eq
                 | `Ge
                 | `Gt
                 | `Le
                 | `Lt
                 | `Mod
                 | `Mul
                 | `Ne
                 | `Or
                 | `Sub ] *
                'z2 * 'z2
            | `Const of [> `False | `Literal of int | `True ]
            | `Ident of 'r1 * [> `Var of 'r1 * [> `Int ] ]
            | `Unop of [> `Neg | `Not ] * 'z2 ]
           as 'z2) *
          'z2
      | `Call of 'a3 * 'b3 * 'c3
      | `Case of
          'z2 *
          ([< `Atom of 'z2 | `Interval of 'z2 * 'z2 ] list * 'y2 list) list *
          'y2 list
      | `For of 'z2 * 'z2 * 'z2 * 'z2 option * 'y2 list
      | `If of ('z2 * 'y2 list) list * 'y2 list
      | `While of 'z2 * 'y2 list ]
     as 'y2)
    list)
   list as 's2) ->
  ('t2 * 'u2 * ('r1 list * 'v2) list) *
  (('w2 * 'x2 * (('t2 * 'u2 * ('r1 list * 'v2) list) * 'd3) *
    ([> `Assign of 'z2 * 'z2
      | `Call of 'a3 * 'b3 * 'c3
      | `If of ('z2 * 'e3 list) list * 'e3 list
      | `While of 'z2 * 'e3 list ]
     as 'e3)
    list)
   list as 'd3)
)
ident(
  def declarations "L4.ml" 258 10112 10118 "L4.ml" 269 10533 10576
)
"L4.ml" 258 10112 10141 "L4.ml" 258 10112 10142
type(
  't2
)
ident(
  def c "L4.ml" 259 10156 10164 "L4.ml" 265 10419 10428
)
"L4.ml" 258 10112 10144 "L4.ml" 258 10112 10145
type(
  'u2
)
ident(
  def t "L4.ml" 259 10156 10164 "L4.ml" 265 10419 10428
)
"L4.ml" 258 10112 10147 "L4.ml" 258 10112 10148
type(
  ('r1 list * 'v2) list
)
ident(
  def v "L4.ml" 259 10156 10164 "L4.ml" 265 10419 10428
)
"L4.ml" 258 10112 10141 "L4.ml" 258 10112 10148
type(
  't2 * 'u2 * ('r1 list * 'v2) list
)
"L4.ml" 258 10112 10151 "L4.ml" 258 10112 10152
type(
  ('w2 * 'x2 * 's2 * 'y2 list) list as 'f3
)
ident(
  def p "L4.ml" 259 10156 10164 "L4.ml" 265 10419 10428
)
"L4.ml" 258 10112 10140 "L4.ml" 258 10112 10152
type(
  's2
)
"L4.ml" 259 10156 10166 "L4.ml" 259 10156 10167
type(
  't2
)
ident(
  int_ref c "L4.ml" 258 10112 10141 "L4.ml" 258 10112 10142
)
"L4.ml" 259 10156 10169 "L4.ml" 259 10156 10170
type(
  'u2
)
ident(
  int_ref t "L4.ml" 258 10112 10144 "L4.ml" 258 10112 10145
)
"L4.ml" 259 10156 10172 "L4.ml" 259 10156 10173
type(
  ('r1 list * 'v2) list
)
ident(
  int_ref v "L4.ml" 258 10112 10147 "L4.ml" 258 10112 10148
)
"L4.ml" 259 10156 10165 "L4.ml" 259 10156 10174
type(
  't2 * 'u2 * ('r1 list * 'v2) list
)
"L4.ml" 260 10177 10186 "L4.ml" 260 10177 10189
type(
  (('w2 * 'x2 * 's2 * 'y2 list as 'g3) ->
   ('w2 * 'x2 * (('t2 * 'u2 * ('r1 list * 'v2) list) * 'd3) * 'e3 list as 'h3)) ->
  'f3 -> 'd3
)
ident(
  ext_ref List.map
)
"L4.ml" 260 10177 10196 "L4.ml" 260 10177 10200
type(
  'w2
)
ident(
  def name "L4.ml" 261 10225 10241 "L4.ml" 263 10341 10400
)
"L4.ml" 260 10177 10202 "L4.ml" 260 10177 10206
type(
  'x2
)
ident(
  def args "L4.ml" 261 10225 10241 "L4.ml" 263 10341 10400
)
"L4.ml" 260 10177 10208 "L4.ml" 260 10177 10213
type(
  's2
)
ident(
  def decls "L4.ml" 261 10225 10241 "L4.ml" 263 10341 10400
)
"L4.ml" 260 10177 10215 "L4.ml" 260 10177 10220
type(
  'y2 list
)
ident(
  def stmts "L4.ml" 261 10225 10241 "L4.ml" 263 10341 10400
)
"L4.ml" 260 10177 10196 "L4.ml" 260 10177 10220
type(
  'g3
)
"L4.ml" 261 10225 10247 "L4.ml" 261 10225 10248
type(
  't2
)
ident(
  def c "L4.ml" 262 10285 10301 "L4.ml" 263 10341 10400
)
"L4.ml" 261 10225 10250 "L4.ml" 261 10225 10251
type(
  'u2
)
ident(
  def t "L4.ml" 262 10285 10301 "L4.ml" 263 10341 10400
)
"L4.ml" 261 10225 10253 "L4.ml" 261 10225 10254
type(
  ('r1 list * 'v2) list
)
ident(
  def v "L4.ml" 262 10285 10301 "L4.ml" 263 10341 10400
)
"L4.ml" 261 10225 10247 "L4.ml" 261 10225 10254
type(
  't2 * 'u2 * ('r1 list * 'v2) list
)
"L4.ml" 261 10225 10257 "L4.ml" 261 10225 10258
type(
  'd3
)
ident(
  def p "L4.ml" 262 10285 10301 "L4.ml" 263 10341 10400
)
"L4.ml" 261 10225 10246 "L4.ml" 261 10225 10258
type(
  ('t2 * 'u2 * ('r1 list * 'v2) list) * 'd3
)
"L4.ml" 261 10225 10262 "L4.ml" 261 10225 10274
type(
  's2 -> ('t2 * 'u2 * ('r1 list * 'v2) list) * 'd3
)
ident(
  int_ref declarations "L4.ml" 258 10112 10126 "L4.ml" 258 10112 10138
)
"L4.ml" 261 10225 10275 "L4.ml" 261 10225 10280
type(
  's2
)
ident(
  int_ref decls "L4.ml" 260 10177 10208 "L4.ml" 260 10177 10213
)
"L4.ml" 261 10225 10262 "L4.ml" 261 10225 10280
call(
  stack
)
type(
  ('t2 * 'u2 * ('r1 list * 'v2) list) * 'd3
)
"L4.ml" 262 10285 10305 "L4.ml" 262 10285 10310
type(
  ([> `Assign of 'z2 * 'z2
    | `Call of 'a3 * 'b3 * 'c3
    | `If of ('z2 * 'i3 list) list * 'i3 list
    | `While of 'z2 * 'i3 list ]
   as 'i3)
  list
)
ident(
  def stmts "L4.ml" 263 10341 10357 "L4.ml" 263 10341 10400
)
"L4.ml" 262 10285 10312 "L4.ml" 262 10285 10317
type(
  ('r1 list * [> `Int ]) list
)
ident(
  def names "L4.ml" 263 10341 10357 "L4.ml" 263 10341 10400
)
"L4.ml" 262 10285 10305 "L4.ml" 262 10285 10317
type(
  'i3 list * ('r1 list * ([> `Int ] as 'j3)) list
)
"L4.ml" 262 10285 10320 "L4.ml" 262 10285 10330
type(
  'y2 list -> 'i3 list * ('r1 list * 'j3) list
)
ident(
  int_ref statements "L4.ml" 254 9968 9978 "L4.ml" 254 9968 9988
)
"L4.ml" 262 10285 10331 "L4.ml" 262 10285 10336
type(
  'y2 list
)
ident(
  int_ref stmts "L4.ml" 260 10177 10215 "L4.ml" 260 10177 10220
)
"L4.ml" 262 10285 10320 "L4.ml" 262 10285 10336
call(
  stack
)
type(
  'i3 list * ('r1 list * 'j3) list
)
"L4.ml" 263 10341 10358 "L4.ml" 263 10341 10362
type(
  'w2
)
ident(
  int_ref name "L4.ml" 260 10177 10196 "L4.ml" 260 10177 10200
)
"L4.ml" 263 10341 10364 "L4.ml" 263 10341 10368
type(
  'x2
)
ident(
  int_ref args "L4.ml" 260 10177 10202 "L4.ml" 260 10177 10206
)
"L4.ml" 263 10341 10372 "L4.ml" 263 10341 10373
type(
  't2
)
ident(
  int_ref c "L4.ml" 261 10225 10247 "L4.ml" 261 10225 10248
)
"L4.ml" 263 10341 10375 "L4.ml" 263 10341 10376
type(
  'u2
)
ident(
  int_ref t "L4.ml" 261 10225 10250 "L4.ml" 261 10225 10251
)
"L4.ml" 263 10341 10378 "L4.ml" 263 10341 10379
type(
  ('r1 list * 'v2) list
)
ident(
  int_ref v "L4.ml" 261 10225 10253 "L4.ml" 261 10225 10254
)
"L4.ml" 263 10341 10382 "L4.ml" 263 10341 10387
type(
  ('r1 list * 'v2) list
)
ident(
  int_ref names "L4.ml" 262 10285 10312 "L4.ml" 262 10285 10317
)
"L4.ml" 263 10341 10378 "L4.ml" 263 10341 10387
call(
  stack
)
type(
  ('r1 list * 'v2) list
)
type(
  ('r1 list * 'v2) list -> ('r1 list * 'v2) list -> ('r1 list * 'v2) list
)
ident(
  ext_ref Pervasives.( @ )
)
"L4.ml" 263 10341 10371 "L4.ml" 263 10341 10388
type(
  't2 * 'u2 * ('r1 list * 'v2) list
)
"L4.ml" 263 10341 10390 "L4.ml" 263 10341 10391
type(
  'd3
)
ident(
  int_ref p "L4.ml" 261 10225 10257 "L4.ml" 261 10225 10258
)
"L4.ml" 263 10341 10370 "L4.ml" 263 10341 10392
type(
  ('t2 * 'u2 * ('r1 list * 'v2) list) * 'd3
)
"L4.ml" 263 10341 10394 "L4.ml" 263 10341 10399
type(
  'e3 list
)
ident(
  int_ref stmts "L4.ml" 262 10285 10305 "L4.ml" 262 10285 10310
)
"L4.ml" 263 10341 10357 "L4.ml" 263 10341 10400
type(
  'w2 * 'x2 * (('t2 * 'u2 * ('r1 list * 'v2) list) * 'd3) * 'e3 list
)
"L4.ml" 262 10285 10301 "L4.ml" 263 10341 10400
type(
  'w2 * 'x2 * (('t2 * 'u2 * ('r1 list * 'v2) list) * 'd3) * 'e3 list
)
"L4.ml" 261 10225 10241 "L4.ml" 263 10341 10400
type(
  'w2 * 'x2 * (('t2 * 'u2 * ('r1 list * 'v2) list) * 'd3) * 'e3 list
)
"L4.ml" 260 10177 10190 "L4.ml" 264 10402 10416
type(
  'g3 -> 'h3
)
"L4.ml" 264 10402 10417 "L4.ml" 264 10402 10418
type(
  'f3
)
ident(
  int_ref p "L4.ml" 258 10112 10151 "L4.ml" 258 10112 10152
)
"L4.ml" 260 10177 10186 "L4.ml" 264 10402 10418
call(
  stack
)
type(
  'd3
)
"L4.ml" 259 10156 10164 "L4.ml" 265 10419 10428
type(
  ('t2 * 'u2 * ('r1 list * 'v2) list) * 'd3
)
"L4.ml" 258 10112 10139 "L4.ml" 265 10419 10428
type(
  's2 -> ('t2 * 'u2 * ('r1 list * 'v2) list) * 'd3
)
"L4.ml" 267 10439 10451 "L4.ml" 267 10439 10452
type(
  'p1
)
ident(
  def c "L4.ml" 268 10488 10494 "L4.ml" 269 10533 10576
)
"L4.ml" 267 10439 10454 "L4.ml" 267 10439 10455
type(
  'q1
)
ident(
  def t "L4.ml" 268 10488 10494 "L4.ml" 269 10533 10576
)
"L4.ml" 267 10439 10457 "L4.ml" 267 10439 10458
type(
  ('r1 list * 's1) list
)
ident(
  def v "L4.ml" 268 10488 10494 "L4.ml" 269 10533 10576
)
"L4.ml" 267 10439 10451 "L4.ml" 267 10439 10458
type(
  'p1 * 'q1 * ('r1 list * 's1) list
)
"L4.ml" 267 10439 10461 "L4.ml" 267 10439 10462
type(
  ('t1 * 'u1 * (('p1 * 'q1 * ('r1 list * 's1) list) * 'k3) *
   ([> `Assign of 'w1 * 'w1
     | `Call of 'x1 * 'y1 * 'z1
     | `If of ('w1 * 'l3 list) list * 'l3 list
     | `While of 'w1 * 'l3 list ]
    as 'l3)
   list)
  list as 'k3
)
ident(
  def p "L4.ml" 268 10488 10494 "L4.ml" 269 10533 10576
)
"L4.ml" 267 10439 10450 "L4.ml" 267 10439 10462
type(
  ('p1 * 'q1 * ('r1 list * 's1) list) * 'k3
)
"L4.ml" 267 10439 10466 "L4.ml" 267 10439 10478
type(
  'o1 -> ('p1 * 'q1 * ('r1 list * 's1) list) * 'k3
)
ident(
  int_ref declarations "L4.ml" 258 10112 10126 "L4.ml" 258 10112 10138
)
"L4.ml" 267 10439 10479 "L4.ml" 267 10439 10484
type(
  'o1
)
ident(
  int_ref decls "L4.ml" 253 9920 9944 "L4.ml" 253 9920 9949
)
"L4.ml" 267 10439 10466 "L4.ml" 267 10439 10484
call(
  stack
)
type(
  ('p1 * 'q1 * ('r1 list * 's1) list) * 'k3
)
"L4.ml" 268 10488 10498 "L4.ml" 268 10488 10503
type(
  ([> `Assign of 'b2 * 'b2
    | `Call of 'c2 * 'd2 * 'e2
    | `If of ('b2 * 'm3 list) list * 'm3 list
    | `While of 'b2 * 'm3 list ]
   as 'm3)
  list
)
ident(
  def stmts "L4.ml" 269 10533 10539 "L4.ml" 269 10533 10576
)
"L4.ml" 268 10488 10505 "L4.ml" 268 10488 10510
type(
  ('r1 list * [> `Int ]) list
)
ident(
  def names "L4.ml" 269 10533 10539 "L4.ml" 269 10533 10576
)
"L4.ml" 268 10488 10498 "L4.ml" 268 10488 10510
type(
  'm3 list * ('r1 list * ([> `Int ] as 'n3)) list
)
"L4.ml" 268 10488 10513 "L4.ml" 268 10488 10523
type(
  'a2 list -> 'm3 list * ('r1 list * 'n3) list
)
ident(
  int_ref statements "L4.ml" 254 9968 9978 "L4.ml" 254 9968 9988
)
"L4.ml" 268 10488 10524 "L4.ml" 268 10488 10529
type(
  'a2 list
)
ident(
  int_ref stmts "L4.ml" 253 9920 9951 "L4.ml" 253 9920 9956
)
"L4.ml" 268 10488 10513 "L4.ml" 268 10488 10529
call(
  stack
)
type(
  'm3 list * ('r1 list * 'n3) list
)
"L4.ml" 269 10533 10540 "L4.ml" 269 10533 10544
type(
  'n1
)
ident(
  int_ref name "L4.ml" 253 9920 9938 "L4.ml" 253 9920 9942
)
"L4.ml" 269 10533 10548 "L4.ml" 269 10533 10549
type(
  'p1
)
ident(
  int_ref c "L4.ml" 267 10439 10451 "L4.ml" 267 10439 10452
)
"L4.ml" 269 10533 10551 "L4.ml" 269 10533 10552
type(
  'q1
)
ident(
  int_ref t "L4.ml" 267 10439 10454 "L4.ml" 267 10439 10455
)
"L4.ml" 269 10533 10554 "L4.ml" 269 10533 10555
type(
  ('r1 list * 's1) list
)
ident(
  int_ref v "L4.ml" 267 10439 10457 "L4.ml" 267 10439 10458
)
"L4.ml" 269 10533 10558 "L4.ml" 269 10533 10563
type(
  ('r1 list * 's1) list
)
ident(
  int_ref names "L4.ml" 268 10488 10505 "L4.ml" 268 10488 10510
)
"L4.ml" 269 10533 10554 "L4.ml" 269 10533 10563
call(
  stack
)
type(
  ('r1 list * 's1) list
)
type(
  ('r1 list * 's1) list -> ('r1 list * 's1) list -> ('r1 list * 's1) list
)
ident(
  ext_ref Pervasives.( @ )
)
"L4.ml" 269 10533 10547 "L4.ml" 269 10533 10564
type(
  'p1 * 'q1 * ('r1 list * 's1) list
)
"L4.ml" 269 10533 10566 "L4.ml" 269 10533 10567
type(
  'f2
)
ident(
  int_ref p "L4.ml" 267 10439 10461 "L4.ml" 267 10439 10462
)
"L4.ml" 269 10533 10546 "L4.ml" 269 10533 10568
type(
  ('p1 * 'q1 * ('r1 list * 's1) list) * 'f2
)
"L4.ml" 269 10533 10570 "L4.ml" 269 10533 10575
type(
  'h2 list
)
ident(
  int_ref stmts "L4.ml" 268 10488 10498 "L4.ml" 268 10488 10503
)
"L4.ml" 269 10533 10539 "L4.ml" 269 10533 10576
type(
  'n1 * (('p1 * 'q1 * ('r1 list * 's1) list) * 'f2) * 'h2 list
)
"L4.ml" 268 10488 10494 "L4.ml" 269 10533 10576
type(
  'n1 * (('p1 * 'q1 * ('r1 list * 's1) list) * 'f2) * 'h2 list
)
"L4.ml" 267 10439 10445 "L4.ml" 269 10533 10576
type(
  'n1 * (('p1 * 'q1 * ('r1 list * 's1) list) * 'f2) * 'h2 list
)
"L4.ml" 258 10112 10118 "L4.ml" 269 10533 10576
type(
  'n1 * (('p1 * 'q1 * ('r1 list * 's1) list) * 'f2) * 'h2 list
)
"L4.ml" 254 9968 9974 "L4.ml" 269 10533 10576
type(
  'n1 * (('p1 * 'q1 * ('r1 list * 's1) list) * 'f2) * 'h2 list
)
"L4.ml" 253 9920 9936 "L4.ml" 269 10533 10576
type(
  ('n1 * 'o1 * 'a2 list) * 'i2 ->
  'n1 * (('p1 * 'q1 * ('r1 list * 's1) list) * 'f2) * 'h2 list
)
"L4.ml" 278 10705 10713 "L4.ml" 278 10705 10718
type(
  'a * (('c * 'd list * 'e) * ('f * 'g * 'b * 'h) list as 'b) * 'i ->
  'a *
  (('c * 'd list * 'e) *
   (('f * 'g * (('c * 'k list * 'e) * 'j) * 'h) list as 'j)) *
  'i
)
ident(
  def types "L4.ml" 294 11186 11190 "L4.ml" 310 11671 11676
)
"L4.ml" 278 10705 10720 "L4.ml" 278 10705 10724
type(
  'a
)
ident(
  def name "L4.ml" 279 10738 10744 "L4.ml" 292 11140 11184
)
"L4.ml" 278 10705 10726 "L4.ml" 278 10705 10727
type(
  'b
)
ident(
  def d "L4.ml" 279 10738 10744 "L4.ml" 292 11140 11184
)
"L4.ml" 278 10705 10729 "L4.ml" 278 10705 10734
type(
  'i
)
ident(
  def stmts "L4.ml" 279 10738 10744 "L4.ml" 292 11140 11184
)
"L4.ml" 278 10705 10720 "L4.ml" 278 10705 10734
type(
  'a * 'b * 'i
)
"L4.ml" 279 10738 10752 "L4.ml" 279 10738 10757
type(
  'l list ->
  (('n * 'l list * 'o) * ('p * 'q * 'm * 'r) list as 'm) ->
  'l list * (('n * 't list * 'o) * ('p * 'q * 's * 'r) list as 's)
)
ident(
  def decls "L4.ml" 279 10738 10744 "L4.ml" 292 11140 11184
)
"L4.ml" 279 10738 10758 "L4.ml" 279 10738 10761
type(
  'l list
)
ident(
  def acc "L4.ml" 279 10738 10762 "L4.ml" 289 11054 11081
)
"L4.ml" 279 10738 10764 "L4.ml" 279 10738 10765
type(
  'n
)
ident(
  def c "L4.ml" 280 10780 10788 "L4.ml" 289 11054 11081
)
"L4.ml" 279 10738 10767 "L4.ml" 279 10738 10768
type(
  'l list
)
ident(
  def t "L4.ml" 280 10780 10788 "L4.ml" 289 11054 11081
)
"L4.ml" 279 10738 10770 "L4.ml" 279 10738 10771
type(
  'o
)
ident(
  def v "L4.ml" 280 10780 10788 "L4.ml" 289 11054 11081
)
"L4.ml" 279 10738 10764 "L4.ml" 279 10738 10771
type(
  'n * 'l list * 'o
)
"L4.ml" 279 10738 10774 "L4.ml" 279 10738 10775
type(
  ('p * 'q * 'm * 'r) list as 'u
)
ident(
  def p "L4.ml" 280 10780 10788 "L4.ml" 289 11054 11081
)
"L4.ml" 279 10738 10763 "L4.ml" 279 10738 10775
type(
  'm
)
"L4.ml" 280 10780 10792 "L4.ml" 280 10780 10793
type(
  'l list
)
ident(
  def d "L4.ml" 289 11054 11062 "L4.ml" 289 11054 11081
)
"L4.ml" 280 10780 10795 "L4.ml" 280 10780 10797
type(
  ('p * 'q * 's * 'r) list
)
ident(
  def p' "L4.ml" 289 11054 11062 "L4.ml" 289 11054 11081
)
"L4.ml" 280 10780 10792 "L4.ml" 280 10780 10797
type(
  'l list * ('p * 'q * 's * 'r) list
)
"L4.ml" 281 10800 10810 "L4.ml" 281 10800 10819
type(
  ('l list * ('p * 'q * 's * 'r) list ->
   ('p * 'q * 'm * 'r as 'v) -> 'l list * ('p * 'q * 's * 'r) list) ->
  'l list * ('p * 'q * 's * 'r) list ->
  'u -> 'l list * ('p * 'q * 's * 'r) list
)
ident(
  ext_ref List.fold_left
)
"L4.ml" 282 10821 10839 "L4.ml" 282 10821 10845
type(
  'l list
)
ident(
  def lifted "L4.ml" 282 10821 10853 "L4.ml" 284 10932 10987
)
"L4.ml" 282 10821 10847 "L4.ml" 282 10821 10851
type(
  ('p * 'q * 's * 'r) list
)
ident(
  def rest "L4.ml" 282 10821 10853 "L4.ml" 284 10932 10987
)
"L4.ml" 282 10821 10839 "L4.ml" 282 10821 10851
type(
  'l list * ('p * 'q * 's * 'r) list
)
"L4.ml" 282 10821 10854 "L4.ml" 282 10821 10858
type(
  'p
)
ident(
  def name "L4.ml" 283 10881 10896 "L4.ml" 284 10932 10987
)
"L4.ml" 282 10821 10860 "L4.ml" 282 10821 10864
type(
  'q
)
ident(
  def args "L4.ml" 283 10881 10896 "L4.ml" 284 10932 10987
)
"L4.ml" 282 10821 10866 "L4.ml" 282 10821 10867
type(
  'm
)
ident(
  def d "L4.ml" 283 10881 10896 "L4.ml" 284 10932 10987
)
"L4.ml" 282 10821 10869 "L4.ml" 282 10821 10874
type(
  'r
)
ident(
  def stmts "L4.ml" 283 10881 10896 "L4.ml" 284 10932 10987
)
"L4.ml" 282 10821 10854 "L4.ml" 282 10821 10874
type(
  'v
)
"L4.ml" 283 10881 10900 "L4.ml" 283 10881 10907
type(
  'l list
)
ident(
  def lifted' "L4.ml" 284 10932 10947 "L4.ml" 284 10932 10987
)
"L4.ml" 283 10881 10909 "L4.ml" 283 10881 10911
type(
  's
)
ident(
  def d' "L4.ml" 284 10932 10947 "L4.ml" 284 10932 10987
)
"L4.ml" 283 10881 10900 "L4.ml" 283 10881 10911
type(
  'l list * 's
)
"L4.ml" 283 10881 10914 "L4.ml" 283 10881 10919
type(
  'l list -> 'm -> 'l list * 's
)
ident(
  int_ref decls "L4.ml" 279 10738 10752 "L4.ml" 279 10738 10757
)
"L4.ml" 283 10881 10920 "L4.ml" 283 10881 10926
type(
  'l list
)
ident(
  int_ref lifted "L4.ml" 282 10821 10839 "L4.ml" 282 10821 10845
)
"L4.ml" 283 10881 10927 "L4.ml" 283 10881 10928
type(
  'm
)
ident(
  int_ref d "L4.ml" 282 10821 10866 "L4.ml" 282 10821 10867
)
"L4.ml" 283 10881 10914 "L4.ml" 283 10881 10928
call(
  stack
)
type(
  'l list * 's
)
"L4.ml" 284 10932 10947 "L4.ml" 284 10932 10954
type(
  'l list
)
ident(
  int_ref lifted' "L4.ml" 283 10881 10900 "L4.ml" 283 10881 10907
)
"L4.ml" 284 10932 10957 "L4.ml" 284 10932 10961
type(
  'p
)
ident(
  int_ref name "L4.ml" 282 10821 10854 "L4.ml" 282 10821 10858
)
"L4.ml" 284 10932 10963 "L4.ml" 284 10932 10967
type(
  'q
)
ident(
  int_ref args "L4.ml" 282 10821 10860 "L4.ml" 282 10821 10864
)
"L4.ml" 284 10932 10969 "L4.ml" 284 10932 10971
type(
  's
)
ident(
  int_ref d' "L4.ml" 283 10881 10909 "L4.ml" 283 10881 10911
)
"L4.ml" 284 10932 10973 "L4.ml" 284 10932 10978
type(
  'r
)
ident(
  int_ref stmts "L4.ml" 282 10821 10869 "L4.ml" 282 10821 10874
)
"L4.ml" 284 10932 10956 "L4.ml" 284 10932 10979
type(
  'p * 'q * 's * 'r
)
"L4.ml" 284 10932 10983 "L4.ml" 284 10932 10987
type(
  ('p * 'q * 's * 'r) list
)
ident(
  int_ref rest "L4.ml" 282 10821 10847 "L4.ml" 282 10821 10851
)
"L4.ml" 284 10932 10956 "L4.ml" 284 10932 10987
type(
  ('p * 'q * 's * 'r) list
)
"L4.ml" 284 10932 10947 "L4.ml" 284 10932 10987
type(
  'l list * ('p * 'q * 's * 'r) list
)
"L4.ml" 283 10881 10896 "L4.ml" 284 10932 10987
type(
  'l list * ('p * 'q * 's * 'r) list
)
"L4.ml" 282 10821 10853 "L4.ml" 284 10932 10987
type(
  'v -> 'l list * ('p * 'q * 's * 'r) list
)
"L4.ml" 282 10821 10833 "L4.ml" 285 10988 11001
type(
  'l list * ('p * 'q * 's * 'r) list ->
  'v -> 'l list * ('p * 'q * 's * 'r) list
)
"L4.ml" 286 11003 11016 "L4.ml" 286 11003 11017
type(
  'l list
)
ident(
  int_ref t "L4.ml" 279 10738 10767 "L4.ml" 279 10738 10768
)
"L4.ml" 286 11003 11020 "L4.ml" 286 11003 11023
type(
  'l list
)
ident(
  int_ref acc "L4.ml" 279 10738 10758 "L4.ml" 279 10738 10761
)
"L4.ml" 286 11003 11016 "L4.ml" 286 11003 11023
call(
  stack
)
type(
  'l list
)
type(
  'l list -> 'l list -> 'l list
)
ident(
  ext_ref Pervasives.( @ )
)
"L4.ml" 286 11003 11025 "L4.ml" 286 11003 11027
type(
  ('p * 'q * 's * 'r) list
)
"L4.ml" 286 11003 11015 "L4.ml" 286 11003 11028
type(
  'l list * ('p * 'q * 's * 'r) list
)
"L4.ml" 287 11029 11041 "L4.ml" 287 11029 11042
type(
  'u
)
ident(
  int_ref p "L4.ml" 279 10738 10774 "L4.ml" 279 10738 10775
)
"L4.ml" 281 10800 10810 "L4.ml" 287 11029 11042
call(
  stack
)
type(
  'l list * ('p * 'q * 's * 'r) list
)
"L4.ml" 289 11054 11062 "L4.ml" 289 11054 11063
type(
  'l list
)
ident(
  int_ref d "L4.ml" 280 10780 10792 "L4.ml" 280 10780 10793
)
"L4.ml" 289 11054 11067 "L4.ml" 289 11054 11068
type(
  'n
)
ident(
  int_ref c "L4.ml" 279 10738 10764 "L4.ml" 279 10738 10765
)
"L4.ml" 289 11054 11070 "L4.ml" 289 11054 11072
type(
  't list
)
"L4.ml" 289 11054 11074 "L4.ml" 289 11054 11075
type(
  'o
)
ident(
  int_ref v "L4.ml" 279 10738 10770 "L4.ml" 279 10738 10771
)
"L4.ml" 289 11054 11066 "L4.ml" 289 11054 11076
type(
  'n * 't list * 'o
)
"L4.ml" 289 11054 11078 "L4.ml" 289 11054 11080
type(
  ('p * 'q * 's * 'r) list as 'w
)
ident(
  int_ref p' "L4.ml" 280 10780 10795 "L4.ml" 280 10780 10797
)
"L4.ml" 289 11054 11065 "L4.ml" 289 11054 11081
type(
  ('n * 't list * 'o) * 'w
)
"L4.ml" 289 11054 11062 "L4.ml" 289 11054 11081
type(
  'l list * (('n * 't list * 'o) * 'w)
)
"L4.ml" 280 10780 10788 "L4.ml" 289 11054 11081
type(
  'l list * (('n * 't list * 'o) * 'w)
)
"L4.ml" 279 10738 10762 "L4.ml" 289 11054 11081
type(
  'm -> 'l list * 's
)
"L4.ml" 279 10738 10758 "L4.ml" 289 11054 11081
type(
  'l list -> 'm -> 'l list * 's
)
"L4.ml" 291 11091 11101 "L4.ml" 291 11091 11107
type(
  'd list
)
ident(
  def lifted "L4.ml" 292 11140 11146 "L4.ml" 292 11140 11184
)
"L4.ml" 291 11091 11111 "L4.ml" 291 11091 11112
type(
  'c
)
ident(
  def c "L4.ml" 292 11140 11146 "L4.ml" 292 11140 11184
)
"L4.ml" 291 11091 11114 "L4.ml" 291 11091 11115
type(
  'x list
)
ident(
  def t "L4.ml" 292 11140 11146 "L4.ml" 292 11140 11184
)
"L4.ml" 291 11091 11117 "L4.ml" 291 11091 11118
type(
  'e
)
ident(
  def v "L4.ml" 292 11140 11146 "L4.ml" 292 11140 11184
)
"L4.ml" 291 11091 11111 "L4.ml" 291 11091 11118
type(
  'c * 'x list * 'e
)
"L4.ml" 291 11091 11121 "L4.ml" 291 11091 11122
type(
  ('f * 'g * (('c * 'x list * 'e) * 'y) * 'h) list as 'y
)
ident(
  def p "L4.ml" 292 11140 11146 "L4.ml" 292 11140 11184
)
"L4.ml" 291 11091 11110 "L4.ml" 291 11091 11122
type(
  ('c * 'x list * 'e) * 'y as 'z
)
"L4.ml" 291 11091 11101 "L4.ml" 291 11091 11123
type(
  'd list * 'z
)
"L4.ml" 291 11091 11126 "L4.ml" 291 11091 11131
type(
  'd list -> 'b -> 'd list * 'z
)
ident(
  int_ref decls "L4.ml" 279 10738 10752 "L4.ml" 279 10738 10757
)
"L4.ml" 291 11091 11132 "L4.ml" 291 11091 11134
type(
  'd list
)
"L4.ml" 291 11091 11135 "L4.ml" 291 11091 11136
type(
  'b
)
ident(
  int_ref d "L4.ml" 278 10705 10726 "L4.ml" 278 10705 10727
)
"L4.ml" 291 11091 11126 "L4.ml" 291 11091 11136
call(
  stack
)
type(
  'd list * 'z
)
"L4.ml" 292 11140 11147 "L4.ml" 292 11140 11151
type(
  'a
)
ident(
  int_ref name "L4.ml" 278 10705 10720 "L4.ml" 278 10705 10724
)
"L4.ml" 292 11140 11155 "L4.ml" 292 11140 11156
type(
  'c
)
ident(
  int_ref c "L4.ml" 291 11091 11111 "L4.ml" 291 11091 11112
)
"L4.ml" 292 11140 11158 "L4.ml" 292 11140 11164
type(
  'd list
)
ident(
  int_ref lifted "L4.ml" 291 11091 11101 "L4.ml" 291 11091 11107
)
"L4.ml" 292 11140 11167 "L4.ml" 292 11140 11168
type(
  'd list
)
ident(
  int_ref t "L4.ml" 291 11091 11114 "L4.ml" 291 11091 11115
)
"L4.ml" 292 11140 11158 "L4.ml" 292 11140 11168
call(
  stack
)
type(
  'd list
)
type(
  'd list -> 'd list -> 'd list
)
ident(
  ext_ref Pervasives.( @ )
)
"L4.ml" 292 11140 11170 "L4.ml" 292 11140 11171
type(
  'e
)
ident(
  int_ref v "L4.ml" 291 11091 11117 "L4.ml" 291 11091 11118
)
"L4.ml" 292 11140 11154 "L4.ml" 292 11140 11172
type(
  'c * 'd list * 'e
)
"L4.ml" 292 11140 11174 "L4.ml" 292 11140 11175
type(
  'j
)
ident(
  int_ref p "L4.ml" 291 11091 11121 "L4.ml" 291 11091 11122
)
"L4.ml" 292 11140 11153 "L4.ml" 292 11140 11176
type(
  ('c * 'd list * 'e) * 'j
)
"L4.ml" 292 11140 11178 "L4.ml" 292 11140 11183
type(
  'i
)
ident(
  int_ref stmts "L4.ml" 278 10705 10729 "L4.ml" 278 10705 10734
)
"L4.ml" 292 11140 11146 "L4.ml" 292 11140 11184
type(
  'a * (('c * 'd list * 'e) * 'j) * 'i
)
"L4.ml" 291 11091 11097 "L4.ml" 292 11140 11184
type(
  'a * (('c * 'd list * 'e) * 'j) * 'i
)
"L4.ml" 279 10738 10744 "L4.ml" 292 11140 11184
type(
  'a * (('c * 'd list * 'e) * 'j) * 'i
)
"L4.ml" 278 10705 10719 "L4.ml" 292 11140 11184
type(
  'a * 'b * 'i -> 'a * (('c * 'd list * 'e) * 'j) * 'i
)
"L4.ml" 294 11186 11194 "L4.ml" 294 11186 11201
type(
  'a1 * (('c1 * 'd1 * 'e1) * ('f1 * 'g1 * 'b1 * 'h1) list as 'b1) * 'i1 ->
  'a1 *
  (('c1 * 'd1 * 'e1) *
   ('f1 * 'g1 * (('c1 * 'd1 * 'e1) * 'j1 list) * 'h1) list) *
  'i1
)
ident(
  def lambda0 "L4.ml" 308 11623 11663 "L4.ml" 310 11671 11676
)
"L4.ml" 294 11186 11203 "L4.ml" 294 11186 11207
type(
  'a1
)
ident(
  def name "L4.ml" 295 11221 11227 "L4.ml" 308 11623 11663
)
"L4.ml" 294 11186 11209 "L4.ml" 294 11186 11210
type(
  'b1
)
ident(
  def d "L4.ml" 295 11221 11227 "L4.ml" 308 11623 11663
)
"L4.ml" 294 11186 11212 "L4.ml" 294 11186 11217
type(
  'i1
)
ident(
  def stmts "L4.ml" 295 11221 11227 "L4.ml" 308 11623 11663
)
"L4.ml" 294 11186 11203 "L4.ml" 294 11186 11217
type(
  'a1 * 'b1 * 'i1
)
"L4.ml" 295 11221 11235 "L4.ml" 295 11221 11240
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list ->
  (('m1 * 'n1 * 'o1) * ('k1 * 'l1 * 'r1 * 'q1) list as 'r1) ->
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
  (('m1 * 'n1 * 'o1) * 'p1 list)
)
ident(
  def decls "L4.ml" 295 11221 11227 "L4.ml" 308 11623 11663
)
"L4.ml" 295 11221 11241 "L4.ml" 295 11221 11244
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
ident(
  def acc "L4.ml" 295 11221 11245 "L4.ml" 305 11533 11564
)
"L4.ml" 295 11221 11247 "L4.ml" 295 11221 11248
type(
  'm1
)
ident(
  def c "L4.ml" 296 11263 11271 "L4.ml" 305 11533 11564
)
"L4.ml" 295 11221 11250 "L4.ml" 295 11221 11251
type(
  'n1
)
ident(
  def t "L4.ml" 296 11263 11271 "L4.ml" 305 11533 11564
)
"L4.ml" 295 11221 11253 "L4.ml" 295 11221 11254
type(
  'o1
)
ident(
  def v "L4.ml" 296 11263 11271 "L4.ml" 305 11533 11564
)
"L4.ml" 295 11221 11247 "L4.ml" 295 11221 11254
type(
  'm1 * 'n1 * 'o1
)
"L4.ml" 295 11221 11257 "L4.ml" 295 11221 11258
type(
  ('k1 * 'l1 * 'r1 * 'q1) list as 's1
)
ident(
  def p "L4.ml" 296 11263 11271 "L4.ml" 305 11533 11564
)
"L4.ml" 295 11221 11246 "L4.ml" 295 11221 11258
type(
  'r1
)
"L4.ml" 296 11263 11275 "L4.ml" 296 11263 11276
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
ident(
  def d "L4.ml" 305 11533 11541 "L4.ml" 305 11533 11564
)
"L4.ml" 296 11263 11278 "L4.ml" 296 11263 11280
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
ident(
  def p' "L4.ml" 305 11533 11541 "L4.ml" 305 11533 11564
)
"L4.ml" 296 11263 11275 "L4.ml" 296 11263 11280
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
"L4.ml" 297 11283 11293 "L4.ml" 297 11283 11302
type(
  (('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
   ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list ->
   ('k1 * 'l1 * 'r1 * 'q1 as 't1) ->
   ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
   ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list) ->
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list ->
  's1 ->
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
ident(
  ext_ref List.fold_left
)
"L4.ml" 298 11304 11322 "L4.ml" 298 11304 11328
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
ident(
  def lifted "L4.ml" 298 11304 11336 "L4.ml" 300 11415 11470
)
"L4.ml" 298 11304 11330 "L4.ml" 298 11304 11334
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
ident(
  def rest "L4.ml" 298 11304 11336 "L4.ml" 300 11415 11470
)
"L4.ml" 298 11304 11322 "L4.ml" 298 11304 11334
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
"L4.ml" 298 11304 11337 "L4.ml" 298 11304 11341
type(
  'k1
)
ident(
  def name "L4.ml" 299 11364 11379 "L4.ml" 300 11415 11470
)
"L4.ml" 298 11304 11343 "L4.ml" 298 11304 11347
type(
  'l1
)
ident(
  def args "L4.ml" 299 11364 11379 "L4.ml" 300 11415 11470
)
"L4.ml" 298 11304 11349 "L4.ml" 298 11304 11350
type(
  'r1
)
ident(
  def d "L4.ml" 299 11364 11379 "L4.ml" 300 11415 11470
)
"L4.ml" 298 11304 11352 "L4.ml" 298 11304 11357
type(
  'q1
)
ident(
  def stmts "L4.ml" 299 11364 11379 "L4.ml" 300 11415 11470
)
"L4.ml" 298 11304 11337 "L4.ml" 298 11304 11357
type(
  't1
)
"L4.ml" 299 11364 11383 "L4.ml" 299 11364 11390
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
ident(
  def lifted' "L4.ml" 300 11415 11430 "L4.ml" 300 11415 11470
)
"L4.ml" 299 11364 11392 "L4.ml" 299 11364 11394
type(
  ('m1 * 'n1 * 'o1) * 'p1 list
)
ident(
  def d' "L4.ml" 300 11415 11430 "L4.ml" 300 11415 11470
)
"L4.ml" 299 11364 11383 "L4.ml" 299 11364 11394
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
  (('m1 * 'n1 * 'o1) * 'p1 list)
)
"L4.ml" 299 11364 11397 "L4.ml" 299 11364 11402
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list ->
  'r1 ->
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
  (('m1 * 'n1 * 'o1) * 'p1 list)
)
ident(
  int_ref decls "L4.ml" 295 11221 11235 "L4.ml" 295 11221 11240
)
"L4.ml" 299 11364 11403 "L4.ml" 299 11364 11409
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
ident(
  int_ref lifted "L4.ml" 298 11304 11322 "L4.ml" 298 11304 11328
)
"L4.ml" 299 11364 11410 "L4.ml" 299 11364 11411
type(
  'r1
)
ident(
  int_ref d "L4.ml" 298 11304 11349 "L4.ml" 298 11304 11350
)
"L4.ml" 299 11364 11397 "L4.ml" 299 11364 11411
call(
  stack
)
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
  (('m1 * 'n1 * 'o1) * 'p1 list)
)
"L4.ml" 300 11415 11430 "L4.ml" 300 11415 11437
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
ident(
  int_ref lifted' "L4.ml" 299 11364 11383 "L4.ml" 299 11364 11390
)
"L4.ml" 300 11415 11440 "L4.ml" 300 11415 11444
type(
  'k1
)
ident(
  int_ref name "L4.ml" 298 11304 11337 "L4.ml" 298 11304 11341
)
"L4.ml" 300 11415 11446 "L4.ml" 300 11415 11450
type(
  'l1
)
ident(
  int_ref args "L4.ml" 298 11304 11343 "L4.ml" 298 11304 11347
)
"L4.ml" 300 11415 11452 "L4.ml" 300 11415 11454
type(
  ('m1 * 'n1 * 'o1) * 'p1 list
)
ident(
  int_ref d' "L4.ml" 299 11364 11392 "L4.ml" 299 11364 11394
)
"L4.ml" 300 11415 11456 "L4.ml" 300 11415 11461
type(
  'q1
)
ident(
  int_ref stmts "L4.ml" 298 11304 11352 "L4.ml" 298 11304 11357
)
"L4.ml" 300 11415 11439 "L4.ml" 300 11415 11462
type(
  'k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1
)
"L4.ml" 300 11415 11466 "L4.ml" 300 11415 11470
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
ident(
  int_ref rest "L4.ml" 298 11304 11330 "L4.ml" 298 11304 11334
)
"L4.ml" 300 11415 11439 "L4.ml" 300 11415 11470
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
"L4.ml" 300 11415 11430 "L4.ml" 300 11415 11470
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
"L4.ml" 299 11364 11379 "L4.ml" 300 11415 11470
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
"L4.ml" 298 11304 11336 "L4.ml" 300 11415 11470
type(
  't1 ->
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
"L4.ml" 298 11304 11316 "L4.ml" 301 11471 11484
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list ->
  't1 ->
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
"L4.ml" 302 11486 11499 "L4.ml" 302 11486 11502
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
ident(
  int_ref acc "L4.ml" 295 11221 11241 "L4.ml" 295 11221 11244
)
"L4.ml" 302 11486 11504 "L4.ml" 302 11486 11506
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
"L4.ml" 302 11486 11498 "L4.ml" 302 11486 11507
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
"L4.ml" 303 11508 11520 "L4.ml" 303 11508 11521
type(
  's1
)
ident(
  int_ref p "L4.ml" 295 11221 11257 "L4.ml" 295 11221 11258
)
"L4.ml" 297 11283 11293 "L4.ml" 303 11508 11521
call(
  stack
)
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
"L4.ml" 305 11533 11541 "L4.ml" 305 11533 11542
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
ident(
  int_ref d "L4.ml" 296 11263 11275 "L4.ml" 296 11263 11276
)
"L4.ml" 305 11533 11545 "L4.ml" 305 11533 11547
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
ident(
  int_ref p' "L4.ml" 296 11263 11278 "L4.ml" 296 11263 11280
)
"L4.ml" 305 11533 11541 "L4.ml" 305 11533 11547
call(
  stack
)
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list ->
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list ->
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list
)
ident(
  ext_ref Pervasives.( @ )
)
"L4.ml" 305 11533 11551 "L4.ml" 305 11533 11552
type(
  'm1
)
ident(
  int_ref c "L4.ml" 295 11221 11247 "L4.ml" 295 11221 11248
)
"L4.ml" 305 11533 11554 "L4.ml" 305 11533 11555
type(
  'n1
)
ident(
  int_ref t "L4.ml" 295 11221 11250 "L4.ml" 295 11221 11251
)
"L4.ml" 305 11533 11557 "L4.ml" 305 11533 11558
type(
  'o1
)
ident(
  int_ref v "L4.ml" 295 11221 11253 "L4.ml" 295 11221 11254
)
"L4.ml" 305 11533 11550 "L4.ml" 305 11533 11559
type(
  'm1 * 'n1 * 'o1
)
"L4.ml" 305 11533 11561 "L4.ml" 305 11533 11563
type(
  'p1 list
)
"L4.ml" 305 11533 11549 "L4.ml" 305 11533 11564
type(
  ('m1 * 'n1 * 'o1) * 'p1 list
)
"L4.ml" 305 11533 11541 "L4.ml" 305 11533 11564
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
  (('m1 * 'n1 * 'o1) * 'p1 list)
)
"L4.ml" 296 11263 11271 "L4.ml" 305 11533 11564
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
  (('m1 * 'n1 * 'o1) * 'p1 list)
)
"L4.ml" 295 11221 11245 "L4.ml" 305 11533 11564
type(
  'r1 ->
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
  (('m1 * 'n1 * 'o1) * 'p1 list)
)
"L4.ml" 295 11221 11241 "L4.ml" 305 11533 11564
type(
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list ->
  'r1 ->
  ('k1 * 'l1 * (('m1 * 'n1 * 'o1) * 'p1 list) * 'q1) list *
  (('m1 * 'n1 * 'o1) * 'p1 list)
)
"L4.ml" 307 11574 11584 "L4.ml" 307 11574 11590
type(
  ('f1 * 'g1 * (('c1 * 'd1 * 'e1) * 'u1 list) * 'h1) list
)
ident(
  def lifted "L4.ml" 308 11623 11629 "L4.ml" 308 11623 11663
)
"L4.ml" 307 11574 11594 "L4.ml" 307 11574 11595
type(
  'c1
)
ident(
  def c "L4.ml" 308 11623 11629 "L4.ml" 308 11623 11663
)
"L4.ml" 307 11574 11597 "L4.ml" 307 11574 11598
type(
  'd1
)
ident(
  def t "L4.ml" 308 11623 11629 "L4.ml" 308 11623 11663
)
"L4.ml" 307 11574 11600 "L4.ml" 307 11574 11601
type(
  'e1
)
ident(
  def v "L4.ml" 308 11623 11629 "L4.ml" 308 11623 11663
)
"L4.ml" 307 11574 11594 "L4.ml" 307 11574 11601
type(
  'c1 * 'd1 * 'e1
)
"L4.ml" 307 11574 11604 "L4.ml" 307 11574 11605
type(
  'u1 list
)
ident(
  def p "L4.ml" 308 11623 11629 "L4.ml" 308 11623 11663
)
"L4.ml" 307 11574 11593 "L4.ml" 307 11574 11605
type(
  ('c1 * 'd1 * 'e1) * 'u1 list
)
"L4.ml" 307 11574 11584 "L4.ml" 307 11574 11606
type(
  ('f1 * 'g1 * (('c1 * 'd1 * 'e1) * 'u1 list) * 'h1) list *
  (('c1 * 'd1 * 'e1) * 'u1 list)
)
"L4.ml" 307 11574 11609 "L4.ml" 307 11574 11614
type(
  ('f1 * 'g1 * (('c1 * 'd1 * 'e1) * 'u1 list) * 'h1) list ->
  'b1 ->
  ('f1 * 'g1 * (('c1 * 'd1 * 'e1) * 'u1 list) * 'h1) list *
  (('c1 * 'd1 * 'e1) * 'u1 list)
)
ident(
  int_ref decls "L4.ml" 295 11221 11235 "L4.ml" 295 11221 11240
)
"L4.ml" 307 11574 11615 "L4.ml" 307 11574 11617
type(
  ('f1 * 'g1 * (('c1 * 'd1 * 'e1) * 'u1 list) * 'h1) list
)
"L4.ml" 307 11574 11618 "L4.ml" 307 11574 11619
type(
  'b1
)
ident(
  int_ref d "L4.ml" 294 11186 11209 "L4.ml" 294 11186 11210
)
"L4.ml" 307 11574 11609 "L4.ml" 307 11574 11619
call(
  stack
)
type(
  ('f1 * 'g1 * (('c1 * 'd1 * 'e1) * 'u1 list) * 'h1) list *
  (('c1 * 'd1 * 'e1) * 'u1 list)
)
"L4.ml" 308 11623 11630 "L4.ml" 308 11623 11634
type(
  'a1
)
ident(
  int_ref name "L4.ml" 294 11186 11203 "L4.ml" 294 11186 11207
)
"L4.ml" 308 11623 11638 "L4.ml" 308 11623 11639
type(
  'c1
)
ident(
  int_ref c "L4.ml" 307 11574 11594 "L4.ml" 307 11574 11595
)
"L4.ml" 308 11623 11641 "L4.ml" 308 11623 11642
type(
  'd1
)
ident(
  int_ref t "L4.ml" 307 11574 11597 "L4.ml" 307 11574 11598
)
"L4.ml" 308 11623 11644 "L4.ml" 308 11623 11645
type(
  'e1
)
ident(
  int_ref v "L4.ml" 307 11574 11600 "L4.ml" 307 11574 11601
)
"L4.ml" 308 11623 11637 "L4.ml" 308 11623 11646
type(
  'c1 * 'd1 * 'e1
)
"L4.ml" 308 11623 11648 "L4.ml" 308 11623 11654
type(
  ('f1 * 'g1 * (('c1 * 'd1 * 'e1) * 'j1 list) * 'h1) list
)
ident(
  int_ref lifted "L4.ml" 307 11574 11584 "L4.ml" 307 11574 11590
)
"L4.ml" 308 11623 11636 "L4.ml" 308 11623 11655
type(
  ('c1 * 'd1 * 'e1) * ('f1 * 'g1 * (('c1 * 'd1 * 'e1) * 'j1 list) * 'h1) list
)
"L4.ml" 308 11623 11657 "L4.ml" 308 11623 11662
type(
  'i1
)
ident(
  int_ref stmts "L4.ml" 294 11186 11212 "L4.ml" 294 11186 11217
)
"L4.ml" 308 11623 11629 "L4.ml" 308 11623 11663
type(
  'a1 *
  (('c1 * 'd1 * 'e1) *
   ('f1 * 'g1 * (('c1 * 'd1 * 'e1) * 'j1 list) * 'h1) list) *
  'i1
)
"L4.ml" 307 11574 11580 "L4.ml" 308 11623 11663
type(
  'a1 *
  (('c1 * 'd1 * 'e1) *
   ('f1 * 'g1 * (('c1 * 'd1 * 'e1) * 'j1 list) * 'h1) list) *
  'i1
)
"L4.ml" 295 11221 11227 "L4.ml" 308 11623 11663
type(
  'a1 *
  (('c1 * 'd1 * 'e1) *
   ('f1 * 'g1 * (('c1 * 'd1 * 'e1) * 'j1 list) * 'h1) list) *
  'i1
)
"L4.ml" 294 11186 11202 "L4.ml" 308 11623 11663
type(
  'a1 * 'b1 * 'i1 ->
  'a1 *
  (('c1 * 'd1 * 'e1) *
   ('f1 * 'g1 * (('c1 * 'd1 * 'e1) * 'j1 list) * 'h1) list) *
  'i1
)
"L4.ml" 318 11817 11825 "L4.ml" 318 11817 11832
type(
  string -> string
)
ident(
  def protect "L4.ml" 320 11854 11858 "L4.ml" 401 15058 15063
)
"L4.ml" 318 11817 11833 "L4.ml" 318 11817 11837
type(
  string
)
ident(
  def name "L4.ml" 318 11817 11840 "L4.ml" 318 11817 11852
)
"L4.ml" 318 11817 11840 "L4.ml" 318 11817 11844
type(
  string
)
ident(
  int_ref name "L4.ml" 318 11817 11833 "L4.ml" 318 11817 11837
)
"L4.ml" 318 11817 11847 "L4.ml" 318 11817 11852
type(
  string
)
"L4.ml" 318 11817 11840 "L4.ml" 318 11817 11852
call(
  tail
)
type(
  string
)
type(
  string -> string -> string
)
ident(
  ext_ref Pervasives.( ^ )
)
"L4.ml" 318 11817 11833 "L4.ml" 318 11817 11852
type(
  string -> string
)
"L4.ml" 320 11854 11862 "L4.ml" 320 11854 11871
type(
  ([> `Binop of
        [< `Add
         | `And
         | `Div
         | `Eq
         | `Ge
         | `Gt
         | `Le
         | `Lt
         | `Mod
         | `Mul
         | `Ne
         | `Or
         | `Sub ] *
        'a * 'a
    | `Const of [< `False | `Literal of int | `True ]
    | `Field of 'a * string
    | `Ident of
        string *
        [> `Param of string * 'b
         | `VParam of string * 'c
         | `Var of string * 'd ]
    | `Index of 'a * 'a
    | `Unop of [< `Neg | `Not ] * 'a ]
   as 'a) ->
  Ostap.Pretty.printer
)
ident(
  def reference "L4.ml" 334 12570 12574 "L4.ml" 401 15058 15063
)
"L4.ml" 320 11854 11873 "L4.ml" 320 11854 11883
type(
  ([> `Binop of
        [< `Add
         | `And
         | `Div
         | `Eq
         | `Ge
         | `Gt
         | `Le
         | `Lt
         | `Mod
         | `Mul
         | `Ne
         | `Or
         | `Sub ] *
        'e * 'e
    | `Const of [< `False | `Literal of int | `True ]
    | `Field of 'e * string
    | `Ident of
        string *
        [> `Param of string * 'f
         | `VParam of string * 'g
         | `Var of string * 'h ]
    | `Index of 'e * 'e
    | `Unop of [< `Neg | `Not ] * 'e ]
   as 'e) ->
  Ostap.Pretty.printer
)
ident(
  def expression "L4.ml" 334 12570 12574 "L4.ml" 401 15058 15063
)
"L4.ml" 320 11854 11862 "L4.ml" 320 11854 11883
type(
  ('a -> Ostap.Pretty.printer) * ('e -> Ostap.Pretty.printer)
)
"L4.ml" 321 11886 11900 "L4.ml" 321 11886 11903
type(
  (([> `Binop of
         [< `Add
          | `And
          | `Div
          | `Eq
          | `Ge
          | `Gt
          | `Le
          | `Lt
          | `Mod
          | `Mul
          | `Ne
          | `Or
          | `Sub ] *
         'i * 'i
     | `Const of [< `False | `Literal of int | `True ]
     | `Field of 'i * string
     | `Ident of
         string *
         [> `Param of string * 'j
          | `VParam of string * 'k
          | `Var of string * 'l ]
     | `Index of 'i * 'i
     | `Unop of [< `Neg | `Not ] * 'i ]
    as 'i) ->
   (Ostap.Pretty.printer * int) Monad.Id.t) ->
  'i -> (Ostap.Pretty.printer * int) Monad.Id.t
)
ident(
  def ref "L4.ml" 321 11886 11892 "L4.ml" 332 12541 12568
)
"L4.ml" 321 11886 11904 "L4.ml" 321 11886 11907
type(
  'i -> (Ostap.Pretty.printer * int) Monad.Id.t
)
ident(
  def ext "L4.ml" 321 11886 11910 "L4.ml" 328 12380 12398
)
"L4.ml" 322 11920 11936 "L4.ml" 322 11920 11937
type(
  string
)
"L4.ml" 322 11920 11948 "L4.ml" 322 11920 11952
type(
  string
)
ident(
  def name "L4.ml" 322 11920 11961 "L4.ml" 322 11920 11993
)
"L4.ml" 322 11920 11954 "L4.ml" 322 11920 11955
type(
  'k
)
"L4.ml" 322 11920 11948 "L4.ml" 322 11920 11955
type(
  string * 'k
)
"L4.ml" 322 11920 11939 "L4.ml" 322 11920 11956
type(
  [> `Param of string * 'j | `VParam of string * 'k | `Var of string * 'l ]
  as 'm
)
"L4.ml" 322 11920 11936 "L4.ml" 322 11920 11956
type(
  string * 'm
)
"L4.ml" 322 11920 11928 "L4.ml" 322 11920 11957
type(
  'i
)
"L4.ml" 322 11920 11961 "L4.ml" 322 11920 11967
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 322 11920 11969 "L4.ml" 322 11920 11972
type(
  string
)
"L4.ml" 322 11920 11976 "L4.ml" 322 11920 11983
type(
  string -> string
)
ident(
  int_ref protect "L4.ml" 318 11817 11825 "L4.ml" 318 11817 11832
)
"L4.ml" 322 11920 11984 "L4.ml" 322 11920 11988
type(
  string
)
ident(
  int_ref name "L4.ml" 322 11920 11948 "L4.ml" 322 11920 11952
)
"L4.ml" 322 11920 11975 "L4.ml" 322 11920 11989
call(
  stack
)
type(
  string
)
"L4.ml" 322 11920 11969 "L4.ml" 322 11920 11989
type(
  string -> string -> string
)
ident(
  ext_ref Pervasives.( ^ )
)
"L4.ml" 322 11920 11968 "L4.ml" 322 11920 11990
call(
  stack
)
type(
  string
)
"L4.ml" 322 11920 11961 "L4.ml" 322 11920 11990
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 322 11920 11992 "L4.ml" 322 11920 11993
type(
  int
)
"L4.ml" 322 11920 11961 "L4.ml" 322 11920 11993
type(
  Ostap.Pretty.printer * int
)
"L4.ml" 323 11994 12010 "L4.ml" 323 11994 12011
type(
  string
)
"L4.ml" 323 11994 12022 "L4.ml" 323 11994 12026
type(
  string
)
ident(
  def name "L4.ml" 323 11994 12035 "L4.ml" 323 11994 12059
)
"L4.ml" 323 11994 12028 "L4.ml" 323 11994 12029
type(
  'j
)
"L4.ml" 323 11994 12022 "L4.ml" 323 11994 12029
type(
  string * 'j
)
"L4.ml" 323 11994 12013 "L4.ml" 323 11994 12030
type(
  'm
)
"L4.ml" 323 11994 12010 "L4.ml" 323 11994 12030
type(
  string * 'm
)
"L4.ml" 323 11994 12002 "L4.ml" 323 11994 12031
type(
  'i
)
"L4.ml" 323 11994 12035 "L4.ml" 323 11994 12041
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 323 11994 12043 "L4.ml" 323 11994 12050
type(
  string -> string
)
ident(
  int_ref protect "L4.ml" 318 11817 11825 "L4.ml" 318 11817 11832
)
"L4.ml" 323 11994 12051 "L4.ml" 323 11994 12055
type(
  string
)
ident(
  int_ref name "L4.ml" 323 11994 12022 "L4.ml" 323 11994 12026
)
"L4.ml" 323 11994 12042 "L4.ml" 323 11994 12056
call(
  stack
)
type(
  string
)
"L4.ml" 323 11994 12035 "L4.ml" 323 11994 12056
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 323 11994 12058 "L4.ml" 323 11994 12059
type(
  int
)
"L4.ml" 323 11994 12035 "L4.ml" 323 11994 12059
type(
  Ostap.Pretty.printer * int
)
"L4.ml" 324 12060 12076 "L4.ml" 324 12060 12077
type(
  string
)
"L4.ml" 324 12060 12085 "L4.ml" 324 12060 12089
type(
  string
)
ident(
  def name "L4.ml" 324 12060 12098 "L4.ml" 324 12060 12122
)
"L4.ml" 324 12060 12091 "L4.ml" 324 12060 12092
type(
  'l
)
"L4.ml" 324 12060 12085 "L4.ml" 324 12060 12092
type(
  string * 'l
)
"L4.ml" 324 12060 12079 "L4.ml" 324 12060 12093
type(
  'm
)
"L4.ml" 324 12060 12076 "L4.ml" 324 12060 12093
type(
  string * 'm
)
"L4.ml" 324 12060 12068 "L4.ml" 324 12060 12094
type(
  'i
)
"L4.ml" 324 12060 12098 "L4.ml" 324 12060 12104
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 324 12060 12106 "L4.ml" 324 12060 12113
type(
  string -> string
)
ident(
  int_ref protect "L4.ml" 318 11817 11825 "L4.ml" 318 11817 11832
)
"L4.ml" 324 12060 12114 "L4.ml" 324 12060 12118
type(
  string
)
ident(
  int_ref name "L4.ml" 324 12060 12085 "L4.ml" 324 12060 12089
)
"L4.ml" 324 12060 12105 "L4.ml" 324 12060 12119
type(
  string
)
"L4.ml" 324 12060 12098 "L4.ml" 324 12060 12119
type(
  Ostap.Pretty.printer
)
"L4.ml" 324 12060 12121 "L4.ml" 324 12060 12122
type(
  int
)
"L4.ml" 324 12060 12098 "L4.ml" 324 12060 12122
type(
  Ostap.Pretty.printer * int
)
"L4.ml" 325 12124 12140 "L4.ml" 325 12124 12144
type(
  string
)
ident(
  def name "L4.ml" 325 12124 12152 "L4.ml" 325 12124 12176
)
"L4.ml" 325 12124 12146 "L4.ml" 325 12124 12147
type(
  'm
)
"L4.ml" 325 12124 12140 "L4.ml" 325 12124 12147
type(
  string * 'm
)
"L4.ml" 325 12124 12132 "L4.ml" 325 12124 12148
type(
  'i
)
"L4.ml" 325 12124 12152 "L4.ml" 325 12124 12158
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 325 12124 12160 "L4.ml" 325 12124 12167
type(
  string -> string
)
ident(
  int_ref protect "L4.ml" 318 11817 11825 "L4.ml" 318 11817 11832
)
"L4.ml" 325 12124 12168 "L4.ml" 325 12124 12172
type(
  string
)
ident(
  int_ref name "L4.ml" 325 12124 12140 "L4.ml" 325 12124 12144
)
"L4.ml" 325 12124 12159 "L4.ml" 325 12124 12173
call(
  stack
)
type(
  string
)
"L4.ml" 325 12124 12152 "L4.ml" 325 12124 12173
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 325 12124 12175 "L4.ml" 325 12124 12176
type(
  int
)
"L4.ml" 325 12124 12152 "L4.ml" 325 12124 12176
type(
  Ostap.Pretty.printer * int
)
"L4.ml" 326 12178 12194 "L4.ml" 326 12178 12195
type(
  'i
)
ident(
  def r "L4.ml" 326 12178 12203 "L4.ml" 326 12178 12281
)
"L4.ml" 326 12178 12197 "L4.ml" 326 12178 12198
type(
  'i
)
ident(
  def i "L4.ml" 326 12178 12203 "L4.ml" 326 12178 12281
)
"L4.ml" 326 12178 12194 "L4.ml" 326 12178 12198
type(
  'i * 'i
)
"L4.ml" 326 12178 12186 "L4.ml" 326 12178 12199
type(
  'i
)
"L4.ml" 326 12178 12203 "L4.ml" 326 12178 12211
type(
  Ostap.Pretty.printer -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.hovboxed
)
"L4.ml" 326 12178 12213 "L4.ml" 326 12178 12216
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.seq
)
"L4.ml" 326 12178 12218 "L4.ml" 326 12178 12224
type(
  Ostap.Pretty.printer -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.rboxed
)
"L4.ml" 326 12178 12226 "L4.ml" 326 12178 12235
type(
  'i -> Ostap.Pretty.printer
)
ident(
  int_ref reference "L4.ml" 330 12457 12467 "L4.ml" 330 12457 12476
)
"L4.ml" 326 12178 12236 "L4.ml" 326 12178 12237
type(
  'i
)
ident(
  int_ref r "L4.ml" 326 12178 12194 "L4.ml" 326 12178 12195
)
"L4.ml" 326 12178 12225 "L4.ml" 326 12178 12238
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 326 12178 12218 "L4.ml" 326 12178 12238
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 326 12178 12240 "L4.ml" 326 12178 12246
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 326 12178 12247 "L4.ml" 326 12178 12250
type(
  string
)
"L4.ml" 326 12178 12240 "L4.ml" 326 12178 12250
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 326 12178 12252 "L4.ml" 326 12178 12262
type(
  'i -> Ostap.Pretty.printer
)
ident(
  int_ref expression "L4.ml" 331 12500 12510 "L4.ml" 331 12500 12520
)
"L4.ml" 326 12178 12263 "L4.ml" 326 12178 12264
type(
  'i
)
ident(
  int_ref i "L4.ml" 326 12178 12197 "L4.ml" 326 12178 12198
)
"L4.ml" 326 12178 12252 "L4.ml" 326 12178 12264
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 326 12178 12266 "L4.ml" 326 12178 12272
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 326 12178 12273 "L4.ml" 326 12178 12276
type(
  string
)
"L4.ml" 326 12178 12266 "L4.ml" 326 12178 12276
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 326 12178 12217 "L4.ml" 326 12178 12277
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 326 12178 12212 "L4.ml" 326 12178 12278
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 326 12178 12203 "L4.ml" 326 12178 12278
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 326 12178 12280 "L4.ml" 326 12178 12281
type(
  int
)
"L4.ml" 326 12178 12203 "L4.ml" 326 12178 12281
type(
  Ostap.Pretty.printer * int
)
"L4.ml" 327 12282 12298 "L4.ml" 327 12282 12299
type(
  'i
)
ident(
  def r "L4.ml" 327 12282 12307 "L4.ml" 327 12282 12379
)
"L4.ml" 327 12282 12301 "L4.ml" 327 12282 12302
type(
  string
)
ident(
  def f "L4.ml" 327 12282 12307 "L4.ml" 327 12282 12379
)
"L4.ml" 327 12282 12298 "L4.ml" 327 12282 12302
type(
  'i * string
)
"L4.ml" 327 12282 12290 "L4.ml" 327 12282 12303
type(
  'i
)
"L4.ml" 327 12282 12307 "L4.ml" 327 12282 12315
type(
  Ostap.Pretty.printer -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.hovboxed
)
"L4.ml" 327 12282 12317 "L4.ml" 327 12282 12320
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.seq
)
"L4.ml" 327 12282 12322 "L4.ml" 327 12282 12328
type(
  Ostap.Pretty.printer -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.rboxed
)
"L4.ml" 327 12282 12330 "L4.ml" 327 12282 12339
type(
  'i -> Ostap.Pretty.printer
)
ident(
  int_ref reference "L4.ml" 330 12457 12467 "L4.ml" 330 12457 12476
)
"L4.ml" 327 12282 12340 "L4.ml" 327 12282 12341
type(
  'i
)
ident(
  int_ref r "L4.ml" 327 12282 12298 "L4.ml" 327 12282 12299
)
"L4.ml" 327 12282 12329 "L4.ml" 327 12282 12342
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 327 12282 12322 "L4.ml" 327 12282 12342
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 327 12282 12344 "L4.ml" 327 12282 12350
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 327 12282 12351 "L4.ml" 327 12282 12354
type(
  string
)
"L4.ml" 327 12282 12344 "L4.ml" 327 12282 12354
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 327 12282 12356 "L4.ml" 327 12282 12362
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 327 12282 12364 "L4.ml" 327 12282 12371
type(
  string -> string
)
ident(
  int_ref protect "L4.ml" 318 11817 11825 "L4.ml" 318 11817 11832
)
"L4.ml" 327 12282 12372 "L4.ml" 327 12282 12373
type(
  string
)
ident(
  int_ref f "L4.ml" 327 12282 12301 "L4.ml" 327 12282 12302
)
"L4.ml" 327 12282 12363 "L4.ml" 327 12282 12374
call(
  stack
)
type(
  string
)
"L4.ml" 327 12282 12356 "L4.ml" 327 12282 12374
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 327 12282 12321 "L4.ml" 327 12282 12375
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 327 12282 12316 "L4.ml" 327 12282 12376
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 327 12282 12307 "L4.ml" 327 12282 12376
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 327 12282 12378 "L4.ml" 327 12282 12379
type(
  int
)
"L4.ml" 327 12282 12307 "L4.ml" 327 12282 12379
type(
  Ostap.Pretty.printer * int
)
"L4.ml" 328 12380 12388 "L4.ml" 328 12380 12389
type(
  'i
)
ident(
  def x "L4.ml" 328 12380 12393 "L4.ml" 328 12380 12398
)
"L4.ml" 328 12380 12393 "L4.ml" 328 12380 12396
type(
  'i -> (Ostap.Pretty.printer * int) Monad.Id.t
)
ident(
  int_ref ext "L4.ml" 321 11886 11904 "L4.ml" 321 11886 11907
)
"L4.ml" 328 12380 12397 "L4.ml" 328 12380 12398
type(
  'i
)
ident(
  int_ref x "L4.ml" 328 12380 12388 "L4.ml" 328 12380 12389
)
"L4.ml" 328 12380 12393 "L4.ml" 328 12380 12398
call(
  tail
)
type(
  (Ostap.Pretty.printer * int) Monad.Id.t
)
"L4.ml" 321 11886 11910 "L4.ml" 328 12380 12398
type(
  'i -> (Ostap.Pretty.printer * int) Monad.Id.t
)
"L4.ml" 321 11886 11904 "L4.ml" 328 12380 12398
type(
  ('i -> (Ostap.Pretty.printer * int) Monad.Id.t) ->
  'i -> (Ostap.Pretty.printer * int) Monad.Id.t
)
"L4.ml" 329 12406 12416 "L4.ml" 329 12406 12420
type(
  'i -> (Ostap.Pretty.printer * int) Monad.Id.t
)
ident(
  def expr "L4.ml" 321 11886 11892 "L4.ml" 332 12541 12568
)
"L4.ml" 329 12406 12421 "L4.ml" 329 12406 12422
type(
  'i
)
ident(
  def s "L4.ml" 329 12406 12425 "L4.ml" 329 12406 12455
)
"L4.ml" 329 12406 12425 "L4.ml" 329 12406 12449
type(
  (('i -> (Ostap.Pretty.printer * int) Monad.Id.t) ->
   'i -> (Ostap.Pretty.printer * int) Monad.Id.t) ->
  'i -> (Ostap.Pretty.printer * int) Monad.Id.t
)
ident(
  ext_ref SimpleExpression.print_c
)
"L4.ml" 329 12406 12450 "L4.ml" 329 12406 12453
type(
  ('i -> (Ostap.Pretty.printer * int) Monad.Id.t) ->
  'i -> (Ostap.Pretty.printer * int) Monad.Id.t
)
ident(
  int_ref ref "L4.ml" 321 11886 11900 "L4.ml" 321 11886 11903
)
"L4.ml" 329 12406 12454 "L4.ml" 329 12406 12455
type(
  'i
)
ident(
  int_ref s "L4.ml" 329 12406 12421 "L4.ml" 329 12406 12422
)
"L4.ml" 329 12406 12425 "L4.ml" 329 12406 12455
call(
  tail
)
type(
  (Ostap.Pretty.printer * int) Monad.Id.t
)
"L4.ml" 329 12406 12421 "L4.ml" 329 12406 12455
type(
  'i -> (Ostap.Pretty.printer * int) Monad.Id.t
)
"L4.ml" 330 12457 12467 "L4.ml" 330 12457 12476
type(
  'i -> Ostap.Pretty.printer
)
ident(
  def reference "L4.ml" 321 11886 11892 "L4.ml" 332 12541 12568
)
"L4.ml" 330 12457 12478 "L4.ml" 330 12457 12479
type(
  'i
)
ident(
  def s "L4.ml" 330 12457 12482 "L4.ml" 330 12457 12498
)
"L4.ml" 330 12457 12482 "L4.ml" 330 12457 12485
type(
  (Ostap.Pretty.printer * int) Monad.Id.t -> Ostap.Pretty.printer
)
ident(
  ext_ref Pervasives.fst
)
"L4.ml" 330 12457 12487 "L4.ml" 330 12457 12490
type(
  ('i -> (Ostap.Pretty.printer * int) Monad.Id.t) ->
  'i -> (Ostap.Pretty.printer * int) Monad.Id.t
)
ident(
  int_ref ref "L4.ml" 321 11886 11900 "L4.ml" 321 11886 11903
)
"L4.ml" 330 12457 12491 "L4.ml" 330 12457 12495
type(
  'i -> (Ostap.Pretty.printer * int) Monad.Id.t
)
ident(
  int_ref expr "L4.ml" 329 12406 12416 "L4.ml" 329 12406 12420
)
"L4.ml" 330 12457 12496 "L4.ml" 330 12457 12497
type(
  'i
)
ident(
  int_ref s "L4.ml" 330 12457 12478 "L4.ml" 330 12457 12479
)
"L4.ml" 330 12457 12486 "L4.ml" 330 12457 12498
call(
  stack
)
type(
  (Ostap.Pretty.printer * int) Monad.Id.t
)
"L4.ml" 330 12457 12482 "L4.ml" 330 12457 12498
type(
  Ostap.Pretty.printer
)
"L4.ml" 330 12457 12478 "L4.ml" 330 12457 12498
type(
  'i -> Ostap.Pretty.printer
)
"L4.ml" 331 12500 12510 "L4.ml" 331 12500 12520
type(
  'i -> Ostap.Pretty.printer
)
ident(
  def expression "L4.ml" 321 11886 11892 "L4.ml" 332 12541 12568
)
"L4.ml" 331 12500 12521 "L4.ml" 331 12500 12522
type(
  'i
)
ident(
  def s "L4.ml" 331 12500 12525 "L4.ml" 331 12500 12537
)
"L4.ml" 331 12500 12525 "L4.ml" 331 12500 12528
type(
  (Ostap.Pretty.printer * int) Monad.Id.t -> Ostap.Pretty.printer
)
ident(
  ext_ref Pervasives.fst
)
"L4.ml" 331 12500 12530 "L4.ml" 331 12500 12534
type(
  'i -> (Ostap.Pretty.printer * int) Monad.Id.t
)
ident(
  int_ref expr "L4.ml" 329 12406 12416 "L4.ml" 329 12406 12420
)
"L4.ml" 331 12500 12535 "L4.ml" 331 12500 12536
type(
  'i
)
ident(
  int_ref s "L4.ml" 331 12500 12521 "L4.ml" 331 12500 12522
)
"L4.ml" 331 12500 12529 "L4.ml" 331 12500 12537
call(
  stack
)
type(
  (Ostap.Pretty.printer * int) Monad.Id.t
)
"L4.ml" 331 12500 12525 "L4.ml" 331 12500 12537
type(
  Ostap.Pretty.printer
)
"L4.ml" 331 12500 12521 "L4.ml" 331 12500 12537
type(
  'i -> Ostap.Pretty.printer
)
"L4.ml" 332 12541 12547 "L4.ml" 332 12541 12556
type(
  'a -> Ostap.Pretty.printer
)
ident(
  int_ref reference "L4.ml" 330 12457 12467 "L4.ml" 330 12457 12476
)
"L4.ml" 332 12541 12558 "L4.ml" 332 12541 12568
type(
  'e -> Ostap.Pretty.printer
)
ident(
  int_ref expression "L4.ml" 331 12500 12510 "L4.ml" 331 12500 12520
)
"L4.ml" 332 12541 12547 "L4.ml" 332 12541 12568
type(
  ('a -> Ostap.Pretty.printer) * ('e -> Ostap.Pretty.printer)
)
"L4.ml" 321 11886 11892 "L4.ml" 332 12541 12568
type(
  ('a -> Ostap.Pretty.printer) * ('e -> Ostap.Pretty.printer)
)
"L4.ml" 334 12570 12582 "L4.ml" 334 12570 12585
type(
  Ostap.Pretty.printer ->
  ([< `Array of
        ([> `Binop of
              [< `Add
               | `And
               | `Div
               | `Eq
               | `Ge
               | `Gt
               | `Le
               | `Lt
               | `Mod
               | `Mul
               | `Ne
               | `Or
               | `Sub ] *
              'o * 'o
          | `Const of [< `False | `Literal of int | `True ]
          | `Field of 'o * string
          | `Ident of
              string *
              [> `Param of string * 'p
               | `VParam of string * 'q
               | `Var of string * 'r ]
          | `Index of 'o * 'o
          | `Unop of [< `Neg | `Not ] * 'o ]
         as 'o) *
        'n
    | `Bool
    | `Int
    | `Record of (string * 'n) list
    | `User of 's * string * 't ]
   as 'n) ->
  Ostap.Pretty.printer
)
ident(
  def typ "L4.ml" 334 12570 12574 "L4.ml" 401 15058 15063
)
"L4.ml" 334 12570 12586 "L4.ml" 334 12570 12590
type(
  Ostap.Pretty.printer
)
ident(
  def decl "L4.ml" 334 12570 12593 "L4.ml" 342 12954 12963
)
"L4.ml" 335 12602 12615 "L4.ml" 335 12602 12619
type(
  's
)
ident(
  def name "L4.ml" 335 12602 12634 "L4.ml" 335 12602 12668
)
"L4.ml" 335 12602 12621 "L4.ml" 335 12602 12626
type(
  string
)
ident(
  def iname "L4.ml" 335 12602 12634 "L4.ml" 335 12602 12668
)
"L4.ml" 335 12602 12628 "L4.ml" 335 12602 12629
type(
  't
)
"L4.ml" 335 12602 12615 "L4.ml" 335 12602 12629
type(
  's * string * 't
)
"L4.ml" 335 12602 12608 "L4.ml" 335 12602 12630
type(
  'n
)
"L4.ml" 335 12602 12634 "L4.ml" 335 12602 12637
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Common.hov
)
"L4.ml" 335 12602 12639 "L4.ml" 335 12602 12645
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 335 12602 12647 "L4.ml" 335 12602 12654
type(
  string -> string
)
ident(
  int_ref protect "L4.ml" 318 11817 11825 "L4.ml" 318 11817 11832
)
"L4.ml" 335 12602 12655 "L4.ml" 335 12602 12660
type(
  string
)
ident(
  int_ref iname "L4.ml" 335 12602 12621 "L4.ml" 335 12602 12626
)
"L4.ml" 335 12602 12646 "L4.ml" 335 12602 12661
call(
  stack
)
type(
  string
)
"L4.ml" 335 12602 12639 "L4.ml" 335 12602 12661
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 335 12602 12663 "L4.ml" 335 12602 12667
type(
  Ostap.Pretty.printer
)
ident(
  int_ref decl "L4.ml" 334 12570 12586 "L4.ml" 334 12570 12590
)
"L4.ml" 335 12602 12638 "L4.ml" 335 12602 12668
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 335 12602 12634 "L4.ml" 335 12602 12668
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 336 12669 12675 "L4.ml" 336 12669 12679
type(
  'n
)
"L4.ml" 336 12669 12682 "L4.ml" 336 12669 12687
type(
  'n
)
"L4.ml" 336 12669 12675 "L4.ml" 336 12669 12687
type(
  'n
)
"L4.ml" 336 12669 12691 "L4.ml" 336 12669 12694
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Common.hov
)
"L4.ml" 336 12669 12696 "L4.ml" 336 12669 12702
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 336 12669 12703 "L4.ml" 336 12669 12708
type(
  string
)
"L4.ml" 336 12669 12696 "L4.ml" 336 12669 12708
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 336 12669 12710 "L4.ml" 336 12669 12714
type(
  Ostap.Pretty.printer
)
ident(
  int_ref decl "L4.ml" 334 12570 12586 "L4.ml" 334 12570 12590
)
"L4.ml" 336 12669 12695 "L4.ml" 336 12669 12715
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 336 12669 12691 "L4.ml" 336 12669 12715
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 337 12716 12730 "L4.ml" 337 12716 12731
type(
  'o
)
ident(
  def s "L4.ml" 337 12716 12739 "L4.ml" 337 12716 12780
)
"L4.ml" 337 12716 12733 "L4.ml" 337 12716 12734
type(
  'n
)
ident(
  def t "L4.ml" 337 12716 12739 "L4.ml" 337 12716 12780
)
"L4.ml" 337 12716 12730 "L4.ml" 337 12716 12734
type(
  'o * 'n
)
"L4.ml" 337 12716 12722 "L4.ml" 337 12716 12735
type(
  'n
)
"L4.ml" 337 12716 12739 "L4.ml" 337 12716 12742
type(
  Ostap.Pretty.printer -> 'n -> Ostap.Pretty.printer
)
ident(
  int_ref typ "L4.ml" 334 12570 12582 "L4.ml" 334 12570 12585
)
"L4.ml" 337 12716 12744 "L4.ml" 337 12716 12747
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Common.hov
)
"L4.ml" 337 12716 12749 "L4.ml" 337 12716 12753
type(
  Ostap.Pretty.printer
)
ident(
  int_ref decl "L4.ml" 334 12570 12586 "L4.ml" 334 12570 12590
)
"L4.ml" 337 12716 12755 "L4.ml" 337 12716 12761
type(
  Ostap.Pretty.printer -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.sboxed
)
"L4.ml" 337 12716 12763 "L4.ml" 337 12716 12773
type(
  'o -> Ostap.Pretty.printer
)
ident(
  int_ref expression "L4.ml" 320 11854 11873 "L4.ml" 320 11854 11883
)
"L4.ml" 337 12716 12774 "L4.ml" 337 12716 12775
type(
  'o
)
ident(
  int_ref s "L4.ml" 337 12716 12730 "L4.ml" 337 12716 12731
)
"L4.ml" 337 12716 12762 "L4.ml" 337 12716 12776
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 337 12716 12755 "L4.ml" 337 12716 12776
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 337 12716 12748 "L4.ml" 337 12716 12777
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 337 12716 12743 "L4.ml" 337 12716 12778
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 337 12716 12779 "L4.ml" 337 12716 12780
type(
  'n
)
ident(
  int_ref t "L4.ml" 337 12716 12733 "L4.ml" 337 12716 12734
)
"L4.ml" 337 12716 12739 "L4.ml" 337 12716 12780
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 338 12781 12795 "L4.ml" 338 12781 12796
type(
  (string * 'n) list
)
ident(
  def f "L4.ml" 339 12801 12809 "L4.ml" 342 12954 12963
)
"L4.ml" 338 12781 12787 "L4.ml" 338 12781 12796
type(
  'n
)
"L4.ml" 339 12801 12809 "L4.ml" 339 12801 12812
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Common.hov
)
"L4.ml" 339 12801 12814 "L4.ml" 339 12801 12820
type(
  string -> string -> Ostap.Pretty.printer -> Ostap.Pretty.printer
)
ident(
  ext_ref Common.sblock
)
"L4.ml" 339 12801 12821 "L4.ml" 339 12801 12831
type(
  string
)
"L4.ml" 339 12801 12832 "L4.ml" 339 12801 12835
type(
  string
)
"L4.ml" 340 12837 12853 "L4.ml" 340 12837 12857
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Common.vert
)
"L4.ml" 340 12837 12859 "L4.ml" 340 12837 12862
type(
  (string * 'n -> Ostap.Pretty.printer) ->
  (string * 'n) list -> Ostap.Pretty.printer list
)
ident(
  ext_ref List.map
)
"L4.ml" 340 12837 12869 "L4.ml" 340 12837 12873
type(
  string
)
ident(
  def name "L4.ml" 340 12837 12881 "L4.ml" 340 12837 12928
)
"L4.ml" 340 12837 12875 "L4.ml" 340 12837 12876
type(
  'n
)
ident(
  def t "L4.ml" 340 12837 12881 "L4.ml" 340 12837 12928
)
"L4.ml" 340 12837 12869 "L4.ml" 340 12837 12876
type(
  string * 'n
)
"L4.ml" 340 12837 12881 "L4.ml" 340 12837 12884
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Common.hov
)
"L4.ml" 340 12837 12886 "L4.ml" 340 12837 12889
type(
  Ostap.Pretty.printer -> 'n -> Ostap.Pretty.printer
)
ident(
  int_ref typ "L4.ml" 334 12570 12582 "L4.ml" 334 12570 12585
)
"L4.ml" 340 12837 12891 "L4.ml" 340 12837 12897
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 340 12837 12899 "L4.ml" 340 12837 12906
type(
  string -> string
)
ident(
  int_ref protect "L4.ml" 318 11817 11825 "L4.ml" 318 11817 11832
)
"L4.ml" 340 12837 12907 "L4.ml" 340 12837 12911
type(
  string
)
ident(
  int_ref name "L4.ml" 340 12837 12869 "L4.ml" 340 12837 12873
)
"L4.ml" 340 12837 12898 "L4.ml" 340 12837 12912
call(
  stack
)
type(
  string
)
"L4.ml" 340 12837 12890 "L4.ml" 340 12837 12913
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 340 12837 12914 "L4.ml" 340 12837 12915
type(
  'n
)
ident(
  int_ref t "L4.ml" 340 12837 12875 "L4.ml" 340 12837 12876
)
"L4.ml" 340 12837 12886 "L4.ml" 340 12837 12915
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 340 12837 12917 "L4.ml" 340 12837 12923
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 340 12837 12924 "L4.ml" 340 12837 12927
type(
  string
)
"L4.ml" 340 12837 12917 "L4.ml" 340 12837 12927
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 340 12837 12885 "L4.ml" 340 12837 12928
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 340 12837 12881 "L4.ml" 340 12837 12928
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 340 12837 12863 "L4.ml" 340 12837 12929
type(
  string * 'n -> Ostap.Pretty.printer
)
"L4.ml" 340 12837 12930 "L4.ml" 340 12837 12931
type(
  (string * 'n) list
)
ident(
  int_ref f "L4.ml" 338 12781 12795 "L4.ml" 338 12781 12796
)
"L4.ml" 340 12837 12858 "L4.ml" 340 12837 12932
call(
  stack
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 340 12837 12852 "L4.ml" 340 12837 12933
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 339 12801 12814 "L4.ml" 340 12837 12933
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 341 12936 12949 "L4.ml" 341 12936 12953
type(
  Ostap.Pretty.printer
)
ident(
  int_ref decl "L4.ml" 334 12570 12586 "L4.ml" 334 12570 12590
)
"L4.ml" 339 12801 12813 "L4.ml" 342 12954 12963
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 339 12801 12809 "L4.ml" 342 12954 12963
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 334 12570 12593 "L4.ml" 342 12954 12963
type(
  'n -> Ostap.Pretty.printer
)
"L4.ml" 334 12570 12586 "L4.ml" 342 12954 12963
type(
  Ostap.Pretty.printer -> 'n -> Ostap.Pretty.printer
)
"L4.ml" 344 12968 12980 "L4.ml" 344 12968 12989
type(
  'u ->
  'v ->
  ('w -> Ostap.Pretty.printer Monad.Id.t) ->
  ([> `Assign of 'w * 'w
    | `Call of
        'y * 'w list * [> `Proc of string * ([> `Var ] * 'z * 'a1) list ]
    | `If of ('w * 'x list) list * 'x list
    | `While of 'w * 'x list ]
   as 'x) ->
  Ostap.Pretty.printer Monad.Id.t
)
ident(
  def statement "L4.ml" 344 12968 12972 "L4.ml" 401 15058 15063
)
"L4.ml" 344 12968 12990 "L4.ml" 344 12968 12993
type(
  'u
)
ident(
  def ref "L4.ml" 344 12968 12994 "L4.ml" 360 13557 13571
)
"L4.ml" 344 12968 12994 "L4.ml" 344 12968 12999
type(
  'v
)
ident(
  def cexpr "L4.ml" 344 12968 13000 "L4.ml" 360 13557 13571
)
"L4.ml" 344 12968 13000 "L4.ml" 344 12968 13004
type(
  'w -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  def expr "L4.ml" 344 12968 13007 "L4.ml" 360 13557 13571
)
"L4.ml" 345 13009 13015 "L4.ml" 345 13009 13038
type(
  ('w -> Ostap.Pretty.printer Monad.Id.t) ->
  (('x -> Ostap.Pretty.printer Monad.Id.t) ->
   'x -> Ostap.Pretty.printer Monad.Id.t) ->
  'x -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref SimpleStatement.print_c
)
"L4.ml" 345 13009 13039 "L4.ml" 345 13009 13043
type(
  'w -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref expr "L4.ml" 344 12968 13000 "L4.ml" 344 12968 13004
)
"L4.ml" 345 13009 13015 "L4.ml" 345 13009 13043
call(
  stack
)
type(
  (('x -> Ostap.Pretty.printer Monad.Id.t) ->
   'x -> Ostap.Pretty.printer Monad.Id.t) ->
  'x -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 346 13047 13058 "L4.ml" 346 13047 13061
type(
  ('x -> Ostap.Pretty.printer Monad.Id.t) ->
  'x -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  def ext "L4.ml" 346 13047 13065 "L4.ml" 359 13510 13556
)
"L4.ml" 347 13075 13091 "L4.ml" 347 13075 13092
type(
  'y
)
"L4.ml" 347 13075 13094 "L4.ml" 347 13075 13098
type(
  'w list
)
ident(
  def args "L4.ml" 348 13124 13135 "L4.ml" 358 13497 13509
)
"L4.ml" 347 13075 13107 "L4.ml" 347 13075 13111
type(
  string
)
ident(
  def name "L4.ml" 348 13124 13135 "L4.ml" 358 13497 13509
)
"L4.ml" 347 13075 13113 "L4.ml" 347 13075 13118
type(
  (([> `Var ] as 'b1) * 'z * 'a1) list
)
ident(
  def fargs "L4.ml" 348 13124 13135 "L4.ml" 358 13497 13509
)
"L4.ml" 347 13075 13107 "L4.ml" 347 13075 13118
type(
  string * ('b1 * 'z * 'a1) list
)
"L4.ml" 347 13075 13100 "L4.ml" 347 13075 13119
type(
  [> `Proc of string * ('b1 * 'z * 'a1) list ] as 'c1
)
"L4.ml" 347 13075 13091 "L4.ml" 347 13075 13119
type(
  'y * 'w list * 'c1
)
"L4.ml" 347 13075 13084 "L4.ml" 347 13075 13120
type(
  'x
)
"L4.ml" 348 13124 13135 "L4.ml" 348 13124 13138
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Common.hov
)
"L4.ml" 348 13124 13140 "L4.ml" 348 13124 13146
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 348 13124 13148 "L4.ml" 348 13124 13155
type(
  string -> string
)
ident(
  int_ref protect "L4.ml" 318 11817 11825 "L4.ml" 318 11817 11832
)
"L4.ml" 348 13124 13156 "L4.ml" 348 13124 13160
type(
  string
)
ident(
  int_ref name "L4.ml" 347 13075 13107 "L4.ml" 347 13075 13111
)
"L4.ml" 348 13124 13147 "L4.ml" 348 13124 13161
call(
  stack
)
type(
  string
)
"L4.ml" 348 13124 13140 "L4.ml" 348 13124 13161
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 349 13164 13180 "L4.ml" 349 13164 13186
type(
  Ostap.Pretty.printer -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.rboxed
)
"L4.ml" 350 13189 13207 "L4.ml" 350 13189 13223
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.listByCommaBreak
)
"L4.ml" 351 13226 13246 "L4.ml" 351 13226 13249
type(
  (('b1 * 'z * 'a1) * 'w -> Ostap.Pretty.printer) ->
  (('b1 * 'z * 'a1) * 'w) list -> Ostap.Pretty.printer list
)
ident(
  ext_ref List.map
)
"L4.ml" 352 13251 13280 "L4.ml" 352 13251 13281
type(
  'b1
)
ident(
  def t "L4.ml" 353 13297 13322 "L4.ml" 353 13297 13390
)
"L4.ml" 352 13251 13283 "L4.ml" 352 13251 13284
type(
  'z
)
"L4.ml" 352 13251 13286 "L4.ml" 352 13251 13287
type(
  'a1
)
"L4.ml" 352 13251 13280 "L4.ml" 352 13251 13287
type(
  'b1 * 'z * 'a1
)
"L4.ml" 352 13251 13290 "L4.ml" 352 13251 13291
type(
  'w
)
ident(
  def e "L4.ml" 353 13297 13322 "L4.ml" 353 13297 13390
)
"L4.ml" 352 13251 13279 "L4.ml" 352 13251 13291
type(
  ('b1 * 'z * 'a1) * 'w
)
"L4.ml" 353 13297 13328 "L4.ml" 353 13297 13329
type(
  'b1
)
ident(
  int_ref t "L4.ml" 352 13251 13280 "L4.ml" 352 13251 13281
)
"L4.ml" 353 13297 13335 "L4.ml" 353 13297 13339
type(
  'b1
)
"L4.ml" 353 13297 13343 "L4.ml" 353 13297 13346
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.seq
)
"L4.ml" 353 13297 13348 "L4.ml" 353 13297 13354
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 353 13297 13355 "L4.ml" 353 13297 13358
type(
  string
)
"L4.ml" 353 13297 13348 "L4.ml" 353 13297 13358
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 353 13297 13360 "L4.ml" 353 13297 13366
type(
  Ostap.Pretty.printer -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.rboxed
)
"L4.ml" 353 13297 13368 "L4.ml" 353 13297 13372
type(
  'w -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref expr "L4.ml" 344 12968 13000 "L4.ml" 344 12968 13004
)
"L4.ml" 353 13297 13373 "L4.ml" 353 13297 13374
type(
  'w
)
ident(
  int_ref e "L4.ml" 352 13251 13290 "L4.ml" 352 13251 13291
)
"L4.ml" 353 13297 13367 "L4.ml" 353 13297 13375
call(
  stack
)
type(
  Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 353 13297 13360 "L4.ml" 353 13297 13375
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 353 13297 13347 "L4.ml" 353 13297 13376
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 353 13297 13343 "L4.ml" 353 13297 13376
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 353 13297 13379 "L4.ml" 353 13297 13380
type(
  'b1
)
"L4.ml" 353 13297 13384 "L4.ml" 353 13297 13388
type(
  'w -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref expr "L4.ml" 344 12968 13000 "L4.ml" 344 12968 13004
)
"L4.ml" 353 13297 13389 "L4.ml" 353 13297 13390
type(
  'w
)
ident(
  int_ref e "L4.ml" 352 13251 13290 "L4.ml" 352 13251 13291
)
"L4.ml" 353 13297 13384 "L4.ml" 353 13297 13390
call(
  tail
)
type(
  Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 353 13297 13322 "L4.ml" 353 13297 13390
type(
  Ostap.Pretty.printer
)
"L4.ml" 352 13251 13273 "L4.ml" 354 13391 13414
type(
  ('b1 * 'z * 'a1) * 'w -> Ostap.Pretty.printer
)
"L4.ml" 355 13416 13439 "L4.ml" 355 13416 13446
type(
  ('b1 * 'z * 'a1) list -> 'w list -> (('b1 * 'z * 'a1) * 'w) list
)
ident(
  ext_ref List.combine
)
"L4.ml" 355 13416 13447 "L4.ml" 355 13416 13452
type(
  ('b1 * 'z * 'a1) list
)
ident(
  int_ref fargs "L4.ml" 347 13075 13113 "L4.ml" 347 13075 13118
)
"L4.ml" 355 13416 13453 "L4.ml" 355 13416 13457
type(
  'w list
)
ident(
  int_ref args "L4.ml" 347 13075 13094 "L4.ml" 347 13075 13098
)
"L4.ml" 355 13416 13438 "L4.ml" 355 13416 13458
call(
  stack
)
type(
  (('b1 * 'z * 'a1) * 'w) list
)
"L4.ml" 350 13189 13224 "L4.ml" 356 13459 13478
call(
  stack
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 349 13164 13187 "L4.ml" 357 13479 13496
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 349 13164 13180 "L4.ml" 357 13479 13496
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 348 13124 13139 "L4.ml" 358 13497 13509
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 348 13124 13135 "L4.ml" 358 13497 13509
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 359 13510 13519 "L4.ml" 359 13510 13520
type(
  'x
)
ident(
  def s "L4.ml" 359 13510 13524 "L4.ml" 359 13510 13556
)
"L4.ml" 359 13510 13524 "L4.ml" 359 13510 13527
type(
  ('x -> Ostap.Pretty.printer Monad.Id.t) ->
  'x -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref ext "L4.ml" 346 13047 13058 "L4.ml" 346 13047 13061
)
"L4.ml" 359 13510 13529 "L4.ml" 359 13510 13538
type(
  'u ->
  'v ->
  ('w -> Ostap.Pretty.printer Monad.Id.t) ->
  'x -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref statement "L4.ml" 344 12968 12980 "L4.ml" 344 12968 12989
)
"L4.ml" 359 13510 13539 "L4.ml" 359 13510 13542
type(
  'u
)
ident(
  int_ref ref "L4.ml" 344 12968 12990 "L4.ml" 344 12968 12993
)
"L4.ml" 359 13510 13543 "L4.ml" 359 13510 13548
type(
  'v
)
ident(
  int_ref cexpr "L4.ml" 344 12968 12994 "L4.ml" 344 12968 12999
)
"L4.ml" 359 13510 13549 "L4.ml" 359 13510 13553
type(
  'w -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref expr "L4.ml" 344 12968 13000 "L4.ml" 344 12968 13004
)
"L4.ml" 359 13510 13528 "L4.ml" 359 13510 13554
call(
  stack
)
type(
  'x -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 359 13510 13555 "L4.ml" 359 13510 13556
type(
  'x
)
ident(
  int_ref s "L4.ml" 359 13510 13519 "L4.ml" 359 13510 13520
)
"L4.ml" 359 13510 13524 "L4.ml" 359 13510 13556
call(
  tail
)
type(
  Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 346 13047 13065 "L4.ml" 359 13510 13556
type(
  'x -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 346 13047 13053 "L4.ml" 360 13557 13564
type(
  (('x -> Ostap.Pretty.printer Monad.Id.t) ->
   'x -> Ostap.Pretty.printer Monad.Id.t) ->
  'x -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 345 13009 13015 "L4.ml" 360 13557 13564
type(
  ((('x -> Ostap.Pretty.printer Monad.Id.t) ->
    'x -> Ostap.Pretty.printer Monad.Id.t) ->
   'x -> Ostap.Pretty.printer Monad.Id.t) ->
  ((('x -> Ostap.Pretty.printer Monad.Id.t) ->
    'x -> Ostap.Pretty.printer Monad.Id.t) ->
   'x -> Ostap.Pretty.printer Monad.Id.t) ->
  (('x -> Ostap.Pretty.printer Monad.Id.t) ->
   'x -> Ostap.Pretty.printer Monad.Id.t) ->
  'x -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref Common.( ++ )
)
"L4.ml" 360 13557 13566 "L4.ml" 360 13557 13571
type(
  ('x -> Ostap.Pretty.printer Monad.Id.t) ->
  'x -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref Common.apply
)
"L4.ml" 344 12968 13007 "L4.ml" 360 13557 13571
call(
  tail
)
type(
  'x -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 344 12968 13000 "L4.ml" 360 13557 13571
type(
  ('w -> Ostap.Pretty.printer Monad.Id.t) ->
  'x -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 344 12968 12994 "L4.ml" 360 13557 13571
type(
  'v ->
  ('w -> Ostap.Pretty.printer Monad.Id.t) ->
  'x -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 344 12968 12990 "L4.ml" 360 13557 13571
type(
  'u ->
  'v ->
  ('w -> Ostap.Pretty.printer Monad.Id.t) ->
  'x -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 362 13573 13585 "L4.ml" 362 13573 13597
type(
  (Ostap.Pretty.printer -> 'd1 -> Ostap.Pretty.printer) ->
  ('e1 -> Ostap.Pretty.printer) ->
  (('g1 * (string * 'd1) list * (string list * 'd1) list) *
   (string * ([< `Val | `Var ] * string * 'd1) list * 'f1 * 'e1 list) list
   as 'f1) ->
  Ostap.Pretty.printer
)
ident(
  def declarations "L4.ml" 362 13573 13577 "L4.ml" 401 15058 15063
)
"L4.ml" 362 13573 13598 "L4.ml" 362 13573 13601
type(
  Ostap.Pretty.printer -> 'd1 -> Ostap.Pretty.printer
)
ident(
  def typ "L4.ml" 362 13573 13602 "L4.ml" 368 13810 13817
)
"L4.ml" 362 13573 13602 "L4.ml" 362 13573 13606
type(
  'e1 -> Ostap.Pretty.printer
)
ident(
  def stmt "L4.ml" 362 13573 13607 "L4.ml" 368 13810 13817
)
"L4.ml" 362 13573 13609 "L4.ml" 362 13573 13610
type(
  'g1
)
"L4.ml" 362 13573 13612 "L4.ml" 362 13573 13613
type(
  (string * 'd1) list
)
ident(
  def t "L4.ml" 363 13624 13630 "L4.ml" 368 13810 13817
)
"L4.ml" 362 13573 13615 "L4.ml" 362 13573 13616
type(
  (string list * 'd1) list
)
ident(
  def v "L4.ml" 363 13624 13630 "L4.ml" 368 13810 13817
)
"L4.ml" 362 13573 13609 "L4.ml" 362 13573 13616
type(
  'g1 * (string * 'd1) list * (string list * 'd1) list
)
"L4.ml" 362 13573 13619 "L4.ml" 362 13573 13620
type(
  (string * (([< `Val | `Var ] as 'i1) * string * 'd1) list * 'f1 * 'e1 list)
  list as 'h1
)
ident(
  def p "L4.ml" 363 13624 13630 "L4.ml" 368 13810 13817
)
"L4.ml" 362 13573 13608 "L4.ml" 362 13573 13620
type(
  'f1
)
"L4.ml" 363 13624 13630 "L4.ml" 363 13624 13634
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Common.vert
)
"L4.ml" 364 13637 13646 "L4.ml" 364 13637 13662
type(
  (Ostap.Pretty.printer -> 'd1 -> Ostap.Pretty.printer) ->
  (string * 'd1) list -> Ostap.Pretty.printer list
)
ident(
  ext_ref TypeDecl.print_c
)
"L4.ml" 364 13637 13663 "L4.ml" 364 13637 13666
type(
  Ostap.Pretty.printer -> 'd1 -> Ostap.Pretty.printer
)
ident(
  int_ref typ "L4.ml" 362 13573 13598 "L4.ml" 362 13573 13601
)
"L4.ml" 364 13637 13667 "L4.ml" 364 13637 13668
type(
  (string * 'd1) list
)
ident(
  int_ref t "L4.ml" 362 13573 13612 "L4.ml" 362 13573 13613
)
"L4.ml" 364 13637 13645 "L4.ml" 364 13637 13669
call(
  stack
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 365 13673 13682 "L4.ml" 365 13673 13697
type(
  (Ostap.Pretty.printer -> 'd1 -> Ostap.Pretty.printer) ->
  (string list * 'd1) list -> Ostap.Pretty.printer list
)
ident(
  ext_ref VarDecl.print_c
)
"L4.ml" 365 13673 13698 "L4.ml" 365 13673 13701
type(
  Ostap.Pretty.printer -> 'd1 -> Ostap.Pretty.printer
)
ident(
  int_ref typ "L4.ml" 362 13573 13598 "L4.ml" 362 13573 13601
)
"L4.ml" 365 13673 13702 "L4.ml" 365 13673 13703
type(
  (string list * 'd1) list
)
ident(
  int_ref v "L4.ml" 362 13573 13615 "L4.ml" 362 13573 13616
)
"L4.ml" 365 13673 13681 "L4.ml" 365 13673 13704
call(
  stack
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 366 13707 13716 "L4.ml" 366 13707 13738
type(
  (Ostap.Pretty.printer -> 'd1 -> Ostap.Pretty.printer) ->
  'h1 -> Ostap.Pretty.printer list
)
ident(
  ext_ref ProcDecl.print_proto_c
)
"L4.ml" 366 13707 13739 "L4.ml" 366 13707 13742
type(
  Ostap.Pretty.printer -> 'd1 -> Ostap.Pretty.printer
)
ident(
  int_ref typ "L4.ml" 362 13573 13598 "L4.ml" 362 13573 13601
)
"L4.ml" 366 13707 13743 "L4.ml" 366 13707 13744
type(
  'h1
)
ident(
  int_ref p "L4.ml" 362 13573 13619 "L4.ml" 362 13573 13620
)
"L4.ml" 366 13707 13715 "L4.ml" 366 13707 13745
call(
  stack
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 367 13748 13757 "L4.ml" 367 13748 13773
type(
  (Ostap.Pretty.printer -> 'd1 -> Ostap.Pretty.printer) ->
  ('f1 -> Ostap.Pretty.printer) ->
  ('e1 -> Ostap.Pretty.printer) -> 'h1 -> Ostap.Pretty.printer list
)
ident(
  ext_ref ProcDecl.print_c
)
"L4.ml" 367 13748 13774 "L4.ml" 367 13748 13777
type(
  Ostap.Pretty.printer -> 'd1 -> Ostap.Pretty.printer
)
ident(
  int_ref typ "L4.ml" 362 13573 13598 "L4.ml" 362 13573 13601
)
"L4.ml" 367 13748 13779 "L4.ml" 367 13748 13791
type(
  (Ostap.Pretty.printer -> 'd1 -> Ostap.Pretty.printer) ->
  ('e1 -> Ostap.Pretty.printer) -> 'f1 -> Ostap.Pretty.printer
)
ident(
  int_ref declarations "L4.ml" 362 13573 13585 "L4.ml" 362 13573 13597
)
"L4.ml" 367 13748 13792 "L4.ml" 367 13748 13795
type(
  Ostap.Pretty.printer -> 'd1 -> Ostap.Pretty.printer
)
ident(
  int_ref typ "L4.ml" 362 13573 13598 "L4.ml" 362 13573 13601
)
"L4.ml" 367 13748 13796 "L4.ml" 367 13748 13800
type(
  'e1 -> Ostap.Pretty.printer
)
ident(
  int_ref stmt "L4.ml" 362 13573 13602 "L4.ml" 362 13573 13606
)
"L4.ml" 367 13748 13778 "L4.ml" 367 13748 13801
call(
  stack
)
type(
  'f1 -> Ostap.Pretty.printer
)
"L4.ml" 367 13748 13802 "L4.ml" 367 13748 13806
type(
  'e1 -> Ostap.Pretty.printer
)
ident(
  int_ref stmt "L4.ml" 362 13573 13602 "L4.ml" 362 13573 13606
)
"L4.ml" 367 13748 13807 "L4.ml" 367 13748 13808
type(
  'h1
)
ident(
  int_ref p "L4.ml" 362 13573 13619 "L4.ml" 362 13573 13620
)
"L4.ml" 367 13748 13756 "L4.ml" 367 13748 13809
call(
  stack
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 366 13707 13715 "L4.ml" 367 13748 13809
call(
  stack
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list ->
  Ostap.Pretty.printer list -> Ostap.Pretty.printer list
)
ident(
  ext_ref Pervasives.( @ )
)
"L4.ml" 365 13673 13681 "L4.ml" 367 13748 13809
call(
  stack
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list ->
  Ostap.Pretty.printer list -> Ostap.Pretty.printer list
)
ident(
  ext_ref Pervasives.( @ )
)
"L4.ml" 364 13637 13645 "L4.ml" 367 13748 13809
type(
  Ostap.Pretty.printer list ->
  Ostap.Pretty.printer list -> Ostap.Pretty.printer list
)
ident(
  ext_ref Pervasives.( @ )
)
"L4.ml" 363 13624 13635 "L4.ml" 368 13810 13817
call(
  stack
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 363 13624 13630 "L4.ml" 368 13810 13817
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 362 13573 13607 "L4.ml" 368 13810 13817
type(
  'f1 -> Ostap.Pretty.printer
)
"L4.ml" 362 13573 13602 "L4.ml" 368 13810 13817
type(
  ('e1 -> Ostap.Pretty.printer) -> 'f1 -> Ostap.Pretty.printer
)
"L4.ml" 362 13573 13598 "L4.ml" 368 13810 13817
type(
  (Ostap.Pretty.printer -> 'd1 -> Ostap.Pretty.printer) ->
  ('e1 -> Ostap.Pretty.printer) -> 'f1 -> Ostap.Pretty.printer
)
"L4.ml" 370 13819 13827 "L4.ml" 370 13819 13834
type(
  'j1 *
  (('k1 *
    (String.t *
     ([< `Array of
           ([> `Binop of
                 [< `Add
                  | `And
                  | `Div
                  | `Eq
                  | `Ge
                  | `Gt
                  | `Le
                  | `Lt
                  | `Mod
                  | `Mul
                  | `Ne
                  | `Or
                  | `Sub ] *
                 'm1 * 'm1
             | `Const of [< `False | `Literal of int | `True ]
             | `Field of 'm1 * string
             | `Ident of
                 string *
                 [> `Param of string * 'n1
                  | `VParam of string * 'o1
                  | `Var of string * 'p1 ]
             | `Index of 'm1 * 'm1
             | `Unop of [< `Neg | `Not ] * 'm1 ]
            as 'm1) *
           'l1
       | `Bool
       | `Int
       | `Record of (string * 'l1) list
       | `User of 'q1 * string * 'r1 ]
      as 'l1))
    list * (String.t list * 'l1) list) *
   ((String.t * ([< `Val | `Var ] * string * 'l1) list *
     (('k1 * (String.t * 'l1) list * (String.t list * 'l1) list) * 's1) *
     ([> `Assign of
           ([> `Binop of
                 [< `Add
                  | `And
                  | `Div
                  | `Eq
                  | `Ge
                  | `Gt
                  | `Le
                  | `Lt
                  | `Mod
                  | `Mul
                  | `Ne
                  | `Or
                  | `Sub ] *
                 'u1 * 'u1
             | `Const of [< `False | `Literal of int | `True ]
             | `Field of 'u1 * string
             | `Ident of
                 string *
                 [> `Param of string * 'v1
                  | `VParam of string * 'w1
                  | `Var of string * 'x1 ]
             | `Index of 'u1 * 'u1
             | `Unop of [< `Neg | `Not ] * 'u1 ]
            as 'u1) *
           'u1
       | `Call of
           'y1 * 'u1 list *
           [> `Proc of string * ([> `Var ] * 'z1 * 'a2) list ]
       | `If of ('u1 * 't1 list) list * 't1 list
       | `While of 'u1 * 't1 list ]
      as 't1)
     list)
    list as 's1)) *
  't1 list -> Ostap.Pretty.printer
)
ident(
  def program "L4.ml" 399 15043 15050 "L4.ml" 401 15058 15063
)
"L4.ml" 370 13819 13837 "L4.ml" 370 13819 13838
type(
  'j1
)
"L4.ml" 370 13819 13842 "L4.ml" 370 13819 13843
type(
  'k1 * (String.t * 'l1) list * (String.t list * 'l1) list
)
"L4.ml" 370 13819 13845 "L4.ml" 370 13819 13846
type(
  's1
)
ident(
  def p "L4.ml" 371 13873 13879 "L4.ml" 399 15043 15050
)
"L4.ml" 370 13819 13842 "L4.ml" 370 13819 13846
type(
  ('k1 * (String.t * 'l1) list * (String.t list * 'l1) list) * 's1
)
"L4.ml" 370 13819 13841 "L4.ml" 370 13819 13852
type(
  ('k1 * (String.t * 'l1) list * (String.t list * 'l1) list) * 's1
)
ident(
  def d "L4.ml" 371 13873 13879 "L4.ml" 399 15043 15050
)
"L4.ml" 370 13819 13855 "L4.ml" 370 13819 13856
type(
  't1 list
)
"L4.ml" 370 13819 13837 "L4.ml" 370 13819 13856
type(
  'j1 * (('k1 * (String.t * 'l1) list * (String.t list * 'l1) list) * 's1) *
  't1 list
)
"L4.ml" 370 13819 13836 "L4.ml" 370 13819 13862
type(
  'j1 * (('k1 * (String.t * 'l1) list * (String.t list * 'l1) list) * 's1) *
  't1 list
)
ident(
  def m "L4.ml" 371 13873 13879 "L4.ml" 399 15043 15050
)
"L4.ml" 371 13873 13883 "L4.ml" 371 13873 13887
type(
  't1 -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  def stmt "L4.ml" 372 13935 13941 "L4.ml" 399 15043 15050
)
"L4.ml" 371 13873 13890 "L4.ml" 371 13873 13899
type(
  ((_[> `Binop of
          _[< `Add
            | `And
            | `Div
            | `Eq
            | `Ge
            | `Gt
            | `Le
            | `Lt
            | `Mod
            | `Mul
            | `Ne
            | `Or
            | `Sub ] *
          'b2 * 'b2
      | `Const of _[< `False | `Literal of int | `True ]
      | `Field of 'b2 * string
      | `Ident of
          string *
          _[> `Param of string * '_c2
            | `VParam of string * '_d2
            | `Var of string * '_e2 ]
      | `Index of 'b2 * 'b2
      | `Unop of _[< `Neg | `Not ] * 'b2 ]
    as 'b2) ->
   Ostap.Pretty.printer) ->
  ((_[> `Binop of
          _[< `Add
            | `And
            | `Div
            | `Eq
            | `Ge
            | `Gt
            | `Le
            | `Lt
            | `Mod
            | `Mul
            | `Ne
            | `Or
            | `Sub ] *
          'f2 * 'f2
      | `Const of _[< `False | `Literal of int | `True ]
      | `Field of 'f2 * string
      | `Ident of
          string *
          _[> `Param of string * '_g2
            | `VParam of string * '_h2
            | `Var of string * '_i2 ]
      | `Index of 'f2 * 'f2
      | `Unop of _[< `Neg | `Not ] * 'f2 ]
    as 'f2) ->
   Ostap.Pretty.printer) ->
  ('u1 -> Ostap.Pretty.printer Monad.Id.t) ->
  't1 -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref statement "L4.ml" 344 12968 12980 "L4.ml" 344 12968 12989
)
"L4.ml" 371 13873 13900 "L4.ml" 371 13873 13909
type(
  'b2 -> Ostap.Pretty.printer
)
ident(
  int_ref reference "L4.ml" 320 11854 11862 "L4.ml" 320 11854 11871
)
"L4.ml" 371 13873 13910 "L4.ml" 371 13873 13920
type(
  'f2 -> Ostap.Pretty.printer
)
ident(
  int_ref expression "L4.ml" 320 11854 11873 "L4.ml" 320 11854 11883
)
"L4.ml" 371 13873 13921 "L4.ml" 371 13873 13931
type(
  'u1 -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref expression "L4.ml" 320 11854 11873 "L4.ml" 320 11854 11883
)
"L4.ml" 371 13873 13890 "L4.ml" 371 13873 13931
call(
  stack
)
type(
  't1 -> Ostap.Pretty.printer Monad.Id.t
)
"L4.ml" 372 13935 13945 "L4.ml" 372 13935 13955
type(
  ('j2 * (String.t * 'k2) list * (String.t list * 'l2) list) *
  (String.t * 'm2 * 'n2 * 'o2) list -> Ostap.Pretty.printer
)
ident(
  def predefined "L4.ml" 396 14954 14960 "L4.ml" 399 15043 15050
)
"L4.ml" 372 13935 13958 "L4.ml" 372 13935 13959
type(
  'j2
)
"L4.ml" 372 13935 13961 "L4.ml" 372 13935 13962
type(
  (String.t * 'k2) list
)
ident(
  def t "L4.ml" 373 13973 13981 "L4.ml" 394 14927 14944
)
"L4.ml" 372 13935 13964 "L4.ml" 372 13935 13965
type(
  (String.t list * 'l2) list
)
ident(
  def v "L4.ml" 373 13973 13981 "L4.ml" 394 14927 14944
)
"L4.ml" 372 13935 13958 "L4.ml" 372 13935 13965
type(
  'j2 * (String.t * 'k2) list * (String.t list * 'l2) list
)
"L4.ml" 372 13935 13968 "L4.ml" 372 13935 13969
type(
  (String.t * 'm2 * 'n2 * 'o2) list
)
ident(
  def p "L4.ml" 373 13973 13981 "L4.ml" 394 14927 14944
)
"L4.ml" 372 13935 13957 "L4.ml" 372 13935 13969
type(
  ('j2 * (String.t * 'k2) list * (String.t list * 'l2) list) *
  (String.t * 'm2 * 'n2 * 'o2) list
)
"L4.ml" 373 13973 13996 "L4.ml" 373 13973 14013
call(
  stack
)
"L4.ml" 374 14017 14029 "L4.ml" 374 14017 14030
type(
  S.t
)
ident(
  def s "L4.ml" 375 14096 14104 "L4.ml" 394 14927 14944
)
"L4.ml" 374 14017 14033 "L4.ml" 374 14017 14042
type(
  (S.t -> String.t * 'm2 * 'n2 * 'o2 -> S.t) ->
  S.t -> (String.t * 'm2 * 'n2 * 'o2) list -> S.t
)
ident(
  ext_ref List.fold_left
)
"L4.ml" 374 14017 14048 "L4.ml" 374 14017 14049
type(
  S.t
)
ident(
  def s "L4.ml" 374 14017 14050 "L4.ml" 374 14017 14081
)
"L4.ml" 374 14017 14051 "L4.ml" 374 14017 14055
type(
  String.t
)
ident(
  def name "L4.ml" 374 14017 14069 "L4.ml" 374 14017 14081
)
"L4.ml" 374 14017 14057 "L4.ml" 374 14017 14058
type(
  'm2
)
"L4.ml" 374 14017 14060 "L4.ml" 374 14017 14061
type(
  'n2
)
"L4.ml" 374 14017 14063 "L4.ml" 374 14017 14064
type(
  'o2
)
"L4.ml" 374 14017 14051 "L4.ml" 374 14017 14064
type(
  String.t * 'm2 * 'n2 * 'o2
)
"L4.ml" 374 14017 14069 "L4.ml" 374 14017 14074
type(
  String.t -> S.t -> S.t
)
ident(
  ext_ref S.add
)
"L4.ml" 374 14017 14075 "L4.ml" 374 14017 14079
type(
  String.t
)
ident(
  int_ref name "L4.ml" 374 14017 14051 "L4.ml" 374 14017 14055
)
"L4.ml" 374 14017 14080 "L4.ml" 374 14017 14081
type(
  S.t
)
ident(
  int_ref s "L4.ml" 374 14017 14048 "L4.ml" 374 14017 14049
)
"L4.ml" 374 14017 14069 "L4.ml" 374 14017 14081
call(
  tail
)
type(
  S.t
)
"L4.ml" 374 14017 14050 "L4.ml" 374 14017 14081
type(
  String.t * 'm2 * 'n2 * 'o2 -> S.t
)
"L4.ml" 374 14017 14043 "L4.ml" 374 14017 14082
type(
  S.t -> String.t * 'm2 * 'n2 * 'o2 -> S.t
)
"L4.ml" 374 14017 14083 "L4.ml" 374 14017 14090
type(
  S.t
)
ident(
  ext_ref S.empty
)
"L4.ml" 374 14017 14091 "L4.ml" 374 14017 14092
type(
  (String.t * 'm2 * 'n2 * 'o2) list
)
ident(
  int_ref p "L4.ml" 372 13935 13968 "L4.ml" 372 13935 13969
)
"L4.ml" 374 14017 14033 "L4.ml" 374 14017 14092
call(
  stack
)
type(
  S.t
)
"L4.ml" 375 14096 14108 "L4.ml" 375 14096 14109
type(
  S.t
)
ident(
  def s "L4.ml" 376 14163 14171 "L4.ml" 394 14927 14944
)
"L4.ml" 375 14096 14112 "L4.ml" 375 14096 14121
type(
  (S.t -> String.t * 'k2 -> S.t) -> S.t -> (String.t * 'k2) list -> S.t
)
ident(
  ext_ref List.fold_left
)
"L4.ml" 375 14096 14127 "L4.ml" 375 14096 14128
type(
  S.t
)
ident(
  def s "L4.ml" 375 14096 14129 "L4.ml" 375 14096 14154
)
"L4.ml" 375 14096 14130 "L4.ml" 375 14096 14134
type(
  String.t
)
ident(
  def name "L4.ml" 375 14096 14142 "L4.ml" 375 14096 14154
)
"L4.ml" 375 14096 14136 "L4.ml" 375 14096 14137
type(
  'k2
)
"L4.ml" 375 14096 14130 "L4.ml" 375 14096 14137
type(
  String.t * 'k2
)
"L4.ml" 375 14096 14142 "L4.ml" 375 14096 14147
type(
  String.t -> S.t -> S.t
)
ident(
  ext_ref S.add
)
"L4.ml" 375 14096 14148 "L4.ml" 375 14096 14152
type(
  String.t
)
ident(
  int_ref name "L4.ml" 375 14096 14130 "L4.ml" 375 14096 14134
)
"L4.ml" 375 14096 14153 "L4.ml" 375 14096 14154
type(
  S.t
)
ident(
  int_ref s "L4.ml" 375 14096 14127 "L4.ml" 375 14096 14128
)
"L4.ml" 375 14096 14142 "L4.ml" 375 14096 14154
call(
  tail
)
type(
  S.t
)
"L4.ml" 375 14096 14129 "L4.ml" 375 14096 14154
type(
  String.t * 'k2 -> S.t
)
"L4.ml" 375 14096 14122 "L4.ml" 375 14096 14155
type(
  S.t -> String.t * 'k2 -> S.t
)
"L4.ml" 375 14096 14156 "L4.ml" 375 14096 14157
type(
  S.t
)
ident(
  int_ref s "L4.ml" 374 14017 14029 "L4.ml" 374 14017 14030
)
"L4.ml" 375 14096 14158 "L4.ml" 375 14096 14159
type(
  (String.t * 'k2) list
)
ident(
  int_ref t "L4.ml" 372 13935 13961 "L4.ml" 372 13935 13962
)
"L4.ml" 375 14096 14112 "L4.ml" 375 14096 14159
call(
  stack
)
type(
  S.t
)
"L4.ml" 376 14163 14175 "L4.ml" 376 14163 14176
type(
  S.t
)
ident(
  def s "L4.ml" 379 14285 14293 "L4.ml" 394 14927 14944
)
"L4.ml" 376 14163 14179 "L4.ml" 376 14163 14188
type(
  (S.t -> String.t list * 'l2 -> S.t) ->
  S.t -> (String.t list * 'l2) list -> S.t
)
ident(
  ext_ref List.fold_left
)
"L4.ml" 377 14190 14205 "L4.ml" 377 14190 14206
type(
  S.t
)
ident(
  def s "L4.ml" 377 14190 14207 "L4.ml" 377 14190 14267
)
"L4.ml" 377 14190 14208 "L4.ml" 377 14190 14213
type(
  String.t list
)
ident(
  def names "L4.ml" 377 14190 14221 "L4.ml" 377 14190 14267
)
"L4.ml" 377 14190 14215 "L4.ml" 377 14190 14216
type(
  'l2
)
"L4.ml" 377 14190 14208 "L4.ml" 377 14190 14216
type(
  String.t list * 'l2
)
"L4.ml" 377 14190 14221 "L4.ml" 377 14190 14230
type(
  (S.t -> String.t -> S.t) -> S.t -> String.t list -> S.t
)
ident(
  ext_ref List.fold_left
)
"L4.ml" 377 14190 14236 "L4.ml" 377 14190 14237
type(
  S.t
)
ident(
  def s "L4.ml" 377 14190 14238 "L4.ml" 377 14190 14258
)
"L4.ml" 377 14190 14238 "L4.ml" 377 14190 14242
type(
  String.t
)
ident(
  def name "L4.ml" 377 14190 14246 "L4.ml" 377 14190 14258
)
"L4.ml" 377 14190 14246 "L4.ml" 377 14190 14251
type(
  String.t -> S.t -> S.t
)
ident(
  ext_ref S.add
)
"L4.ml" 377 14190 14252 "L4.ml" 377 14190 14256
type(
  String.t
)
ident(
  int_ref name "L4.ml" 377 14190 14238 "L4.ml" 377 14190 14242
)
"L4.ml" 377 14190 14257 "L4.ml" 377 14190 14258
type(
  S.t
)
ident(
  int_ref s "L4.ml" 377 14190 14236 "L4.ml" 377 14190 14237
)
"L4.ml" 377 14190 14246 "L4.ml" 377 14190 14258
call(
  tail
)
type(
  S.t
)
"L4.ml" 377 14190 14238 "L4.ml" 377 14190 14258
type(
  String.t -> S.t
)
"L4.ml" 377 14190 14231 "L4.ml" 377 14190 14259
type(
  S.t -> String.t -> S.t
)
"L4.ml" 377 14190 14260 "L4.ml" 377 14190 14261
type(
  S.t
)
ident(
  int_ref s "L4.ml" 377 14190 14205 "L4.ml" 377 14190 14206
)
"L4.ml" 377 14190 14262 "L4.ml" 377 14190 14267
type(
  String.t list
)
ident(
  int_ref names "L4.ml" 377 14190 14208 "L4.ml" 377 14190 14213
)
"L4.ml" 377 14190 14221 "L4.ml" 377 14190 14267
call(
  tail
)
type(
  S.t
)
"L4.ml" 377 14190 14207 "L4.ml" 377 14190 14267
type(
  String.t list * 'l2 -> S.t
)
"L4.ml" 377 14190 14200 "L4.ml" 377 14190 14268
type(
  S.t -> String.t list * 'l2 -> S.t
)
"L4.ml" 377 14190 14269 "L4.ml" 377 14190 14270
type(
  S.t
)
ident(
  int_ref s "L4.ml" 375 14096 14108 "L4.ml" 375 14096 14109
)
"L4.ml" 377 14190 14271 "L4.ml" 377 14190 14272
type(
  (String.t list * 'l2) list
)
ident(
  int_ref v "L4.ml" 372 13935 13964 "L4.ml" 372 13935 13965
)
"L4.ml" 376 14163 14179 "L4.ml" 377 14190 14272
call(
  stack
)
type(
  S.t
)
"L4.ml" 379 14285 14297 "L4.ml" 379 14285 14305
type(
  Ostap.Pretty.printer list
)
ident(
  def stdprocs "L4.ml" 388 14674 14682 "L4.ml" 394 14927 14944
)
"L4.ml" 380 14308 14318 "L4.ml" 380 14308 14327
type(
  (Ostap.Pretty.printer list ->
   S.elt * Ostap.Pretty.printer -> Ostap.Pretty.printer list) ->
  Ostap.Pretty.printer list ->
  (S.elt * Ostap.Pretty.printer) list -> Ostap.Pretty.printer list
)
ident(
  ext_ref List.fold_left
)
"L4.ml" 381 14328 14345 "L4.ml" 381 14328 14348
type(
  Ostap.Pretty.printer list
)
ident(
  def acc "L4.ml" 381 14328 14349 "L4.ml" 381 14328 14406
)
"L4.ml" 381 14328 14350 "L4.ml" 381 14328 14354
type(
  S.elt
)
ident(
  def name "L4.ml" 381 14328 14365 "L4.ml" 381 14328 14406
)
"L4.ml" 381 14328 14356 "L4.ml" 381 14328 14360
type(
  Ostap.Pretty.printer
)
ident(
  def body "L4.ml" 381 14328 14365 "L4.ml" 381 14328 14406
)
"L4.ml" 381 14328 14350 "L4.ml" 381 14328 14360
type(
  S.elt * Ostap.Pretty.printer
)
"L4.ml" 381 14328 14368 "L4.ml" 381 14328 14373
type(
  S.elt -> S.t -> bool
)
ident(
  ext_ref S.mem
)
"L4.ml" 381 14328 14374 "L4.ml" 381 14328 14378
type(
  S.elt
)
ident(
  int_ref name "L4.ml" 381 14328 14350 "L4.ml" 381 14328 14354
)
"L4.ml" 381 14328 14379 "L4.ml" 381 14328 14380
type(
  S.t
)
ident(
  int_ref s "L4.ml" 376 14163 14175 "L4.ml" 376 14163 14176
)
"L4.ml" 381 14328 14368 "L4.ml" 381 14328 14380
call(
  stack
)
type(
  bool
)
"L4.ml" 381 14328 14386 "L4.ml" 381 14328 14389
type(
  Ostap.Pretty.printer list
)
ident(
  int_ref acc "L4.ml" 381 14328 14345 "L4.ml" 381 14328 14348
)
"L4.ml" 381 14328 14395 "L4.ml" 381 14328 14399
type(
  Ostap.Pretty.printer
)
ident(
  int_ref body "L4.ml" 381 14328 14356 "L4.ml" 381 14328 14360
)
"L4.ml" 381 14328 14403 "L4.ml" 381 14328 14406
type(
  Ostap.Pretty.printer list
)
ident(
  int_ref acc "L4.ml" 381 14328 14345 "L4.ml" 381 14328 14348
)
"L4.ml" 381 14328 14395 "L4.ml" 381 14328 14406
type(
  Ostap.Pretty.printer list
)
"L4.ml" 381 14328 14365 "L4.ml" 381 14328 14406
type(
  Ostap.Pretty.printer list
)
"L4.ml" 381 14328 14349 "L4.ml" 381 14328 14406
type(
  S.elt * Ostap.Pretty.printer -> Ostap.Pretty.printer list
)
"L4.ml" 381 14328 14340 "L4.ml" 381 14328 14407
type(
  Ostap.Pretty.printer list ->
  S.elt * Ostap.Pretty.printer -> Ostap.Pretty.printer list
)
"L4.ml" 382 14408 14420 "L4.ml" 382 14408 14422
type(
  Ostap.Pretty.printer list
)
"L4.ml" 383 14423 14436 "L4.ml" 383 14423 14443
type(
  S.elt
)
"L4.ml" 383 14423 14447 "L4.ml" 383 14423 14453
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 383 14423 14454 "L4.ml" 383 14423 14499
type(
  string
)
"L4.ml" 383 14423 14447 "L4.ml" 383 14423 14499
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 383 14423 14436 "L4.ml" 383 14423 14499
type(
  S.elt * Ostap.Pretty.printer
)
"L4.ml" 384 14501 14514 "L4.ml" 384 14501 14523
type(
  S.elt
)
"L4.ml" 384 14501 14525 "L4.ml" 384 14501 14531
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 384 14501 14532 "L4.ml" 384 14501 14571
type(
  string
)
"L4.ml" 384 14501 14525 "L4.ml" 384 14501 14571
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 384 14501 14514 "L4.ml" 384 14501 14571
type(
  S.elt * Ostap.Pretty.printer
)
"L4.ml" 385 14573 14586 "L4.ml" 385 14573 14592
type(
  S.elt
)
"L4.ml" 385 14573 14597 "L4.ml" 385 14573 14603
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 385 14573 14604 "L4.ml" 385 14573 14647
type(
  string
)
"L4.ml" 385 14573 14597 "L4.ml" 385 14573 14647
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 385 14573 14586 "L4.ml" 385 14573 14647
type(
  S.elt * Ostap.Pretty.printer
)
"L4.ml" 383 14423 14435 "L4.ml" 386 14649 14662
type(
  (S.elt * Ostap.Pretty.printer) list
)
type(
  (S.elt * Ostap.Pretty.printer) list
)
type(
  (S.elt * Ostap.Pretty.printer) list
)
type(
  (S.elt * Ostap.Pretty.printer) list
)
"L4.ml" 380 14308 14318 "L4.ml" 386 14649 14662
call(
  stack
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 388 14674 14688 "L4.ml" 388 14674 14696
type(
  Ostap.Pretty.printer list
)
ident(
  int_ref stdprocs "L4.ml" 379 14285 14297 "L4.ml" 379 14285 14305
)
"L4.ml" 389 14702 14712 "L4.ml" 389 14702 14714
type(
  Ostap.Pretty.printer list
)
"L4.ml" 389 14702 14718 "L4.ml" 389 14702 14723
type(
  Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.empty
)
"L4.ml" 390 14724 14734 "L4.ml" 390 14724 14735
type(
  Ostap.Pretty.printer list
)
"L4.ml" 390 14724 14740 "L4.ml" 390 14724 14744
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Common.vert
)
"L4.ml" 390 14724 14746 "L4.ml" 390 14724 14752
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 390 14724 14753 "L4.ml" 390 14724 14774
type(
  string
)
"L4.ml" 390 14724 14746 "L4.ml" 390 14724 14774
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 391 14777 14799 "L4.ml" 391 14777 14805
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 391 14777 14806 "L4.ml" 391 14777 14831
type(
  string
)
"L4.ml" 391 14777 14799 "L4.ml" 391 14777 14831
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 392 14834 14856 "L4.ml" 392 14834 14862
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L4.ml" 392 14834 14863 "L4.ml" 392 14834 14888
type(
  string
)
"L4.ml" 392 14834 14856 "L4.ml" 392 14834 14888
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 393 14891 14913 "L4.ml" 393 14891 14917
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Common.vert
)
"L4.ml" 393 14891 14918 "L4.ml" 393 14891 14926
type(
  Ostap.Pretty.printer list
)
ident(
  int_ref stdprocs "L4.ml" 379 14285 14297 "L4.ml" 379 14285 14305
)
"L4.ml" 393 14891 14913 "L4.ml" 393 14891 14926
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 390 14724 14745 "L4.ml" 394 14927 14944
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 390 14724 14740 "L4.ml" 394 14927 14944
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 388 14674 14682 "L4.ml" 394 14927 14944
type(
  Ostap.Pretty.printer
)
"L4.ml" 379 14285 14293 "L4.ml" 394 14927 14944
type(
  Ostap.Pretty.printer
)
"L4.ml" 376 14163 14171 "L4.ml" 394 14927 14944
type(
  Ostap.Pretty.printer
)
"L4.ml" 375 14096 14104 "L4.ml" 394 14927 14944
type(
  Ostap.Pretty.printer
)
"L4.ml" 374 14017 14025 "L4.ml" 394 14927 14944
type(
  Ostap.Pretty.printer
)
"L4.ml" 373 13973 13981 "L4.ml" 394 14927 14944
type(
  Ostap.Pretty.printer
)
"L4.ml" 372 13935 13956 "L4.ml" 394 14927 14944
type(
  ('j2 * (String.t * 'k2) list * (String.t list * 'l2) list) *
  (String.t * 'm2 * 'n2 * 'o2) list -> Ostap.Pretty.printer
)
"L4.ml" 396 14954 14960 "L4.ml" 396 14954 14964
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Common.vert
)
"L4.ml" 397 14967 14975 "L4.ml" 397 14967 14985
type(
  ('k1 * (String.t * 'l1) list * (String.t list * 'l1) list) * 's1 ->
  Ostap.Pretty.printer
)
ident(
  int_ref predefined "L4.ml" 372 13935 13945 "L4.ml" 372 13935 13955
)
"L4.ml" 397 14967 14986 "L4.ml" 397 14967 14987
type(
  ('k1 * (String.t * 'l1) list * (String.t list * 'l1) list) * 's1
)
ident(
  int_ref d "L4.ml" 370 13819 13841 "L4.ml" 370 13819 13852
)
"L4.ml" 397 14967 14975 "L4.ml" 397 14967 14987
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 398 14989 14997 "L4.ml" 398 14989 15011
type(
  ((('k1 * (String.t * 'l1) list * (String.t list * 'l1) list) * 's1 as 'p2) ->
   Ostap.Pretty.printer) ->
  ('t1 -> Ostap.Pretty.printer) ->
  'j1 * 'p2 * 't1 list -> Ostap.Pretty.printer
)
ident(
  ext_ref Module.print_c
)
"L4.ml" 398 14989 15013 "L4.ml" 398 14989 15025
type(
  (Ostap.Pretty.printer -> 'l1 -> Ostap.Pretty.printer) ->
  ('t1 -> Ostap.Pretty.printer) -> 'p2 -> Ostap.Pretty.printer
)
ident(
  int_ref declarations "L4.ml" 362 13573 13585 "L4.ml" 362 13573 13597
)
"L4.ml" 398 14989 15026 "L4.ml" 398 14989 15029
type(
  Ostap.Pretty.printer -> 'l1 -> Ostap.Pretty.printer
)
ident(
  int_ref typ "L4.ml" 334 12570 12582 "L4.ml" 334 12570 12585
)
"L4.ml" 398 14989 15030 "L4.ml" 398 14989 15034
type(
  't1 -> Ostap.Pretty.printer
)
ident(
  int_ref stmt "L4.ml" 371 13873 13883 "L4.ml" 371 13873 13887
)
"L4.ml" 398 14989 15012 "L4.ml" 398 14989 15035
call(
  stack
)
type(
  'p2 -> Ostap.Pretty.printer
)
"L4.ml" 398 14989 15036 "L4.ml" 398 14989 15040
type(
  't1 -> Ostap.Pretty.printer
)
ident(
  int_ref stmt "L4.ml" 371 13873 13883 "L4.ml" 371 13873 13887
)
"L4.ml" 398 14989 15041 "L4.ml" 398 14989 15042
type(
  'j1 * 'p2 * 't1 list
)
ident(
  int_ref m "L4.ml" 370 13819 13836 "L4.ml" 370 13819 13862
)
"L4.ml" 398 14989 14997 "L4.ml" 398 14989 15042
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 396 14954 14965 "L4.ml" 399 15043 15050
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
"L4.ml" 396 14954 14960 "L4.ml" 399 15043 15050
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 372 13935 13941 "L4.ml" 399 15043 15050
type(
  Ostap.Pretty.printer
)
"L4.ml" 371 13873 13879 "L4.ml" 399 15043 15050
type(
  Ostap.Pretty.printer
)
"L4.ml" 370 13819 13835 "L4.ml" 399 15043 15050
type(
  'j1 * (('k1 * (String.t * 'l1) list * (String.t list * 'l1) list) * 's1) *
  't1 list -> Ostap.Pretty.printer
)
"L4.ml" 405 15155 15159 "L4.ml" 405 15155 15162
type(
  string ->
  < generate : unit -> (string * string, Ostap.Msg.t) Checked.t;
    parse : unit -> (unit, Ostap.Msg.t) Checked.t;
    print : unit -> (string, Ostap.Msg.t) Checked.t;
    resolve : unit -> (unit, Ostap.Msg.t) Checked.t;
    typecheck : unit -> ('a -> unit, Ostap.Msg.t) Checked.t >
)
ident(
  def top "L4.ml" 410 15374 15477 "L4.ml" 1 0 -1
)
"L4.ml" 405 15155 15163 "L4.ml" 405 15155 15169
type(
  string
)
ident(
  def source "L4.ml" 405 15155 15172 "L4.ml" 410 15374 15477
)
"L4.ml" 405 15155 15172 "L4.ml" 405 15155 15183
type(
  ((String.t *
    (((String.t *
       (_[> `Binop of
              [ `Add
              | `And
              | `Div
              | `Eq
              | `Ge
              | `Gt
              | `Le
              | `Lt
              | `Mod
              | `Mul
              | `Ne
              | `Or
              | `Sub ] * 'c * 'c
          | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
          | `Field of 'c * String.t
          | `Ident of
              String.t *
              [ `Const of 'c
              | `Param of
                  String.t *
                  ([ `Array of
                       (_[> `Binop of
                              _[< `Add
                                | `And
                                | `Div
                                | `Eq
                                | `Ge
                                | `Gt
                                | `Le
                                | `Lt
                                | `Mod
                                | `Mul
                                | `Ne
                                | `Or
                                | `Sub
                                > `And `Eq `Ge `Gt `Le `Lt `Ne `Or ] *
                              'e * 'e
                          | `Const of
                              [ `False
                              | `Literal of int Monad.Id.t Monad.Id.t
                              | `True ]
                          | `Field of 'e * string
                          | `Ident of
                              string *
                              _[> `Const of _[> `Literal of '_f ]
                                | `Param of string * 'd
                                | `VParam of string * 'd
                                | `Var of string * 'd ]
                          | `Index of 'e * 'e
                          | `Unop of _[< `Neg | `Not ] * 'e ]
                        as 'e) *
                       'd
                   | `Bool
                   | `Int
                   | `Record of (String.t * 'd) list
                   | `User of String.t * String.t * 'd ] as 'd)
              | `Proc of String.t * ([ `Val | `Var ] * String.t * 'd) list
              | `Type of String.t * 'd
              | `VParam of String.t * 'd
              | `Var of String.t * 'd ]
          | `Index of 'c * 'c
          | `Literal of '_g
          | `Unop of [ `Neg | `Not ] * 'c ]
        as 'c))
      list * (String.t * 'd) list * (String.t list * 'd) list) *
     (String.t * ([ `Val | `Var ] * String.t * 'd) list * 'b *
      (_[> `Assign of 'c * 'c
         | `Call of
             String.t * 'c list *
             (_[> `Proc of String.t * ([ `Val | `Var ] * String.t * 'd) list ]
              as 'i)
         | `Case of
             'c *
             ([ `Atom of 'c | `Interval of 'c * 'c ] list * 'h list) list *
             'h list
         | `For of 'c * 'c * 'c * 'c option * 'h list
         | `If of ('c * 'h list) list * 'h list
         | `While of 'c * 'h list ]
       as 'h)
      list)
     list as 'b) *
    (_[> `Assign of 'c * 'c
       | `Call of String.t * 'c list * 'i
       | `Case of
           'c *
           ([ `Atom of 'c | `Interval of 'c * 'c ] list * 'j list) list *
           'j list
       | `For of 'c * 'c * 'c * 'c option * 'j list
       | `If of ('c * 'j list) list * 'j list
       | `While of 'c * 'j list ]
     as 'j)
    list) *
   < getName : String.t -> String.t > -> string * string) ->
  (Lexer.t ->
   (Lexer.t,
    String.t *
    (((String.t *
       (_[> `Binop of
              [ `Add
              | `And
              | `Div
              | `Eq
              | `Ge
              | `Gt
              | `Le
              | `Lt
              | `Mod
              | `Mul
              | `Ne
              | `Or
              | `Sub ] * 'l * 'l
          | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
          | `Field of 'l * string
          | `Ident of String.t
          | `Index of 'l * 'l
          | `Unop of [ `Neg | `Not ] * 'l ]
        as 'l))
      list *
      (String.t *
       (_[> `Array of
              (_[> `Binop of
                     [ `Add
                     | `And
                     | `Div
                     | `Eq
                     | `Ge
                     | `Gt
                     | `Le
                     | `Lt
                     | `Mod
                     | `Mul
                     | `Ne
                     | `Or
                     | `Sub ] * 'n * 'n
                 | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
                 | `Field of 'n * string
                 | `Ident of String.t
                 | `Index of 'n * 'n
                 | `Unop of [ `Neg | `Not ] * 'n ]
               as 'n) *
              'm
          | `Bool
          | `Int
          | `Record of (String.t * 'm) list
          | `User of String.t ]
        as 'm))
      list * (String.t list * 'm) list) *
     (String.t * ([ `Val | `Var ] * String.t * 'm) list * 'k *
      (_[> `Assign of
             (_[> `Binop of
                    [ `Add
                    | `And
                    | `Div
                    | `Eq
                    | `Ge
                    | `Gt
                    | `Le
                    | `Lt
                    | `Mod
                    | `Mul
                    | `Ne
                    | `Or
                    | `Sub ] * 'p * 'p
                | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
                | `Field of 'p * String.t
                | `Ident of String.t
                | `Index of 'p * 'p
                | `Unop of [ `Neg | `Not ] * 'p ]
              as 'p) *
             'p
         | `Call of String.t * 'p list
         | `Case of
             'p *
             ([ `Atom of 'p | `Interval of 'p * 'p ] list * 'o list) list *
             'o list
         | `For of 'p * 'p * 'p * 'p option * 'o list
         | `If of ('p * 'o list) list * 'o list
         | `While of 'p * 'o list ]
       as 'o)
      list)
     list as 'k) *
    'o list, Ostap.Reason.t)
   Ostap.Combinators.result) *
  (String.t * 'k * 'o list -> Ostap.Pretty.printer) *
  (String.t * 'k * 'o list ->
   ((String.t * 'b * 'j list) * < getName : String.t -> String.t >,
    Ostap.Msg.t)
   Checked.t) *
  (String.t * 'b * 'j list ->
   (String.t *
    (((String.t * 'c) list * (String.t * 'd) list * (String.t list * 'd) list) *
     (String.t * ([ `Val | `Var ] * String.t * 'd) list * 'q *
      (_[> `Assign of
             ((_[> `Binop of
                     [ `Add
                     | `And
                     | `Div
                     | `Eq
                     | `Ge
                     | `Gt
                     | `Le
                     | `Lt
                     | `Mod
                     | `Mul
                     | `Ne
                     | `Or
                     | `Sub ] * ('s * 'd) * ('s * 'd)
                 | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
                 | `Field of ('s * 'd) * String.t
                 | `Ident of
                     String.t *
                     _[> `Const of 'c
                       | `Param of String.t * 'd
                       | `VParam of String.t * 'd
                       | `Var of String.t * 'd ]
                 | `Index of ('s * 'd) * ('s * 'd)
                 | `Unop of _[> `Neg | `Not ] * ('s * 'd) ]
               as 's) *
              'd) *
             ('s * 'd)
         | `Call of
             String.t * ('s * 'd) list *
             (String.t * 'c list *
              _[> `Proc of String.t * ([ `Val | `Var ] * String.t * 'd) list ])
         | `Case of
             ('s * 'd) *
             ([ `Atom of 's * 'd | `Interval of ('s * 'd) * ('s * 'd) ] list *
              'r list)
             list * 'r list
         | `For of
             ('s * 'd) * ('s * 'd) * ('s * 'd) * ('s * 'd) option * 'r list
         | `If of (('s * 'd) * 'r list) list * 'r list
         | `While of ('s * 'd) * 'r list ]
       as 'r)
      list)
     list as 'q) *
    (_[> `Assign of
           ((_[> `Binop of
                   [ `Add
                   | `And
                   | `Div
                   | `Eq
                   | `Ge
                   | `Gt
                   | `Le
                   | `Lt
                   | `Mod
                   | `Mul
                   | `Ne
                   | `Or
                   | `Sub ] * ('u * 'd) * ('u * 'd)
               | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
               | `Field of ('u * 'd) * String.t
               | `Ident of
                   String.t *
                   _[> `Const of 'c
                     | `Param of String.t * 'd
                     | `VParam of String.t * 'd
                     | `Var of String.t * 'd ]
               | `Index of ('u * 'd) * ('u * 'd)
               | `Unop of _[> `Neg | `Not ] * ('u * 'd) ]
             as 'u) *
            'd) *
           ('u * 'd)
       | `Call of
           String.t * ('u * 'd) list *
           (String.t * 'c list *
            _[> `Proc of String.t * ([ `Val | `Var ] * String.t * 'd) list ])
       | `Case of
           ('u * 'd) *
           ([ `Atom of 'u * 'd | `Interval of ('u * 'd) * ('u * 'd) ] list *
            't list)
           list * 't list
       | `For of
           ('u * 'd) * ('u * 'd) * ('u * 'd) * ('u * 'd) option * 't list
       | `If of (('u * 'd) * 't list) list * 't list
       | `While of ('u * 'd) * 't list ]
     as 't)
    list, Ostap.Msg.t)
   Checked.t) ->
  string ->
  < generate : unit -> (string * string, Ostap.Msg.t) Checked.t;
    parse : unit -> (unit, Ostap.Msg.t) Checked.t;
    print : unit -> (string, Ostap.Msg.t) Checked.t;
    resolve : unit -> (unit, Ostap.Msg.t) Checked.t;
    typecheck : unit -> ('a -> unit, Ostap.Msg.t) Checked.t >
)
ident(
  ext_ref L1.toplevel
)
"L4.ml" 406 15185 15193 "L4.ml" 406 15185 15194
type(
  String.t * 'b * 'j list
)
ident(
  def p "L4.ml" 407 15202 15207 "L4.ml" 409 15325 15373
)
"L4.ml" 406 15185 15196 "L4.ml" 406 15185 15197
type(
  < getName : String.t -> String.t >
)
ident(
  def n "L4.ml" 407 15202 15207 "L4.ml" 409 15325 15373
)
"L4.ml" 406 15185 15193 "L4.ml" 406 15185 15197
type(
  (String.t * 'b * 'j list) * < getName : String.t -> String.t >
)
"L4.ml" 407 15202 15211 "L4.ml" 407 15202 15217
type(
  String.t *
  (((String.t * 'c) list * (String.t * 'd) list * (String.t list * 'd) list) *
   ((String.t * ([ `Val | `Var ] * String.t * 'd) list *
     (((String.t * 'c) list * (String.t * 'd) list *
       (String.t list * 'd) list) *
      'v) *
     ([> `Assign of 'c * 'c
       | `Call of String.t * 'c list * 'i
       | `If of ('c * 'w list) list * 'w list
       | `While of 'c * 'w list ]
      as 'w)
     list)
    list as 'v)) *
  ([> `Assign of 'c * 'c
    | `Call of String.t * 'c list * 'i
    | `If of ('c * 'x list) list * 'x list
    | `While of 'c * 'x list ]
   as 'x)
  list
)
ident(
  def lifted "L4.ml" 408 15272 15277 "L4.ml" 409 15325 15373
)
"L4.ml" 407 15202 15220 "L4.ml" 407 15202 15233
type(
  (String.t *
   (((String.t * 'c) list * (String.t * 'd) list * (String.t list * 'd) list) *
    (String.t * ([ `Val | `Var ] * String.t * 'd) list * 'y * 'h list) list
    as 'y) *
   'j list) *
  < getName : String.t -> String.t > ->
  String.t *
  (((String.t * 'c) list * (String.t * 'd) list * (String.t list * 'd) list) *
   'v) *
  'x list
)
ident(
  int_ref Lower.program "L4.ml" 253 9920 9928 "L4.ml" 253 9920 9935
)
"L4.ml" 407 15202 15236 "L4.ml" 407 15202 15248
type(
  String.t *
  (((String.t * 'c) list * (String.t * 'd) list * (String.t list * 'd) list) *
   (String.t * ([ `Val | `Var ] * String.t * 'd) list * 'z * 'h list) list
   as 'z) *
  'j list -> String.t * 'y * 'j list
)
ident(
  int_ref Lift.lambda0 "L4.ml" 294 11186 11194 "L4.ml" 294 11186 11201
)
"L4.ml" 407 15202 15250 "L4.ml" 407 15202 15260
type(
  String.t * 'b * 'j list -> String.t * 'z * 'j list
)
ident(
  int_ref Lift.types "L4.ml" 278 10705 10713 "L4.ml" 278 10705 10718
)
"L4.ml" 407 15202 15261 "L4.ml" 407 15202 15262
type(
  String.t * 'b * 'j list
)
ident(
  int_ref p "L4.ml" 406 15185 15193 "L4.ml" 406 15185 15194
)
"L4.ml" 407 15202 15249 "L4.ml" 407 15202 15263
call(
  stack
)
type(
  String.t * 'z * 'j list
)
"L4.ml" 407 15202 15235 "L4.ml" 407 15202 15264
call(
  stack
)
type(
  String.t * 'y * 'j list
)
"L4.ml" 407 15202 15266 "L4.ml" 407 15202 15267
type(
  < getName : String.t -> String.t >
)
ident(
  int_ref n "L4.ml" 406 15185 15196 "L4.ml" 406 15185 15197
)
"L4.ml" 407 15202 15234 "L4.ml" 407 15202 15268
type(
  (String.t * 'y * 'j list) * < getName : String.t -> String.t >
)
"L4.ml" 407 15202 15220 "L4.ml" 407 15202 15268
call(
  stack
)
type(
  String.t *
  (((String.t * 'c) list * (String.t * 'd) list * (String.t list * 'd) list) *
   'v) *
  'x list
)
"L4.ml" 408 15272 15277 "L4.ml" 408 15272 15298
type(
  Ostap.Pretty.printer -> string
)
ident(
  ext_ref Ostap.Pretty.toString
)
"L4.ml" 408 15272 15300 "L4.ml" 408 15272 15314
type(
  String.t *
  (((String.t * 'c) list * (String.t * 'd) list * (String.t list * 'd) list) *
   (String.t * ([ `Val | `Var ] * String.t * 'd) list * 'a1 *
    (_[> `Assign of 'c * 'c
       | `Call of String.t * 'c list * 'i
       | `Case of
           'c *
           (_[< `Atom of 'c | `Interval of 'c * 'c ] list * 'b1 list) list *
           'b1 list
       | `For of 'c * 'c * 'c * 'c option * 'b1 list
       | `If of ('c * 'b1 list) list * 'b1 list
       | `While of 'c * 'b1 list ]
     as 'b1)
    list)
   list as 'a1) *
  (_[> `Assign of 'c * 'c
     | `Call of String.t * 'c list * 'i
     | `Case of
         'c *
         (_[< `Atom of 'c | `Interval of 'c * 'c ] list * 'c1 list) list *
         'c1 list
     | `For of 'c * 'c * 'c * 'c option * 'c1 list
     | `If of ('c * 'c1 list) list * 'c1 list
     | `While of 'c * 'c1 list ]
   as 'c1)
  list -> Ostap.Pretty.printer
)
ident(
  int_ref PrintR.program "L4.ml" 63 2228 2236 "L4.ml" 63 2228 2243
)
"L4.ml" 408 15272 15315 "L4.ml" 408 15272 15321
type(
  String.t * 'a1 * 'c1 list
)
ident(
  int_ref lifted "L4.ml" 407 15202 15211 "L4.ml" 407 15202 15217
)
"L4.ml" 408 15272 15299 "L4.ml" 408 15272 15322
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 408 15272 15277 "L4.ml" 408 15272 15322
call(
  stack
)
type(
  string
)
"L4.ml" 409 15325 15330 "L4.ml" 409 15325 15351
type(
  Ostap.Pretty.printer -> string
)
ident(
  ext_ref Ostap.Pretty.toString
)
"L4.ml" 409 15325 15353 "L4.ml" 409 15325 15365
type(
  String.t *
  (((String.t * 'c) list * (String.t * 'd) list * (String.t list * 'd) list) *
   ((String.t * ([ `Val | `Var ] * String.t * 'd) list *
     (((String.t * 'c) list * (String.t * 'd) list *
       (String.t list * 'd) list) *
      'd1) *
     (_[> `Assign of 'c * 'c
        | `Call of String.t * 'c list * 'i
        | `If of ('c * 'e1 list) list * 'e1 list
        | `While of 'c * 'e1 list ]
      as 'e1)
     list)
    list as 'd1)) *
  'e1 list -> Ostap.Pretty.printer
)
ident(
  int_ref CGen.program "L4.ml" 370 13819 13827 "L4.ml" 370 13819 13834
)
"L4.ml" 409 15325 15366 "L4.ml" 409 15325 15372
type(
  String.t *
  (((String.t * 'c) list * (String.t * 'd) list * (String.t list * 'd) list) *
   'd1) *
  'e1 list
)
ident(
  int_ref lifted "L4.ml" 407 15202 15211 "L4.ml" 407 15202 15217
)
"L4.ml" 409 15325 15352 "L4.ml" 409 15325 15373
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L4.ml" 409 15325 15330 "L4.ml" 409 15325 15373
call(
  stack
)
type(
  string
)
"L4.ml" 408 15272 15277 "L4.ml" 409 15325 15373
type(
  string * string
)
"L4.ml" 407 15202 15207 "L4.ml" 409 15325 15373
type(
  string * string
)
"L4.ml" 406 15185 15187 "L4.ml" 410 15374 15377
type(
  (String.t * 'b * 'j list) * < getName : String.t -> String.t > ->
  string * string
)
"L4.ml" 410 15374 15379 "L4.ml" 410 15374 15392
type(
  Lexer.t ->
  (Lexer.t, String.t * 'k * 'o list, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  int_ref Parse.program "L4.ml" 8 141 147 "L4.ml" 20 803 863
)
"L4.ml" 410 15374 15394 "L4.ml" 410 15374 15407
type(
  String.t * 'k * 'o list -> Ostap.Pretty.printer
)
ident(
  int_ref Print.program "L4.ml" 48 1734 1742 "L4.ml" 48 1734 1749
)
"L4.ml" 410 15374 15409 "L4.ml" 410 15374 15424
type(
  bool ->
  ([ `Const of 'c
   | `Param of String.t * 'd
   | `Proc of String.t * ([ `Val | `Var ] * String.t * 'd) list
   | `Type of String.t * 'd
   | `VParam of String.t * 'd
   | `Var of String.t * 'd ], 'd)
  L3.Resolve.env ->
  String.t * 'k * 'o list ->
  ((String.t * 'b * 'j list) * < getName : String.t -> String.t >,
   Ostap.Msg.t)
  Checked.t
)
ident(
  int_ref Resolve.program "L4.ml" 99 3860 3868 "L4.ml" 99 3860 3875
)
"L4.ml" 410 15374 15425 "L4.ml" 410 15374 15429
type(
  bool
)
"L4.ml" 410 15374 15430 "L4.ml" 410 15374 15450
type(
  ([ `Const of 'c
   | `Param of String.t * 'd
   | `Proc of String.t * ([ `Val | `Var ] * String.t * 'd) list
   | `Type of String.t * 'd
   | `VParam of String.t * 'd
   | `Var of String.t * 'd ], 'd)
  L3.Resolve.env
)
"L4.ml" 410 15374 15409 "L4.ml" 410 15374 15450
call(
  stack
)
type(
  String.t * 'k * 'o list ->
  ((String.t * 'b * 'j list) * < getName : String.t -> String.t >,
   Ostap.Msg.t)
  Checked.t
)
"L4.ml" 410 15374 15452 "L4.ml" 410 15374 15469
type(
  String.t * 'b * 'j list -> (String.t * 'q * 't list, Ostap.Msg.t) Checked.t
)
ident(
  int_ref Typecheck.program "L4.ml" 191 7293 7301 "L4.ml" 191 7293 7308
)
"L4.ml" 410 15374 15378 "L4.ml" 410 15374 15470
type(
  (Lexer.t ->
   (Lexer.t, String.t * 'k * 'o list, Ostap.Reason.t)
   Ostap.Combinators.result) *
  (String.t * 'k * 'o list -> Ostap.Pretty.printer) *
  (String.t * 'k * 'o list ->
   ((String.t * 'b * 'j list) * < getName : String.t -> String.t >,
    Ostap.Msg.t)
   Checked.t) *
  (String.t * 'b * 'j list ->
   (String.t * 'q * 't list, Ostap.Msg.t) Checked.t)
)
"L4.ml" 410 15374 15471 "L4.ml" 410 15374 15477
type(
  string
)
ident(
  int_ref source "L4.ml" 405 15155 15163 "L4.ml" 405 15155 15169
)
"L4.ml" 405 15155 15172 "L4.ml" 410 15374 15477
call(
  tail
)
type(
  < generate : unit -> (string * string, Ostap.Msg.t) Checked.t;
    parse : unit -> (unit, Ostap.Msg.t) Checked.t;
    print : unit -> (string, Ostap.Msg.t) Checked.t;
    resolve : unit -> (unit, Ostap.Msg.t) Checked.t;
    typecheck : unit -> ('a -> unit, Ostap.Msg.t) Checked.t >
)
"L4.ml" 405 15155 15163 "L4.ml" 410 15374 15477
type(
  string ->
  < generate : unit -> (string * string, Ostap.Msg.t) Checked.t;
    parse : unit -> (unit, Ostap.Msg.t) Checked.t;
    print : unit -> (string, Ostap.Msg.t) Checked.t;
    resolve : unit -> (unit, Ostap.Msg.t) Checked.t;
    typecheck : unit -> ('a -> unit, Ostap.Msg.t) Checked.t >
)
