"L3.ml" 12 197 216 "L3.ml" 12 197 219
type(
  (< coord : 'b;
     getIDENT : ('a, Ostap.Matcher.Token.t, Ostap.Reason.t)
                Ostap.Combinators.result;
     getLITERAL : ('a, Ostap.Matcher.Token.t, Ostap.Reason.t)
                  Ostap.Combinators.result;
     loc : Ostap.Msg.Locator.t;
     look : string -> ('a, 'c, Ostap.Reason.t) Ostap.Combinators.result;
     pos : 'd;
     regexp : string ->
              string -> ('a, 'c, Ostap.Reason.t) Ostap.Combinators.result;
     skip : 'd -> 'b -> [> `Skipped of 'e * Ostap.Msg.Coord.t ]; .. >
   as 'a, [> `User of string ], Ostap.Reason.t)
  Ostap.Combinators.parse
)
ident(
  def typ "L3.ml" 12 197 203 "L3.ml" 14 269 346
)
"L3.ml" 12 197 221 "L3.ml" 12 197 225
type(
  ('a,
   [> `Assign of
        ([> `Binop of
              [> `Add
               | `And
               | `Div
               | `Eq
               | `Ge
               | `Gt
               | `Le
               | `Lt
               | `Mod
               | `Mul
               | `Ne
               | `Or
               | `Sub ] *
              'g * 'g
          | `Const of [> `False | `Literal of int | `True ]
          | `Ident of string
          | `Unop of [> `Neg | `Not ] * 'g ]
         as 'g) *
        ([> `Binop of
              [> `Add
               | `And
               | `Div
               | `Eq
               | `Ge
               | `Gt
               | `Le
               | `Lt
               | `Mod
               | `Mul
               | `Ne
               | `Or
               | `Sub ] *
              'h * 'h
          | `Const of [> `False | `Literal of int | `True ]
          | `Ident of string
          | `Unop of [> `Neg | `Not ] * 'h ]
         as 'h)
    | `Call of string * 'h list
    | `Case of
        'h *
        ([> `Atom of
              [> `Binop of
                   [> `Add
                    | `And
                    | `Div
                    | `Eq
                    | `Ge
                    | `Gt
                    | `Le
                    | `Lt
                    | `Mod
                    | `Mul
                    | `Ne
                    | `Or
                    | `Sub ] *
                   'i * 'i
               | `Const of [> `False | `Literal of int | `True ]
               | `Ident of string
               | `Unop of [> `Neg | `Not ] * 'i ]
              as 'i
          | `Interval of 'i * 'i ]
         list * 'f list)
        list * 'f list
    | `For of 'g * 'h * 'h * 'i option * 'f list
    | `If of ('h * 'f list) list * 'f list
    | `While of 'h * 'f list ]
   as 'f, Ostap.Reason.t)
  Ostap.Combinators.parse
)
ident(
  def stmt "L3.ml" 12 197 203 "L3.ml" 14 269 346
)
"L3.ml" 13 229 237 "L3.ml" 13 229 239
type(
  (string *
   ([> `Binop of
         [> `Add
          | `And
          | `Div
          | `Eq
          | `Ge
          | `Gt
          | `Le
          | `Lt
          | `Mod
          | `Mul
          | `Ne
          | `Or
          | `Sub ] *
         'j * 'j
     | `Const of [> `False | `Literal of int | `True ]
     | `Ident of string
     | `Unop of [> `Neg | `Not ] * 'j ]
    as 'j))
  list * (string * ([> `User of string ] as 'k)) list *
  (string list * 'k) list
)
ident(
  def d "L3.ml" 13 229 237 "L3.ml" 14 269 346
)
"L3.ml" 13 229 241 "L3.ml" 13 229 262
type(
  ('a, 'k, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, (string * 'j) list * (string * 'k) list * (string list * 'k) list,
   Ostap.Reason.t)
  Ostap.Combinators.parse
)
ident(
  ext_ref L1.Parse.declarations
)
"L3.ml" 13 229 264 "L3.ml" 13 229 267
type(
  ('a, 'k, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref typ "L3.ml" 12 197 216 "L3.ml" 12 197 219
)
"L3.ml" 13 229 239 "L3.ml" 13 229 268
call(
  tail
)
type(
  ('a, (string * 'j) list * (string * 'k) list * (string list * 'k) list,
   Ostap.Reason.t)
  Ostap.Combinators.parse
)
type(
  ('a, (string * 'j) list * (string * 'k) list * (string list * 'k) list,
   Ostap.Reason.t)
  Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L3.ml" 13 229 239 "L3.ml" 13 229 268
)
type(
  'a
)
ident(
  def _ostap_stream "L3.ml" 13 229 239 "L3.ml" 13 229 268
)
"L3.ml" 14 269 277 "L3.ml" 14 269 279
type(
  ((string * ([> `Val | `Var ] * string * 'k) list *
    (((string * 'j) list * (string * 'k) list * (string list * 'k) list) * 'l) *
    'f list)
   list as 'l)
  option
)
ident(
  def p "L3.ml" 14 269 333 "L3.ml" 14 269 345
)
"L3.ml" 14 269 281 "L3.ml" 14 269 295
type(
  ('a, 'k, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a,
   ((string * 'j) list * (string * 'k) list * (string list * 'k) list) * 'l
   as 'm, Ostap.Reason.t)
  Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  'a -> ('a, 'l, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  ext_ref ProcDecl.parse
)
"L3.ml" 14 269 297 "L3.ml" 14 269 300
type(
  ('a, 'k, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref typ "L3.ml" 12 197 216 "L3.ml" 12 197 219
)
"L3.ml" 14 269 302 "L3.ml" 14 269 314
type(
  ('a, 'k, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'm, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref declarations "L3.ml" 12 197 203 "L3.ml" 21 659 734
)
"L3.ml" 14 269 315 "L3.ml" 14 269 318
type(
  ('a, 'k, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref typ "L3.ml" 12 197 216 "L3.ml" 12 197 219
)
"L3.ml" 14 269 319 "L3.ml" 14 269 323
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref stmt "L3.ml" 12 197 221 "L3.ml" 12 197 225
)
"L3.ml" 14 269 302 "L3.ml" 14 269 323
call(
  stack
)
type(
  ('a, 'm, Ostap.Reason.t) Ostap.Combinators.parse
)
"L3.ml" 14 269 325 "L3.ml" 14 269 329
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref stmt "L3.ml" 12 197 221 "L3.ml" 12 197 225
)
"L3.ml" 14 269 279 "L3.ml" 14 269 330
call(
  tail
)
type(
  ('a, 'l, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'l, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L3.ml" 14 269 279 "L3.ml" 14 269 330
)
type(
  'a
)
ident(
  def _ostap_stream "L3.ml" 14 269 279 "L3.ml" 14 269 330
)
"L3.ml" 14 269 279 "L3.ml" 14 269 331
call(
  stack
)
type(
  ('a, 'l option, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'l, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'l option, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.opt
)
"L3.ml" 14 269 333 "L3.ml" 14 269 334
type(
  (string * 'j) list * (string * 'k) list * (string list * 'k) list
)
ident(
  int_ref d "L3.ml" 13 229 237 "L3.ml" 13 229 239
)
"L3.ml" 14 269 336 "L3.ml" 14 269 343
type(
  'l option -> 'l
)
ident(
  ext_ref Common.listify
)
"L3.ml" 14 269 344 "L3.ml" 14 269 345
type(
  'l option
)
ident(
  int_ref p "L3.ml" 14 269 277 "L3.ml" 14 269 279
)
"L3.ml" 14 269 336 "L3.ml" 14 269 345
call(
  stack
)
type(
  'l
)
"L3.ml" 14 269 333 "L3.ml" 14 269 345
type(
  ((string * 'j) list * (string * 'k) list * (string list * 'k) list) * 'l
)
"L3.ml" 13 229 237 "L3.ml" 14 269 346
call(
  tail
)
type(
  (string * 'j) list * (string * 'k) list * (string list * 'k) list ->
  ('a, 'm, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'm, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  'l option -> 'm
)
type(
  'l option
)
ident(
  def _0 "L3.ml" 14 269 333 "L3.ml" 14 269 345
)
type(
  ('l option -> 'm) ->
  ('a, 'l option, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'm, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.map
)
type(
  (string * 'j) list * (string * 'k) list * (string list * 'k) list
)
ident(
  def _1 "L3.ml" 13 229 237 "L3.ml" 14 269 346
)
type(
  ('a, (string * 'j) list * (string * 'k) list * (string list * 'k) list,
   Ostap.Reason.t)
  Ostap.Combinators.parse ->
  ((string * 'j) list * (string * 'k) list * (string list * 'k) list ->
   ('a, 'm, Ostap.Reason.t) Ostap.Combinators.parse) ->
  ('a, 'm, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.seq
)
"L3.ml" 12 197 203 "L3.ml" 14 269 346
call(
  tail
)
type(
  ('a, 'k, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'm, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'm, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  'a -> ('a, 'm, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'm, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L3.ml" 12 197 203 "L3.ml" 14 269 346
)
type(
  'a
)
ident(
  def _ostap_stream "L3.ml" 12 197 203 "L3.ml" 14 269 346
)
"L3.ml" 15 348 364 "L3.ml" 15 348 367
type(
  ('a, 'g, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  def ref "L3.ml" 15 348 354 "L3.ml" 19 558 569
)
"L3.ml" 15 348 369 "L3.ml" 15 348 374
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  def cexpr "L3.ml" 15 348 354 "L3.ml" 19 558 569
)
"L3.ml" 15 348 376 "L3.ml" 15 348 380
type(
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  def expr "L3.ml" 15 348 354 "L3.ml" 19 558 569
)
"L3.ml" 16 384 394 "L3.ml" 16 384 409
type(
  ('a, 'g, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  ext_ref L2.Parse.statement
)
"L3.ml" 16 384 411 "L3.ml" 16 384 414
type(
  ('a, 'g, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref ref "L3.ml" 15 348 364 "L3.ml" 15 348 367
)
"L3.ml" 16 384 416 "L3.ml" 16 384 421
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref cexpr "L3.ml" 15 348 369 "L3.ml" 15 348 374
)
"L3.ml" 16 384 423 "L3.ml" 16 384 427
type(
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref expr "L3.ml" 15 348 376 "L3.ml" 15 348 380
)
"L3.ml" 16 384 429 "L3.ml" 16 384 438
type(
  ('a, 'g, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref statement "L3.ml" 12 197 203 "L3.ml" 21 659 734
)
"L3.ml" 16 384 439 "L3.ml" 16 384 442
type(
  ('a, 'g, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref ref "L3.ml" 15 348 364 "L3.ml" 15 348 367
)
"L3.ml" 16 384 443 "L3.ml" 16 384 448
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref cexpr "L3.ml" 15 348 369 "L3.ml" 15 348 374
)
"L3.ml" 16 384 449 "L3.ml" 16 384 453
type(
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref expr "L3.ml" 15 348 376 "L3.ml" 15 348 380
)
"L3.ml" 16 384 429 "L3.ml" 16 384 453
call(
  stack
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
"L3.ml" 16 384 392 "L3.ml" 16 384 454
call(
  tail
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L3.ml" 16 384 392 "L3.ml" 16 384 454
)
type(
  'a
)
ident(
  def _ostap_stream "L3.ml" 16 384 392 "L3.ml" 16 384 454
)
"L3.ml" 17 456 465 "L3.ml" 17 456 468
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  ext_ref Common.loc
)
"L3.ml" 18 477 488 "L3.ml" 18 477 493
type(
  string
)
ident(
  def name "L3.ml" 18 477 488 "L3.ml" 18 477 557
)
"L3.ml" 18 477 493 "L3.ml" 18 477 498
type(
  ('a, string, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Common.ident
)
"L3.ml" 18 477 499 "L3.ml" 18 477 504
type(
  'h list option
)
ident(
  def args "L3.ml" 18 477 530 "L3.ml" 18 477 556
)
"L3.ml" 18 477 506 "L3.ml" 18 477 509
call(
  tail
)
type(
  ('a, 'c, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'c, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  string
)
type(
  string -> ('a, 'c, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L3.ml" 18 477 506 "L3.ml" 18 477 509
)
type(
  'a
)
ident(
  def _ostap_stream "L3.ml" 18 477 506 "L3.ml" 18 477 509
)
"L3.ml" 18 477 510 "L3.ml" 18 477 515
type(
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse ->
  'a -> ('a, 'h list, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  ext_ref Ostap.Util.list0
)
"L3.ml" 18 477 516 "L3.ml" 18 477 520
type(
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref expr "L3.ml" 15 348 376 "L3.ml" 15 348 380
)
"L3.ml" 18 477 510 "L3.ml" 18 477 521
call(
  tail
)
type(
  ('a, 'h list, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'h list, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L3.ml" 18 477 510 "L3.ml" 18 477 521
)
type(
  'a
)
ident(
  def _ostap_stream "L3.ml" 18 477 510 "L3.ml" 18 477 521
)
"L3.ml" 18 477 523 "L3.ml" 18 477 526
call(
  tail
)
type(
  ('a, 'c, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'c, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  string
)
type(
  string -> ('a, 'c, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L3.ml" 18 477 523 "L3.ml" 18 477 526
)
type(
  'a
)
ident(
  def _ostap_stream "L3.ml" 18 477 523 "L3.ml" 18 477 526
)
"L3.ml" 18 477 505 "L3.ml" 18 477 526
call(
  stack
)
call(
  tail
)
call(
  tail
)
type(
  ('a, 'h list, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  'c -> ('a, 'h list, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'h list, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  'h list -> ('a, 'h list, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'h list, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  'c -> 'h list
)
type(
  'h list
)
ident(
  int_ref _0 "L3.ml" 18 477 505 "L3.ml" 18 477 526
)
type(
  'c
)
type(
  ('c -> 'h list) ->
  ('a, 'c, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'h list, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.map
)
type(
  'h list
)
ident(
  def _0 "L3.ml" 18 477 505 "L3.ml" 18 477 526
)
type(
  'h list
)
type(
  ('a, 'h list, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('h list -> ('a, 'h list, Ostap.Reason.t) Ostap.Combinators.parse) ->
  ('a, 'h list, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.seq
)
type(
  'c
)
type(
  ('a, 'c, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('c -> ('a, 'h list, Ostap.Reason.t) Ostap.Combinators.parse) ->
  ('a, 'h list, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.seq
)
"L3.ml" 18 477 504 "L3.ml" 18 477 528
call(
  stack
)
type(
  ('a, 'h list option, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'h list, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'h list option, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.opt
)
"L3.ml" 18 477 537 "L3.ml" 18 477 541
type(
  string
)
ident(
  int_ref name "L3.ml" 18 477 488 "L3.ml" 18 477 493
)
"L3.ml" 18 477 543 "L3.ml" 18 477 550
type(
  'h list option -> 'h list
)
ident(
  ext_ref Common.listify
)
"L3.ml" 18 477 551 "L3.ml" 18 477 555
type(
  'h list option
)
ident(
  int_ref args "L3.ml" 18 477 499 "L3.ml" 18 477 504
)
"L3.ml" 18 477 543 "L3.ml" 18 477 555
call(
  stack
)
type(
  'h list
)
"L3.ml" 18 477 536 "L3.ml" 18 477 556
type(
  string * 'h list
)
"L3.ml" 18 477 530 "L3.ml" 18 477 556
type(
  'f
)
"L3.ml" 18 477 488 "L3.ml" 18 477 557
call(
  tail
)
type(
  string -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  'h list option -> 'f
)
type(
  'h list option
)
ident(
  def _0 "L3.ml" 18 477 530 "L3.ml" 18 477 556
)
type(
  ('h list option -> 'f) ->
  ('a, 'h list option, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.map
)
type(
  string
)
ident(
  def _1 "L3.ml" 18 477 488 "L3.ml" 18 477 557
)
type(
  ('a, string, Ostap.Reason.t) Ostap.Combinators.parse ->
  (string -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse) ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.seq
)
"L3.ml" 17 456 469 "L3.ml" 19 558 568
call(
  tail
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L3.ml" 17 456 469 "L3.ml" 19 558 568
)
type(
  'a
)
ident(
  def _ostap_stream "L3.ml" 17 456 469 "L3.ml" 19 558 568
)
"L3.ml" 17 456 465 "L3.ml" 19 558 569
call(
  tail
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L3.ml" 17 456 465 "L3.ml" 19 558 569
)
type(
  'a
)
ident(
  def _ostap_stream "L3.ml" 17 456 465 "L3.ml" 19 558 569
)
"L3.ml" 16 384 392 "L3.ml" 19 558 569
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.alt
)
"L3.ml" 15 348 354 "L3.ml" 19 558 569
call(
  tail
)
type(
  ('a, 'g, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L3.ml" 15 348 354 "L3.ml" 19 558 569
)
type(
  'a
)
ident(
  def _ostap_stream "L3.ml" 15 348 354 "L3.ml" 19 558 569
)
"L3.ml" 20 571 586 "L3.ml" 20 571 595
type(
  ('a, 'g, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref statement "L3.ml" 12 197 203 "L3.ml" 21 659 734
)
"L3.ml" 20 571 596 "L3.ml" 20 571 614
type(
  ('a, 'g, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref L1.Parse.reference
)
"L3.ml" 20 571 616 "L3.ml" 20 571 635
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref L1.Parse.expression
)
"L3.ml" 20 571 637 "L3.ml" 20 571 656
type(
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref L1.Parse.expression
)
"L3.ml" 20 571 586 "L3.ml" 20 571 657
call(
  tail
)
type(
  'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L3.ml" 20 571 586 "L3.ml" 20 571 657
)
type(
  'a
)
ident(
  def _ostap_stream "L3.ml" 20 571 586 "L3.ml" 20 571 657
)
"L3.ml" 20 571 577 "L3.ml" 20 571 657
type(
  'a -> ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L3.ml" 20 571 577 "L3.ml" 20 571 657
)
type(
  'a
)
ident(
  def _ostap_stream "L3.ml" 20 571 577 "L3.ml" 20 571 657
)
"L3.ml" 21 659 676 "L3.ml" 21 659 688
type(
  ('a, 'm, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  'a -> ('a, string * 'm * 'f list, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  ext_ref Module.parse
)
"L3.ml" 21 659 690 "L3.ml" 21 659 702
type(
  ('a, 'k, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'm, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref declarations "L3.ml" 12 197 203 "L3.ml" 21 659 734
)
"L3.ml" 21 659 703 "L3.ml" 21 659 722
type(
  ('a, 'k, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref PrimitiveType.parse
)
"L3.ml" 21 659 723 "L3.ml" 21 659 727
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref stmt "L3.ml" 12 197 203 "L3.ml" 21 659 734
)
"L3.ml" 21 659 690 "L3.ml" 21 659 727
call(
  stack
)
type(
  ('a, 'm, Ostap.Reason.t) Ostap.Combinators.parse
)
"L3.ml" 21 659 729 "L3.ml" 21 659 733
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref stmt "L3.ml" 12 197 203 "L3.ml" 21 659 734
)
"L3.ml" 21 659 674 "L3.ml" 21 659 734
call(
  tail
)
type(
  'a -> ('a, string * 'm * 'f list, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, string * 'm * 'f list, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L3.ml" 21 659 674 "L3.ml" 21 659 734
)
type(
  'a
)
ident(
  def _ostap_stream "L3.ml" 21 659 674 "L3.ml" 21 659 734
)
"L3.ml" 21 659 665 "L3.ml" 21 659 734
type(
  'a -> ('a, string * 'm * 'f list, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, string * 'm * 'f list, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L3.ml" 21 659 665 "L3.ml" 21 659 734
)
type(
  'a
)
ident(
  def _ostap_stream "L3.ml" 21 659 665 "L3.ml" 21 659 734
)
"L3.ml" 12 197 203 "L3.ml" 21 659 734
type(
  'a -> ('a, string * 'm * 'f list, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  def program "L3.ml" 11 183 187 "L3.ml" 23 741 746
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  def stmt "L3.ml" 11 183 187 "L3.ml" 23 741 746
)
type(
  ('a, 'g, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  def statement "L3.ml" 11 183 187 "L3.ml" 23 741 746
)
type(
  ('a, 'k, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'm, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  def declarations "L3.ml" 11 183 187 "L3.ml" 23 741 746
)
"L3.ml" 29 862 874 "L3.ml" 29 862 883
type(
  ('a -> Ostap.Pretty.printer Monad.Id.t) ->
  ((([> `Assign of 'a * 'a
      | `Call of string * 'a list
      | `Case of
          'a *
          ([< `Atom of 'a | `Interval of 'a * 'a ] list * 'b list) list *
          'b list
      | `For of 'a * 'a * 'a * 'a option * 'b list
      | `If of ('a * 'b list) list * 'b list
      | `While of 'a * 'b list ]
     as 'b) ->
    Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  'b -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  def statement "L3.ml" 29 862 866 "L3.ml" 42 1458 1464
)
"L3.ml" 29 862 884 "L3.ml" 29 862 894
type(
  'a -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  def expression "L3.ml" 29 862 897 "L3.ml" 33 1093 1100
)
"L3.ml" 29 862 897 "L3.ml" 29 862 915
type(
  ('a -> Ostap.Pretty.printer Monad.Id.t) ->
  (('b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  'b -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref L2.Print.statement
)
"L3.ml" 29 862 916 "L3.ml" 29 862 926
type(
  'a -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref expression "L3.ml" 29 862 884 "L3.ml" 29 862 894
)
"L3.ml" 29 862 897 "L3.ml" 29 862 926
call(
  stack
)
type(
  (('b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  'b -> Ostap.Pretty.printer Monad.Id.t
)
"L3.ml" 30 930 941 "L3.ml" 30 930 944
type(
  ((('b -> Ostap.Pretty.printer Monad.Id.t) ->
    'b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  'b -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  def ext "L3.ml" 31 949 950 "L3.ml" 32 1049 1092
)
"L3.ml" 31 949 966 "L3.ml" 31 949 970
type(
  string
)
ident(
  def name "L3.ml" 31 949 982 "L3.ml" 31 949 1048
)
"L3.ml" 31 949 972 "L3.ml" 31 949 976
type(
  'a list
)
ident(
  def args "L3.ml" 31 949 982 "L3.ml" 31 949 1048
)
"L3.ml" 31 949 966 "L3.ml" 31 949 976
type(
  string * 'a list
)
"L3.ml" 31 949 959 "L3.ml" 31 949 977
type(
  'b
)
"L3.ml" 31 949 982 "L3.ml" 31 949 985
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Common.hov
)
"L3.ml" 31 949 987 "L3.ml" 31 949 993
type(
  string -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.string
)
"L3.ml" 31 949 994 "L3.ml" 31 949 998
type(
  string
)
ident(
  int_ref name "L3.ml" 31 949 966 "L3.ml" 31 949 970
)
"L3.ml" 31 949 987 "L3.ml" 31 949 998
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L3.ml" 31 949 1000 "L3.ml" 31 949 1006
type(
  Ostap.Pretty.printer -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.rboxed
)
"L3.ml" 31 949 1008 "L3.ml" 31 949 1024
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Ostap.Pretty.listByCommaBreak
)
"L3.ml" 31 949 1026 "L3.ml" 31 949 1029
type(
  ('a -> Ostap.Pretty.printer Monad.Id.t) ->
  'a list -> Ostap.Pretty.printer list
)
ident(
  ext_ref List.map
)
"L3.ml" 31 949 1030 "L3.ml" 31 949 1040
type(
  'a -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref expression "L3.ml" 29 862 884 "L3.ml" 29 862 894
)
"L3.ml" 31 949 1041 "L3.ml" 31 949 1045
type(
  'a list
)
ident(
  int_ref args "L3.ml" 31 949 972 "L3.ml" 31 949 976
)
"L3.ml" 31 949 1025 "L3.ml" 31 949 1046
call(
  stack
)
type(
  Ostap.Pretty.printer list
)
"L3.ml" 31 949 1007 "L3.ml" 31 949 1047
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L3.ml" 31 949 1000 "L3.ml" 31 949 1047
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L3.ml" 31 949 986 "L3.ml" 31 949 1048
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
"L3.ml" 31 949 982 "L3.ml" 31 949 1048
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L3.ml" 32 1049 1059 "L3.ml" 32 1049 1060
type(
  'b
)
ident(
  def s "L3.ml" 32 1049 1064 "L3.ml" 32 1049 1092
)
"L3.ml" 32 1049 1064 "L3.ml" 32 1049 1067
type(
  ((('b -> Ostap.Pretty.printer Monad.Id.t) ->
    'b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  'b -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref ext "L3.ml" 30 930 941 "L3.ml" 30 930 944
)
"L3.ml" 32 1049 1069 "L3.ml" 32 1049 1078
type(
  ('a -> Ostap.Pretty.printer Monad.Id.t) ->
  (('b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  'b -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref statement "L3.ml" 29 862 874 "L3.ml" 29 862 883
)
"L3.ml" 32 1049 1079 "L3.ml" 32 1049 1089
type(
  'a -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref expression "L3.ml" 29 862 884 "L3.ml" 29 862 894
)
"L3.ml" 32 1049 1068 "L3.ml" 32 1049 1090
call(
  stack
)
type(
  (('b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  'b -> Ostap.Pretty.printer Monad.Id.t
)
"L3.ml" 32 1049 1091 "L3.ml" 32 1049 1092
type(
  'b
)
ident(
  int_ref s "L3.ml" 32 1049 1059 "L3.ml" 32 1049 1060
)
"L3.ml" 32 1049 1064 "L3.ml" 32 1049 1092
call(
  tail
)
type(
  Ostap.Pretty.printer Monad.Id.t
)
"L3.ml" 31 949 950 "L3.ml" 32 1049 1092
type(
  'b -> Ostap.Pretty.printer Monad.Id.t
)
"L3.ml" 30 930 936 "L3.ml" 33 1093 1100
type(
  (((('b -> Ostap.Pretty.printer Monad.Id.t) ->
     'b -> Ostap.Pretty.printer Monad.Id.t) ->
    'b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  'b -> Ostap.Pretty.printer Monad.Id.t
)
"L3.ml" 29 862 897 "L3.ml" 33 1093 1100
call(
  tail
)
type(
  (('b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  'b -> Ostap.Pretty.printer Monad.Id.t
)
type(
  ((('b -> Ostap.Pretty.printer Monad.Id.t) ->
    'b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  ((((('b -> Ostap.Pretty.printer Monad.Id.t) ->
      'b -> Ostap.Pretty.printer Monad.Id.t) ->
     'b -> Ostap.Pretty.printer Monad.Id.t) ->
    'b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  (('b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  'b -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref Common.( ++ )
)
"L3.ml" 29 862 884 "L3.ml" 33 1093 1100
type(
  ('a -> Ostap.Pretty.printer Monad.Id.t) ->
  (('b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  'b -> Ostap.Pretty.printer Monad.Id.t
)
"L3.ml" 34 1104 1116 "L3.ml" 34 1104 1128
type(
  ('c -> Ostap.Pretty.printer) ->
  ('d -> Ostap.Pretty.printer) ->
  ('e -> Ostap.Pretty.printer) ->
  (((string * 'c) list * (string * 'd) list * (string list * 'd) list) *
   (string * ([< `Val | `Var ] * string * 'd) list * 'f * 'e list) list as 'f) ->
  Ostap.Pretty.printer
)
ident(
  def declarations "L3.ml" 34 1104 1108 "L3.ml" 42 1458 1464
)
"L3.ml" 34 1104 1129 "L3.ml" 34 1104 1133
type(
  'c -> Ostap.Pretty.printer
)
ident(
  def expr "L3.ml" 34 1104 1134 "L3.ml" 38 1282 1291
)
"L3.ml" 34 1104 1134 "L3.ml" 34 1104 1137
type(
  'd -> Ostap.Pretty.printer
)
ident(
  def typ "L3.ml" 34 1104 1138 "L3.ml" 38 1282 1291
)
"L3.ml" 34 1104 1138 "L3.ml" 34 1104 1142
type(
  'e -> Ostap.Pretty.printer
)
ident(
  def stmt "L3.ml" 34 1104 1143 "L3.ml" 38 1282 1291
)
"L3.ml" 34 1104 1144 "L3.ml" 34 1104 1145
type(
  (string * 'c) list * (string * 'd) list * (string list * 'd) list
)
ident(
  def d "L3.ml" 35 1152 1160 "L3.ml" 38 1282 1291
)
"L3.ml" 34 1104 1147 "L3.ml" 34 1104 1148
type(
  (string * (([< `Val | `Var ] as 'h) * string * 'd) list * 'f * 'e list)
  list as 'g
)
ident(
  def p "L3.ml" 35 1152 1160 "L3.ml" 38 1282 1291
)
"L3.ml" 34 1104 1144 "L3.ml" 34 1104 1148
type(
  'f
)
"L3.ml" 35 1152 1160 "L3.ml" 35 1152 1164
type(
  Ostap.Pretty.printer list -> Ostap.Pretty.printer
)
ident(
  ext_ref Common.vert
)
"L3.ml" 36 1167 1178 "L3.ml" 36 1167 1199
type(
  ('c -> Ostap.Pretty.printer) ->
  ('d -> Ostap.Pretty.printer) ->
  (string * 'c) list * (string * 'd) list * (string list * 'd) list ->
  Ostap.Pretty.printer
)
ident(
  ext_ref L1.Print.declarations
)
"L3.ml" 36 1167 1200 "L3.ml" 36 1167 1204
type(
  'c -> Ostap.Pretty.printer
)
ident(
  int_ref expr "L3.ml" 34 1104 1129 "L3.ml" 34 1104 1133
)
"L3.ml" 36 1167 1205 "L3.ml" 36 1167 1208
type(
  'd -> Ostap.Pretty.printer
)
ident(
  int_ref typ "L3.ml" 34 1104 1134 "L3.ml" 34 1104 1137
)
"L3.ml" 36 1167 1209 "L3.ml" 36 1167 1210
type(
  (string * 'c) list * (string * 'd) list * (string list * 'd) list
)
ident(
  int_ref d "L3.ml" 34 1104 1144 "L3.ml" 34 1104 1145
)
"L3.ml" 36 1167 1178 "L3.ml" 36 1167 1210
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L3.ml" 36 1167 1177 "L3.ml" 36 1167 1211
type(
  Ostap.Pretty.printer list
)
type(
  Ostap.Pretty.printer list
)
"L3.ml" 37 1215 1226 "L3.ml" 37 1215 1240
type(
  ('d -> Ostap.Pretty.printer) ->
  ('f -> Ostap.Pretty.printer) ->
  ('e -> Ostap.Pretty.printer) -> 'g -> Ostap.Pretty.printer list
)
ident(
  ext_ref ProcDecl.print
)
"L3.ml" 37 1215 1241 "L3.ml" 37 1215 1244
type(
  'd -> Ostap.Pretty.printer
)
ident(
  int_ref typ "L3.ml" 34 1104 1134 "L3.ml" 34 1104 1137
)
"L3.ml" 37 1215 1246 "L3.ml" 37 1215 1258
type(
  ('c -> Ostap.Pretty.printer) ->
  ('d -> Ostap.Pretty.printer) ->
  ('e -> Ostap.Pretty.printer) -> 'f -> Ostap.Pretty.printer
)
ident(
  int_ref declarations "L3.ml" 34 1104 1116 "L3.ml" 34 1104 1128
)
"L3.ml" 37 1215 1259 "L3.ml" 37 1215 1263
type(
  'c -> Ostap.Pretty.printer
)
ident(
  int_ref expr "L3.ml" 34 1104 1129 "L3.ml" 34 1104 1133
)
"L3.ml" 37 1215 1264 "L3.ml" 37 1215 1267
type(
  'd -> Ostap.Pretty.printer
)
ident(
  int_ref typ "L3.ml" 34 1104 1134 "L3.ml" 34 1104 1137
)
"L3.ml" 37 1215 1268 "L3.ml" 37 1215 1272
type(
  'e -> Ostap.Pretty.printer
)
ident(
  int_ref stmt "L3.ml" 34 1104 1138 "L3.ml" 34 1104 1142
)
"L3.ml" 37 1215 1245 "L3.ml" 37 1215 1273
call(
  stack
)
type(
  'f -> Ostap.Pretty.printer
)
"L3.ml" 37 1215 1274 "L3.ml" 37 1215 1278
type(
  'e -> Ostap.Pretty.printer
)
ident(
  int_ref stmt "L3.ml" 34 1104 1138 "L3.ml" 34 1104 1142
)
"L3.ml" 37 1215 1279 "L3.ml" 37 1215 1280
type(
  'g
)
ident(
  int_ref p "L3.ml" 34 1104 1147 "L3.ml" 34 1104 1148
)
"L3.ml" 37 1215 1225 "L3.ml" 37 1215 1281
call(
  stack
)
type(
  Ostap.Pretty.printer list
)
"L3.ml" 36 1167 1177 "L3.ml" 37 1215 1281
type(
  Ostap.Pretty.printer list ->
  Ostap.Pretty.printer list -> Ostap.Pretty.printer list
)
ident(
  ext_ref Pervasives.( @ )
)
"L3.ml" 35 1152 1165 "L3.ml" 38 1282 1291
call(
  stack
)
type(
  Ostap.Pretty.printer list
)
"L3.ml" 35 1152 1160 "L3.ml" 38 1282 1291
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L3.ml" 34 1104 1143 "L3.ml" 38 1282 1291
type(
  'f -> Ostap.Pretty.printer
)
"L3.ml" 34 1104 1138 "L3.ml" 38 1282 1291
type(
  ('e -> Ostap.Pretty.printer) -> 'f -> Ostap.Pretty.printer
)
"L3.ml" 34 1104 1134 "L3.ml" 38 1282 1291
type(
  ('d -> Ostap.Pretty.printer) ->
  ('e -> Ostap.Pretty.printer) -> 'f -> Ostap.Pretty.printer
)
"L3.ml" 34 1104 1129 "L3.ml" 38 1282 1291
type(
  ('c -> Ostap.Pretty.printer) ->
  ('d -> Ostap.Pretty.printer) ->
  ('e -> Ostap.Pretty.printer) -> 'f -> Ostap.Pretty.printer
)
"L3.ml" 39 1292 1300 "L3.ml" 39 1292 1307
type(
  string *
  (((string *
     ([> `Binop of
           [< `Add
            | `And
            | `Div
            | `Eq
            | `Ge
            | `Gt
            | `Le
            | `Lt
            | `Mod
            | `Mul
            | `Ne
            | `Or
            | `Sub ] *
           'j * 'j
       | `Const of [< `False | `Literal of int | `True ]
       | `Ident of string
       | `Unop of [< `Neg | `Not ] * 'j ]
      as 'j))
    list * (string * ([< `Bool | `Int | `User of string ] as 'k)) list *
    (string list * 'k) list) *
   (string * ([< `Val | `Var ] * string * 'k) list * 'i *
    ([> `Assign of
          ([> `Binop of
                [< `Add
                 | `And
                 | `Div
                 | `Eq
                 | `Ge
                 | `Gt
                 | `Le
                 | `Lt
                 | `Mod
                 | `Mul
                 | `Ne
                 | `Or
                 | `Sub ] *
                'm * 'm
            | `Const of [< `False | `Literal of int | `True ]
            | `Ident of string
            | `Unop of [< `Neg | `Not ] * 'm ]
           as 'm) *
          'm
      | `Call of string * 'm list
      | `Case of
          'm *
          ([< `Atom of 'm | `Interval of 'm * 'm ] list * 'l list) list *
          'l list
      | `For of 'm * 'm * 'm * 'm option * 'l list
      | `If of ('m * 'l list) list * 'l list
      | `While of 'm * 'l list ]
     as 'l)
    list)
   list as 'i) *
  ([> `Assign of
        ([> `Binop of
              [< `Add
               | `And
               | `Div
               | `Eq
               | `Ge
               | `Gt
               | `Le
               | `Lt
               | `Mod
               | `Mul
               | `Ne
               | `Or
               | `Sub ] *
              'o * 'o
          | `Const of [< `False | `Literal of int | `True ]
          | `Ident of string
          | `Unop of [< `Neg | `Not ] * 'o ]
         as 'o) *
        'o
    | `Call of string * 'o list
    | `Case of
        'o * ([< `Atom of 'o | `Interval of 'o * 'o ] list * 'n list) list *
        'n list
    | `For of 'o * 'o * 'o * 'o option * 'n list
    | `If of ('o * 'n list) list * 'n list
    | `While of 'o * 'n list ]
   as 'n)
  list -> Ostap.Pretty.printer
)
ident(
  def program "L3.ml" 41 1372 1457 "L3.ml" 42 1458 1464
)
"L3.ml" 39 1292 1308 "L3.ml" 39 1292 1309
type(
  string * 'i * 'n list
)
ident(
  def m "L3.ml" 40 1312 1318 "L3.ml" 41 1372 1457
)
"L3.ml" 40 1312 1322 "L3.ml" 40 1312 1326
type(
  ([> `Assign of
        ([> `Binop of
              [< `Add
               | `And
               | `Div
               | `Eq
               | `Ge
               | `Gt
               | `Le
               | `Lt
               | `Mod
               | `Mul
               | `Ne
               | `Or
               | `Sub ] *
              'q * 'q
          | `Const of [< `False | `Literal of int | `True ]
          | `Ident of string
          | `Unop of [< `Neg | `Not ] * 'q ]
         as 'q) *
        'q
    | `Call of string * 'q list
    | `Case of
        'q * ([< `Atom of 'q | `Interval of 'q * 'q ] list * 'p list) list *
        'p list
    | `For of 'q * 'q * 'q * 'q option * 'p list
    | `If of ('q * 'p list) list * 'p list
    | `While of 'q * 'p list ]
   as 'p) ->
  Ostap.Pretty.printer Monad.Id.t
)
ident(
  def stmt "L3.ml" 41 1372 1378 "L3.ml" 41 1372 1457
)
"L3.ml" 40 1312 1327 "L3.ml" 40 1312 1328
type(
  'p
)
ident(
  def s "L3.ml" 40 1312 1331 "L3.ml" 40 1312 1368
)
"L3.ml" 40 1312 1331 "L3.ml" 40 1312 1340
type(
  ('q -> Ostap.Pretty.printer Monad.Id.t) ->
  (('p -> Ostap.Pretty.printer Monad.Id.t) ->
   'p -> Ostap.Pretty.printer Monad.Id.t) ->
  'p -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref statement "L3.ml" 29 862 874 "L3.ml" 29 862 883
)
"L3.ml" 40 1312 1341 "L3.ml" 40 1312 1360
type(
  'q -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref L1.Print.expression
)
"L3.ml" 40 1312 1361 "L3.ml" 40 1312 1366
type(
  ('p -> Ostap.Pretty.printer Monad.Id.t) ->
  'p -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref Common.apply
)
"L3.ml" 40 1312 1367 "L3.ml" 40 1312 1368
type(
  'p
)
ident(
  int_ref s "L3.ml" 40 1312 1327 "L3.ml" 40 1312 1328
)
"L3.ml" 40 1312 1331 "L3.ml" 40 1312 1368
call(
  tail
)
type(
  Ostap.Pretty.printer Monad.Id.t
)
"L3.ml" 40 1312 1327 "L3.ml" 40 1312 1368
type(
  'p -> Ostap.Pretty.printer Monad.Id.t
)
"L3.ml" 41 1372 1378 "L3.ml" 41 1372 1390
type(
  ('i -> Ostap.Pretty.printer) ->
  ('n -> Ostap.Pretty.printer) ->
  string * 'i * 'n list -> Ostap.Pretty.printer
)
ident(
  ext_ref Module.print
)
"L3.ml" 41 1372 1392 "L3.ml" 41 1372 1404
type(
  ('j -> Ostap.Pretty.printer) ->
  ('k -> Ostap.Pretty.printer) ->
  ('l -> Ostap.Pretty.printer) -> 'i -> Ostap.Pretty.printer
)
ident(
  int_ref declarations "L3.ml" 34 1104 1116 "L3.ml" 34 1104 1128
)
"L3.ml" 41 1372 1405 "L3.ml" 41 1372 1424
type(
  'j -> Ostap.Pretty.printer
)
ident(
  ext_ref L1.Print.expression
)
"L3.ml" 41 1372 1425 "L3.ml" 41 1372 1444
type(
  'k -> Ostap.Pretty.printer
)
ident(
  ext_ref PrimitiveType.print
)
"L3.ml" 41 1372 1445 "L3.ml" 41 1372 1449
type(
  'l -> Ostap.Pretty.printer
)
ident(
  int_ref stmt "L3.ml" 40 1312 1322 "L3.ml" 40 1312 1326
)
"L3.ml" 41 1372 1391 "L3.ml" 41 1372 1450
call(
  stack
)
type(
  'i -> Ostap.Pretty.printer
)
"L3.ml" 41 1372 1451 "L3.ml" 41 1372 1455
type(
  'n -> Ostap.Pretty.printer
)
ident(
  int_ref stmt "L3.ml" 40 1312 1322 "L3.ml" 40 1312 1326
)
"L3.ml" 41 1372 1456 "L3.ml" 41 1372 1457
type(
  string * 'i * 'n list
)
ident(
  int_ref m "L3.ml" 39 1292 1308 "L3.ml" 39 1292 1309
)
"L3.ml" 41 1372 1378 "L3.ml" 41 1372 1457
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L3.ml" 40 1312 1318 "L3.ml" 41 1372 1457
type(
  Ostap.Pretty.printer
)
"L3.ml" 39 1292 1308 "L3.ml" 41 1372 1457
type(
  string * 'i * 'n list -> Ostap.Pretty.printer
)
"L3.ml" 53 1637 1650 "L3.ml" 53 1637 1654
type(
  < compositeType : ([> `Bool | `Int | `User of string * string * 'a ] as 'a) ->
                    bool;
    down : string -> unit;
    extractInternal : [ `Const of 'b
                      | `Param of string * 'c
                      | `Proc of
                          string *
                          (([> `Val | `Var ] as 'd) * string *
                           ([> `Int ] as 'e))
                          list
                      | `Type of string * ([> `Bool | `Int ] as 'f)
                      | `VParam of string * 'g
                      | `Var of string * 'h ] -> string;
    getInternal : String.t -> string;
    lookup : String.t ->
             ([ `Const of 'b
              | `Param of string * 'c
              | `Proc of string * ('d * string * 'e) list
              | `Type of string * 'f
              | `VParam of string * 'g
              | `Var of string * 'h ], Ostap.Msg.t)
             Checked.t;
    lookupConst : String.t ->
                  ([ `Const of 'b
                   | `Param of string * 'c
                   | `Proc of string * ('d * string * 'e) list
                   | `Type of string * 'f
                   | `VParam of string * 'g
                   | `Var of string * 'h ], Ostap.Msg.t)
                  Checked.t;
    lookupProc : String.t ->
                 ([ `Const of 'b
                  | `Param of string * 'c
                  | `Proc of string * ('d * string * 'e) list
                  | `Type of string * 'f
                  | `VParam of string * 'g
                  | `Var of string * 'h ], Ostap.Msg.t)
                 Checked.t;
    lookupVar : String.t ->
                ([ `Const of 'b
                 | `Param of string * 'c
                 | `Proc of string * ('d * string * 'e) list
                 | `Type of string * 'f
                 | `VParam of string * 'g
                 | `Var of string * 'h ], Ostap.Msg.t)
                Checked.t;
    namer : unit -> < getName : String.t -> String.t >; up : unit -> unit;
    update : String.t ->
             [ `Const of 'b
             | `Param of string * 'c
             | `Proc of string * ('d * string * 'e) list
             | `Type of string * 'f
             | `VParam of string * 'g
             | `Var of string * 'h ] -> (unit, Ostap.Msg.t) Checked.t;
    updateConst : String.t -> 'b -> (unit, Ostap.Msg.t) Checked.t;
    updateVars : String.t list -> 'h -> (unit, Ostap.Msg.t) Checked.t; .. >
)
"L3.ml" 56 1713 1723 "L3.ml" 56 1713 1729
type(
  (unit, Ostap.Msg.t) Checked.t -> unit
)
ident(
  ext_ref Pervasives.ignore
)
"L3.ml" 56 1713 1731 "L3.ml" 56 1713 1735
type(
  < compositeType : 'a -> bool; down : string -> unit;
    extractInternal : [ `Const of 'b
                      | `Param of string * 'c
                      | `Proc of string * ('d * string * 'e) list
                      | `Type of string * 'f
                      | `VParam of string * 'g
                      | `Var of string * 'h ] -> string;
    getInternal : String.t -> string;
    lookup : String.t ->
             ([ `Const of 'b
              | `Param of string * 'c
              | `Proc of string * ('d * string * 'e) list
              | `Type of string * 'f
              | `VParam of string * 'g
              | `Var of string * 'h ], Ostap.Msg.t)
             Checked.t;
    lookupConst : String.t ->
                  ([ `Const of 'b
                   | `Param of string * 'c
                   | `Proc of string * ('d * string * 'e) list
                   | `Type of string * 'f
                   | `VParam of string * 'g
                   | `Var of string * 'h ], Ostap.Msg.t)
                  Checked.t;
    lookupProc : String.t ->
                 ([ `Const of 'b
                  | `Param of string * 'c
                  | `Proc of string * ('d * string * 'e) list
                  | `Type of string * 'f
                  | `VParam of string * 'g
                  | `Var of string * 'h ], Ostap.Msg.t)
                 Checked.t;
    lookupVar : String.t ->
                ([ `Const of 'b
                 | `Param of string * 'c
                 | `Proc of string * ('d * string * 'e) list
                 | `Type of string * 'f
                 | `VParam of string * 'g
                 | `Var of string * 'h ], Ostap.Msg.t)
                Checked.t;
    namer : unit -> < getName : String.t -> String.t >; up : unit -> unit;
    update : String.t ->
             [ `Const of 'b
             | `Param of string * 'c
             | `Proc of string * ('d * string * 'e) list
             | `Type of string * 'f
             | `VParam of string * 'g
             | `Var of string * 'h ] -> (unit, Ostap.Msg.t) Checked.t;
    updateConst : String.t -> 'b -> (unit, Ostap.Msg.t) Checked.t;
    updateVars : String.t list -> 'h -> (unit, Ostap.Msg.t) Checked.t; .. >
  as 'i
)
ident(
  int_ref self "L3.ml" 53 1637 1650 "L3.ml" 53 1637 1654
)
"L3.ml" 56 1713 1731 "L3.ml" 56 1713 1742
call(
  stack
)
type(
  String.t ->
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ] -> (unit, Ostap.Msg.t) Checked.t
)
"L3.ml" 56 1713 1743 "L3.ml" 56 1713 1750
type(
  String.t
)
"L3.ml" 56 1713 1759 "L3.ml" 56 1713 1766
type(
  string
)
"L3.ml" 56 1713 1769 "L3.ml" 56 1713 1773
type(
  'd
)
"L3.ml" 56 1713 1775 "L3.ml" 56 1713 1778
type(
  string
)
"L3.ml" 56 1713 1780 "L3.ml" 56 1713 1784
type(
  'e
)
"L3.ml" 56 1713 1769 "L3.ml" 56 1713 1784
type(
  'd * string * 'e
)
"L3.ml" 56 1713 1768 "L3.ml" 56 1713 1785
type(
  ('d * string * 'e) list
)
type(
  ('d * string * 'e) list
)
"L3.ml" 56 1713 1758 "L3.ml" 56 1713 1786
type(
  string * ('d * string * 'e) list
)
"L3.ml" 56 1713 1751 "L3.ml" 56 1713 1787
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
"L3.ml" 56 1713 1730 "L3.ml" 56 1713 1788
type(
  (unit, Ostap.Msg.t) Checked.t
)
"L3.ml" 56 1713 1723 "L3.ml" 56 1713 1788
type(
  unit
)
"L3.ml" 57 1790 1800 "L3.ml" 57 1790 1806
type(
  (unit, Ostap.Msg.t) Checked.t -> unit
)
ident(
  ext_ref Pervasives.ignore
)
"L3.ml" 57 1790 1808 "L3.ml" 57 1790 1812
type(
  'i
)
ident(
  int_ref self "L3.ml" 53 1637 1650 "L3.ml" 53 1637 1654
)
"L3.ml" 57 1790 1808 "L3.ml" 57 1790 1819
call(
  stack
)
type(
  String.t ->
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ] -> (unit, Ostap.Msg.t) Checked.t
)
"L3.ml" 57 1790 1820 "L3.ml" 57 1790 1829
type(
  String.t
)
"L3.ml" 57 1790 1838 "L3.ml" 57 1790 1847
type(
  string
)
"L3.ml" 57 1790 1849 "L3.ml" 57 1790 1851
type(
  ('d * string * 'e) list
)
"L3.ml" 57 1790 1837 "L3.ml" 57 1790 1852
type(
  string * ('d * string * 'e) list
)
"L3.ml" 57 1790 1830 "L3.ml" 57 1790 1853
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
"L3.ml" 57 1790 1807 "L3.ml" 57 1790 1854
type(
  (unit, Ostap.Msg.t) Checked.t
)
"L3.ml" 57 1790 1800 "L3.ml" 57 1790 1854
type(
  unit
)
"L3.ml" 58 1856 1866 "L3.ml" 58 1856 1872
type(
  (unit, Ostap.Msg.t) Checked.t -> unit
)
ident(
  ext_ref Pervasives.ignore
)
"L3.ml" 58 1856 1874 "L3.ml" 58 1856 1878
type(
  'i
)
ident(
  int_ref self "L3.ml" 53 1637 1650 "L3.ml" 53 1637 1654
)
"L3.ml" 58 1856 1874 "L3.ml" 58 1856 1885
call(
  stack
)
type(
  String.t ->
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ] -> (unit, Ostap.Msg.t) Checked.t
)
"L3.ml" 58 1856 1886 "L3.ml" 58 1856 1896
type(
  String.t
)
"L3.ml" 58 1856 1905 "L3.ml" 58 1856 1915
type(
  string
)
"L3.ml" 58 1856 1918 "L3.ml" 58 1856 1922
type(
  'd
)
"L3.ml" 58 1856 1924 "L3.ml" 58 1856 1927
type(
  string
)
"L3.ml" 58 1856 1929 "L3.ml" 58 1856 1933
type(
  'e
)
"L3.ml" 58 1856 1918 "L3.ml" 58 1856 1933
type(
  'd * string * 'e
)
"L3.ml" 58 1856 1917 "L3.ml" 58 1856 1934
type(
  ('d * string * 'e) list
)
type(
  ('d * string * 'e) list
)
"L3.ml" 58 1856 1904 "L3.ml" 58 1856 1935
type(
  string * ('d * string * 'e) list
)
"L3.ml" 58 1856 1897 "L3.ml" 58 1856 1936
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
"L3.ml" 58 1856 1873 "L3.ml" 58 1856 1937
type(
  (unit, Ostap.Msg.t) Checked.t
)
"L3.ml" 58 1856 1866 "L3.ml" 58 1856 1937
type(
  unit
)
"L3.ml" 59 1939 1949 "L3.ml" 59 1939 1955
type(
  (unit, Ostap.Msg.t) Checked.t -> unit
)
ident(
  ext_ref Pervasives.ignore
)
"L3.ml" 59 1939 1957 "L3.ml" 59 1939 1961
type(
  'i
)
ident(
  int_ref self "L3.ml" 53 1637 1650 "L3.ml" 53 1637 1654
)
"L3.ml" 59 1939 1957 "L3.ml" 59 1939 1968
call(
  stack
)
type(
  String.t ->
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ] -> (unit, Ostap.Msg.t) Checked.t
)
"L3.ml" 59 1939 1969 "L3.ml" 59 1939 1975
type(
  String.t
)
"L3.ml" 59 1939 1984 "L3.ml" 59 1939 1990
type(
  string
)
"L3.ml" 59 1939 1993 "L3.ml" 59 1939 1997
type(
  'd
)
"L3.ml" 59 1939 1999 "L3.ml" 59 1939 2002
type(
  string
)
"L3.ml" 59 1939 2004 "L3.ml" 59 1939 2008
type(
  'e
)
"L3.ml" 59 1939 1993 "L3.ml" 59 1939 2008
type(
  'd * string * 'e
)
"L3.ml" 59 1939 1992 "L3.ml" 59 1939 2009
type(
  ('d * string * 'e) list
)
type(
  ('d * string * 'e) list
)
"L3.ml" 59 1939 1983 "L3.ml" 59 1939 2010
type(
  string * ('d * string * 'e) list
)
"L3.ml" 59 1939 1976 "L3.ml" 59 1939 2011
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
"L3.ml" 59 1939 1956 "L3.ml" 59 1939 2012
type(
  (unit, Ostap.Msg.t) Checked.t
)
"L3.ml" 59 1939 1949 "L3.ml" 59 1939 2012
type(
  unit
)
"L3.ml" 60 2014 2024 "L3.ml" 60 2014 2030
type(
  < down : string -> unit; downGlobal : string -> unit;
    genericDown : string -> bool -> unit; getInternal : String.t -> string;
    lookup : String.t ->
             ([ `Const of 'b
              | `Param of string * 'c
              | `Proc of string * ('d * string * 'e) list
              | `Type of string * 'f
              | `VParam of string * 'g
              | `Var of string * 'h ], Ostap.Msg.t)
             Checked.t;
    lookupShallow : String.t ->
                    ([ `Const of 'b
                     | `Param of string * 'c
                     | `Proc of string * ('d * string * 'e) list
                     | `Type of string * 'f
                     | `VParam of string * 'g
                     | `Var of string * 'h ], Ostap.Msg.t)
                    Checked.t;
    name : String.t; namer : unit -> < getName : String.t -> String.t >;
    up : unit -> unit;
    update : String.t ->
             [ `Const of 'b
             | `Param of string * 'c
             | `Proc of string * ('d * string * 'e) list
             | `Type of string * 'f
             | `VParam of string * 'g
             | `Var of string * 'h ] -> (unit, Ostap.Msg.t) Checked.t;
    updateList : (String.t *
                  [ `Const of 'b
                  | `Param of string * 'c
                  | `Proc of string * ('d * string * 'e) list
                  | `Type of string * 'f
                  | `VParam of string * 'g
                  | `Var of string * 'h ])
                 list -> (unit, Ostap.Msg.t) Checked.t >
)
ident(
  ext_ref idents
)
"L3.ml" 60 2014 2024 "L3.ml" 60 2014 2041
call(
  tail
)
type(
  string -> unit
)
"L3.ml" 60 2014 2042 "L3.ml" 60 2014 2047
type(
  string
)
"L3.ml" 60 2014 2024 "L3.ml" 60 2014 2047
type(
  unit
)
"L3.ml" 56 1713 1723 "L3.ml" 60 2014 2047
type(
  'i -> unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
type(
  unit
)
"L3.ml" 62 2049 2081 "L3.ml" 62 2049 2082
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
ident(
  def x "L3.ml" 63 2089 2099 "L3.ml" 66 2247 2280
)
"L3.ml" 63 2089 2105 "L3.ml" 63 2089 2106
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
ident(
  int_ref x "L3.ml" 62 2049 2081 "L3.ml" 62 2049 2082
)
"L3.ml" 64 2112 2130 "L3.ml" 64 2112 2135
type(
  string
)
ident(
  def iname "L3.ml" 64 2112 2203 "L3.ml" 64 2112 2208
)
"L3.ml" 64 2112 2137 "L3.ml" 64 2112 2138
type(
  'h
)
"L3.ml" 64 2112 2130 "L3.ml" 64 2112 2138
type(
  string * 'h
)
"L3.ml" 64 2112 2124 "L3.ml" 64 2112 2139
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
"L3.ml" 64 2112 2151 "L3.ml" 64 2112 2156
type(
  string
)
ident(
  def iname "L3.ml" 64 2112 2203 "L3.ml" 64 2112 2208
)
"L3.ml" 64 2112 2158 "L3.ml" 64 2112 2159
type(
  'g
)
"L3.ml" 64 2112 2151 "L3.ml" 64 2112 2159
type(
  string * 'g
)
"L3.ml" 64 2112 2142 "L3.ml" 64 2112 2160
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
"L3.ml" 64 2112 2124 "L3.ml" 64 2112 2160
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
"L3.ml" 64 2112 2171 "L3.ml" 64 2112 2176
type(
  string
)
ident(
  def iname "L3.ml" 64 2112 2203 "L3.ml" 64 2112 2208
)
"L3.ml" 64 2112 2178 "L3.ml" 64 2112 2179
type(
  'c
)
"L3.ml" 64 2112 2171 "L3.ml" 64 2112 2179
type(
  string * 'c
)
"L3.ml" 64 2112 2163 "L3.ml" 64 2112 2180
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
"L3.ml" 64 2112 2124 "L3.ml" 64 2112 2180
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
"L3.ml" 64 2112 2190 "L3.ml" 64 2112 2195
type(
  string
)
ident(
  def iname "L3.ml" 64 2112 2203 "L3.ml" 64 2112 2208
)
"L3.ml" 64 2112 2197 "L3.ml" 64 2112 2198
type(
  'f
)
"L3.ml" 64 2112 2190 "L3.ml" 64 2112 2198
type(
  string * 'f
)
"L3.ml" 64 2112 2183 "L3.ml" 64 2112 2199
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
"L3.ml" 64 2112 2124 "L3.ml" 64 2112 2199
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
"L3.ml" 64 2112 2203 "L3.ml" 64 2112 2208
type(
  string
)
ident(
  int_ref iname "L3.ml" 64 2112 2130 "L3.ml" 64 2112 2135
)
"L3.ml" 65 2209 2228 "L3.ml" 65 2209 2233
type(
  string
)
ident(
  def iname "L3.ml" 65 2209 2241 "L3.ml" 65 2209 2246
)
"L3.ml" 65 2209 2235 "L3.ml" 65 2209 2236
type(
  ('d * string * 'e) list
)
"L3.ml" 65 2209 2228 "L3.ml" 65 2209 2236
type(
  string * ('d * string * 'e) list
)
"L3.ml" 65 2209 2221 "L3.ml" 65 2209 2237
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
"L3.ml" 65 2209 2241 "L3.ml" 65 2209 2246
type(
  string
)
ident(
  int_ref iname "L3.ml" 65 2209 2228 "L3.ml" 65 2209 2233
)
"L3.ml" 66 2247 2266 "L3.ml" 66 2247 2267
type(
  'b
)
"L3.ml" 66 2247 2259 "L3.ml" 66 2247 2267
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
"L3.ml" 66 2247 2271 "L3.ml" 66 2247 2280
type(
  string
)
"L3.ml" 63 2089 2099 "L3.ml" 66 2247 2280
type(
  string
)
"L3.ml" 62 2049 2080 "L3.ml" 66 2247 2280
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ] -> string
)
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ] -> string
)
"L3.ml" 62 2049 2057 "L3.ml" 66 2247 2280
type(
  'i ->
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ] -> string
)
"L3.ml" 68 2282 2308 "L3.ml" 68 2282 2312
type(
  String.t
)
ident(
  def name "L3.ml" 68 2282 2315 "L3.ml" 68 2282 2333
)
"L3.ml" 68 2282 2315 "L3.ml" 68 2282 2321
type(
  < down : string -> unit; downGlobal : string -> unit;
    genericDown : string -> bool -> unit; getInternal : String.t -> string;
    lookup : String.t ->
             ([ `Const of 'b
              | `Param of string * 'c
              | `Proc of string * ('d * string * 'e) list
              | `Type of string * 'f
              | `VParam of string * 'g
              | `Var of string * 'h ], Ostap.Msg.t)
             Checked.t;
    lookupShallow : String.t ->
                    ([ `Const of 'b
                     | `Param of string * 'c
                     | `Proc of string * ('d * string * 'e) list
                     | `Type of string * 'f
                     | `VParam of string * 'g
                     | `Var of string * 'h ], Ostap.Msg.t)
                    Checked.t;
    name : String.t; namer : unit -> < getName : String.t -> String.t >;
    up : unit -> unit;
    update : String.t ->
             [ `Const of 'b
             | `Param of string * 'c
             | `Proc of string * ('d * string * 'e) list
             | `Type of string * 'f
             | `VParam of string * 'g
             | `Var of string * 'h ] -> (unit, Ostap.Msg.t) Checked.t;
    updateList : (String.t *
                  [ `Const of 'b
                  | `Param of string * 'c
                  | `Proc of string * ('d * string * 'e) list
                  | `Type of string * 'f
                  | `VParam of string * 'g
                  | `Var of string * 'h ])
                 list -> (unit, Ostap.Msg.t) Checked.t >
)
ident(
  ext_ref idents
)
"L3.ml" 68 2282 2315 "L3.ml" 68 2282 2328
call(
  tail
)
type(
  String.t ->
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
"L3.ml" 68 2282 2329 "L3.ml" 68 2282 2333
type(
  String.t
)
ident(
  int_ref name "L3.ml" 68 2282 2308 "L3.ml" 68 2282 2312
)
"L3.ml" 68 2282 2315 "L3.ml" 68 2282 2333
type(
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
"L3.ml" 68 2282 2308 "L3.ml" 68 2282 2333
type(
  String.t ->
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
type(
  String.t ->
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
"L3.ml" 68 2282 2290 "L3.ml" 68 2282 2333
type(
  'i ->
  String.t ->
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
"L3.ml" 70 2335 2360 "L3.ml" 70 2335 2364
type(
  String.t
)
ident(
  def name "L3.ml" 71 2367 2377 "L3.ml" 75 2529 2540
)
"L3.ml" 71 2367 2377 "L3.ml" 71 2367 2381
type(
  'i
)
ident(
  int_ref self "L3.ml" 53 1637 1650 "L3.ml" 53 1637 1654
)
"L3.ml" 71 2367 2377 "L3.ml" 71 2367 2388
call(
  stack
)
type(
  String.t ->
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
"L3.ml" 71 2367 2389 "L3.ml" 71 2367 2393
type(
  String.t
)
ident(
  int_ref name "L3.ml" 70 2335 2360 "L3.ml" 70 2335 2364
)
"L3.ml" 71 2367 2377 "L3.ml" 71 2367 2393
type(
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
"L3.ml" 73 2422 2439 "L3.ml" 73 2422 2440
type(
  string * 'h
)
"L3.ml" 73 2422 2434 "L3.ml" 73 2422 2440
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
"L3.ml" 73 2422 2451 "L3.ml" 73 2422 2452
type(
  string * 'g
)
"L3.ml" 73 2422 2443 "L3.ml" 73 2422 2452
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
"L3.ml" 73 2422 2434 "L3.ml" 73 2422 2452
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
"L3.ml" 73 2422 2462 "L3.ml" 73 2422 2463
type(
  string * 'c
)
"L3.ml" 73 2422 2455 "L3.ml" 73 2422 2463
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
"L3.ml" 73 2422 2434 "L3.ml" 73 2422 2463
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
"L3.ml" 73 2422 2433 "L3.ml" 73 2422 2469
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
ident(
  def x "L3.ml" 73 2422 2473 "L3.ml" 73 2422 2482
)
"L3.ml" 73 2422 2477 "L3.ml" 73 2422 2478
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
ident(
  int_ref x "L3.ml" 73 2422 2433 "L3.ml" 73 2422 2469
)
"L3.ml" 73 2422 2473 "L3.ml" 73 2422 2482
call(
  tail
)
type(
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ] ->
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
ident(
  ext_ref Checked.( !! )
)
"L3.ml" 74 2484 2497 "L3.ml" 74 2484 2498
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ]
)
"L3.ml" 74 2484 2502 "L3.ml" 74 2484 2507
type(
  String.t ->
  String.t ->
  String.t ->
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
ident(
  ext_ref Common.wrong
)
"L3.ml" 74 2484 2508 "L3.ml" 74 2484 2518
type(
  String.t
)
"L3.ml" 74 2484 2519 "L3.ml" 74 2484 2523
type(
  String.t
)
ident(
  int_ref name "L3.ml" 70 2335 2360 "L3.ml" 70 2335 2364
)
"L3.ml" 74 2484 2524 "L3.ml" 74 2484 2528
type(
  String.t
)
ident(
  int_ref name "L3.ml" 70 2335 2360 "L3.ml" 70 2335 2364
)
"L3.ml" 74 2484 2502 "L3.ml" 74 2484 2528
call(
  tail
)
type(
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
"L3.ml" 72 2401 2411 "L3.ml" 75 2529 2540
type(
  [ `Const of 'b
  | `Param of string * 'c
  | `Proc of string * ('d * string * 'e) list
  | `Type of string * 'f
  | `VParam of string * 'g
  | `Var of string * 'h ] ->
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
"L3.ml" 71 2367 2377 "L3.ml" 75 2529 2540
call(
  tail
)
type(
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
type(
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t ->
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ] ->
   ([ `Const of 'b
    | `Param of string * 'c
    | `Proc of string * ('d * string * 'e) list
    | `Type of string * 'f
    | `VParam of string * 'g
    | `Var of string * 'h ], Ostap.Msg.t)
   Checked.t) ->
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
ident(
  ext_ref Checked.( -?->> )
)
"L3.ml" 70 2335 2360 "L3.ml" 75 2529 2540
type(
  String.t ->
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
type(
  String.t ->
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
"L3.ml" 70 2335 2343 "L3.ml" 75 2529 2540
type(
  'i ->
  String.t ->
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
"L3.ml" 77 2542 2572 "L3.ml" 77 2542 2573
type(
  'a
)
ident(
  def x "L3.ml" 78 2635 2645 "L3.ml" 81 2744 2765
)
"L3.ml" 78 2635 2651 "L3.ml" 78 2635 2652
type(
  'a
)
ident(
  int_ref x "L3.ml" 77 2542 2572 "L3.ml" 77 2542 2573
)
"L3.ml" 79 2658 2670 "L3.ml" 79 2658 2674
type(
  'a
)
"L3.ml" 79 2658 2677 "L3.ml" 79 2658 2682
type(
  'a
)
"L3.ml" 79 2658 2670 "L3.ml" 79 2658 2682
type(
  'a
)
"L3.ml" 79 2658 2686 "L3.ml" 79 2658 2691
type(
  bool
)
"L3.ml" 80 2692 2711 "L3.ml" 80 2692 2712
type(
  string
)
"L3.ml" 80 2692 2714 "L3.ml" 80 2692 2715
type(
  string
)
"L3.ml" 80 2692 2717 "L3.ml" 80 2692 2718
type(
  'a
)
ident(
  def x "L3.ml" 80 2692 2723 "L3.ml" 80 2692 2743
)
"L3.ml" 80 2692 2711 "L3.ml" 80 2692 2718
type(
  string * string * 'a
)
"L3.ml" 80 2692 2704 "L3.ml" 80 2692 2719
type(
  'a
)
"L3.ml" 80 2692 2723 "L3.ml" 80 2692 2727
type(
  'i
)
ident(
  int_ref self "L3.ml" 53 1637 1650 "L3.ml" 53 1637 1654
)
"L3.ml" 80 2692 2723 "L3.ml" 80 2692 2741
call(
  tail
)
type(
  'a -> bool
)
"L3.ml" 80 2692 2742 "L3.ml" 80 2692 2743
type(
  'a
)
ident(
  int_ref x "L3.ml" 80 2692 2717 "L3.ml" 80 2692 2718
)
"L3.ml" 80 2692 2723 "L3.ml" 80 2692 2743
type(
  bool
)
"L3.ml" 81 2744 2756 "L3.ml" 81 2744 2757
type(
  'a
)
"L3.ml" 81 2744 2761 "L3.ml" 81 2744 2765
type(
  bool
)
"L3.ml" 78 2635 2645 "L3.ml" 81 2744 2765
type(
  bool
)
"L3.ml" 77 2542 2571 "L3.ml" 81 2744 2765
type(
  'a -> bool
)
type(
  'a -> bool
)
"L3.ml" 77 2542 2550 "L3.ml" 81 2744 2765
type(
  'i -> 'a -> bool
)
"L3.ml" 83 2767 2787 "L3.ml" 83 2767 2789
type(
  unit
)
"L3.ml" 83 2767 2792 "L3.ml" 83 2767 2798
type(
  < down : string -> unit; downGlobal : string -> unit;
    genericDown : string -> bool -> unit; getInternal : String.t -> string;
    lookup : String.t ->
             ([ `Const of 'b
              | `Param of string * 'c
              | `Proc of string * ('d * string * 'e) list
              | `Type of string * 'f
              | `VParam of string * 'g
              | `Var of string * 'h ], Ostap.Msg.t)
             Checked.t;
    lookupShallow : String.t ->
                    ([ `Const of 'b
                     | `Param of string * 'c
                     | `Proc of string * ('d * string * 'e) list
                     | `Type of string * 'f
                     | `VParam of string * 'g
                     | `Var of string * 'h ], Ostap.Msg.t)
                    Checked.t;
    name : String.t; namer : unit -> < getName : String.t -> String.t >;
    up : unit -> unit;
    update : String.t ->
             [ `Const of 'b
             | `Param of string * 'c
             | `Proc of string * ('d * string * 'e) list
             | `Type of string * 'f
             | `VParam of string * 'g
             | `Var of string * 'h ] -> (unit, Ostap.Msg.t) Checked.t;
    updateList : (String.t *
                  [ `Const of 'b
                  | `Param of string * 'c
                  | `Proc of string * ('d * string * 'e) list
                  | `Type of string * 'f
                  | `VParam of string * 'g
                  | `Var of string * 'h ])
                 list -> (unit, Ostap.Msg.t) Checked.t >
)
ident(
  ext_ref idents
)
"L3.ml" 83 2767 2792 "L3.ml" 83 2767 2801
call(
  tail
)
type(
  unit -> unit
)
"L3.ml" 83 2767 2802 "L3.ml" 83 2767 2804
type(
  unit
)
"L3.ml" 83 2767 2792 "L3.ml" 83 2767 2804
type(
  unit
)
"L3.ml" 83 2767 2787 "L3.ml" 83 2767 2804
type(
  unit -> unit
)
type(
  unit -> unit
)
"L3.ml" 83 2767 2775 "L3.ml" 83 2767 2804
type(
  'i -> unit -> unit
)
"L3.ml" 84 2805 2825 "L3.ml" 84 2805 2829
type(
  string
)
ident(
  def name "L3.ml" 84 2805 2832 "L3.ml" 84 2805 2848
)
"L3.ml" 84 2805 2832 "L3.ml" 84 2805 2838
type(
  < down : string -> unit; downGlobal : string -> unit;
    genericDown : string -> bool -> unit; getInternal : String.t -> string;
    lookup : String.t ->
             ([ `Const of 'b
              | `Param of string * 'c
              | `Proc of string * ('d * string * 'e) list
              | `Type of string * 'f
              | `VParam of string * 'g
              | `Var of string * 'h ], Ostap.Msg.t)
             Checked.t;
    lookupShallow : String.t ->
                    ([ `Const of 'b
                     | `Param of string * 'c
                     | `Proc of string * ('d * string * 'e) list
                     | `Type of string * 'f
                     | `VParam of string * 'g
                     | `Var of string * 'h ], Ostap.Msg.t)
                    Checked.t;
    name : String.t; namer : unit -> < getName : String.t -> String.t >;
    up : unit -> unit;
    update : String.t ->
             [ `Const of 'b
             | `Param of string * 'c
             | `Proc of string * ('d * string * 'e) list
             | `Type of string * 'f
             | `VParam of string * 'g
             | `Var of string * 'h ] -> (unit, Ostap.Msg.t) Checked.t;
    updateList : (String.t *
                  [ `Const of 'b
                  | `Param of string * 'c
                  | `Proc of string * ('d * string * 'e) list
                  | `Type of string * 'f
                  | `VParam of string * 'g
                  | `Var of string * 'h ])
                 list -> (unit, Ostap.Msg.t) Checked.t >
)
ident(
  ext_ref idents
)
"L3.ml" 84 2805 2832 "L3.ml" 84 2805 2843
call(
  tail
)
type(
  string -> unit
)
"L3.ml" 84 2805 2844 "L3.ml" 84 2805 2848
type(
  string
)
ident(
  int_ref name "L3.ml" 84 2805 2825 "L3.ml" 84 2805 2829
)
"L3.ml" 84 2805 2832 "L3.ml" 84 2805 2848
type(
  unit
)
"L3.ml" 84 2805 2825 "L3.ml" 84 2805 2848
type(
  string -> unit
)
type(
  string -> unit
)
"L3.ml" 84 2805 2813 "L3.ml" 84 2805 2848
type(
  'i -> string -> unit
)
"L3.ml" 87 2860 2868 "L3.ml" 87 2860 2874
type(
  < lookup : string -> ([> `Proc of 'k ] as 'j, Ostap.Msg.t) Checked.t; .. > ->
  string -> ('j, Ostap.Msg.t) Checked.t
)
ident(
  def lookup "L3.ml" 90 2986 2990 "L3.ml" 133 4883 4888
)
"L3.ml" 87 2860 2875 "L3.ml" 87 2860 2878
type(
  < lookup : string -> ('j, Ostap.Msg.t) Checked.t; .. > as 'l
)
ident(
  def env "L3.ml" 87 2860 2879 "L3.ml" 88 2886 2984
)
"L3.ml" 87 2860 2879 "L3.ml" 87 2860 2883
type(
  string
)
ident(
  def name "L3.ml" 88 2886 2892 "L3.ml" 88 2886 2984
)
"L3.ml" 88 2886 2892 "L3.ml" 88 2886 2895
type(
  'l
)
ident(
  int_ref env "L3.ml" 87 2860 2875 "L3.ml" 87 2860 2878
)
"L3.ml" 88 2886 2892 "L3.ml" 88 2886 2902
call(
  stack
)
type(
  string -> ('j, Ostap.Msg.t) Checked.t
)
"L3.ml" 88 2886 2903 "L3.ml" 88 2886 2907
type(
  string
)
ident(
  int_ref name "L3.ml" 87 2860 2879 "L3.ml" 87 2860 2883
)
"L3.ml" 88 2886 2892 "L3.ml" 88 2886 2907
type(
  ('j, Ostap.Msg.t) Checked.t
)
"L3.ml" 88 2886 2930 "L3.ml" 88 2886 2931
type(
  'k
)
"L3.ml" 88 2886 2924 "L3.ml" 88 2886 2931
type(
  'j
)
"L3.ml" 88 2886 2936 "L3.ml" 88 2886 2941
type(
  string -> string -> string -> ('j, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Common.wrong
)
"L3.ml" 88 2886 2942 "L3.ml" 88 2886 2961
type(
  string
)
"L3.ml" 88 2886 2962 "L3.ml" 88 2886 2966
type(
  string
)
ident(
  int_ref name "L3.ml" 87 2860 2879 "L3.ml" 87 2860 2883
)
"L3.ml" 88 2886 2967 "L3.ml" 88 2886 2971
type(
  string
)
ident(
  int_ref name "L3.ml" 87 2860 2879 "L3.ml" 87 2860 2883
)
"L3.ml" 88 2886 2936 "L3.ml" 88 2886 2971
call(
  tail
)
type(
  ('j, Ostap.Msg.t) Checked.t
)
"L3.ml" 88 2886 2974 "L3.ml" 88 2886 2975
type(
  'j
)
ident(
  def x "L3.ml" 88 2886 2979 "L3.ml" 88 2886 2983
)
"L3.ml" 88 2886 2982 "L3.ml" 88 2886 2983
type(
  'j
)
ident(
  int_ref x "L3.ml" 88 2886 2974 "L3.ml" 88 2886 2975
)
"L3.ml" 88 2886 2979 "L3.ml" 88 2886 2983
call(
  tail
)
type(
  ('j, Ostap.Msg.t) Checked.t
)
type(
  'j -> ('j, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.( !! )
)
"L3.ml" 88 2886 2914 "L3.ml" 88 2886 2984
type(
  'j -> ('j, Ostap.Msg.t) Checked.t
)
"L3.ml" 88 2886 2892 "L3.ml" 88 2886 2984
call(
  tail
)
type(
  ('j, Ostap.Msg.t) Checked.t
)
type(
  ('j, Ostap.Msg.t) Checked.t ->
  ('j -> ('j, Ostap.Msg.t) Checked.t) -> ('j, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.( -?->> )
)
"L3.ml" 87 2860 2879 "L3.ml" 88 2886 2984
type(
  string -> ('j, Ostap.Msg.t) Checked.t
)
"L3.ml" 87 2860 2875 "L3.ml" 88 2886 2984
type(
  'l -> string -> ('j, Ostap.Msg.t) Checked.t
)
"L3.ml" 90 2986 2994 "L3.ml" 90 2986 3004
type(
  < extractInternal : ([> `Const of
                            [> `Binop of 'o * 'n * 'n
                             | `Const of 'p
                             | `Ident of 'q * 'm
                             | `Unop of 'r * 'n ]
                            as 'n
                        | `Proc of 's ]
                       as 'm) ->
                      'q;
    lookup : string -> ('m, Ostap.Msg.t) Checked.t; .. > ->
  ([> `Binop of 'o * 't * 't
    | `Const of 'p
    | `Ident of string
    | `Unop of 'r * 't ]
   as 't) ->
  'n Monad.Checked.t
)
ident(
  def expression "L3.ml" 92 3081 3085 "L3.ml" 133 4883 4888
)
"L3.ml" 90 2986 3005 "L3.ml" 90 2986 3008
type(
  < extractInternal : 'm -> 'q;
    lookup : string -> ('m, Ostap.Msg.t) Checked.t; .. >
  as 'u
)
ident(
  def env "L3.ml" 90 2986 3009 "L3.ml" 90 2986 3079
)
"L3.ml" 90 2986 3009 "L3.ml" 90 2986 3013
type(
  't
)
ident(
  def expr "L3.ml" 90 2986 3016 "L3.ml" 90 2986 3079
)
"L3.ml" 90 2986 3016 "L3.ml" 90 2986 3040
type(
  (('t -> 'n Monad.Checked.t) -> 't -> 'n Monad.Checked.t) ->
  't -> 'n Monad.Checked.t
)
ident(
  ext_ref SimpleExpression.resolve
)
"L3.ml" 90 2986 3042 "L3.ml" 90 2986 3062
type(
  ('u -> string -> ('m, Ostap.Msg.t) Checked.t) ->
  'u -> ('t -> 'n Monad.Checked.t) -> 't -> 'n Monad.Checked.t
)
ident(
  ext_ref L1.Resolve.reference
)
"L3.ml" 90 2986 3063 "L3.ml" 90 2986 3069
type(
  'u -> string -> ('m, Ostap.Msg.t) Checked.t
)
ident(
  int_ref lookup "L3.ml" 87 2860 2868 "L3.ml" 87 2860 2874
)
"L3.ml" 90 2986 3070 "L3.ml" 90 2986 3073
type(
  'u
)
ident(
  int_ref env "L3.ml" 90 2986 3005 "L3.ml" 90 2986 3008
)
"L3.ml" 90 2986 3041 "L3.ml" 90 2986 3074
call(
  stack
)
type(
  ('t -> 'n Monad.Checked.t) -> 't -> 'n Monad.Checked.t
)
"L3.ml" 90 2986 3075 "L3.ml" 90 2986 3079
type(
  't
)
ident(
  int_ref expr "L3.ml" 90 2986 3009 "L3.ml" 90 2986 3013
)
"L3.ml" 90 2986 3016 "L3.ml" 90 2986 3079
call(
  tail
)
type(
  'n Monad.Checked.t
)
"L3.ml" 90 2986 3009 "L3.ml" 90 2986 3079
type(
  't -> 'n Monad.Checked.t
)
"L3.ml" 90 2986 3005 "L3.ml" 90 2986 3079
type(
  'u -> 't -> 'n Monad.Checked.t
)
"L3.ml" 92 3081 3093 "L3.ml" 92 3081 3102
type(
  (< extractInternal : [> `Proc of
                            'w * (([< `Val | `Var ] as 'x) * 'y * 'z) list ] ->
                       'a1;
     lookupProc : string ->
                  ([> `Proc of 'w * ('x * 'y * 'z) list ], Ostap.Msg.t)
                  Checked.t;
     .. >
   as 'v) ->
  ('v -> 'b1 -> 'c1 Monad.Checked.t) ->
  ('v -> 'd1 -> 'e1 Monad.Checked.t) ->
  ('v -> 'b1 -> 'c1 Monad.Checked.t) ->
  ((([> `Assign of 'b1 * 'b1
      | `Call of string * 'b1 list
      | `Case of
          'b1 *
          ([< `Atom of 'd1 | `Interval of 'd1 * 'd1 ] list * 'f1 list) list *
          'f1 list
      | `For of 'b1 * 'b1 * 'b1 * 'd1 option * 'f1 list
      | `If of ('b1 * 'f1 list) list * 'f1 list
      | `While of 'b1 * 'f1 list ]
     as 'f1) ->
    ([> `Assign of 'c1 * 'c1
      | `Call of 'a1 * 'c1 list * [> `Proc of 'w * ('x * 'y * 'z) list ]
      | `Case of
          'c1 *
          ([> `Atom of 'e1 | `Interval of 'e1 * 'e1 ] list * 'g1 list) list *
          'g1 list
      | `For of 'c1 * 'c1 * 'c1 * 'e1 option * 'g1 list
      | `If of ('c1 * 'g1 list) list * 'g1 list
      | `While of 'c1 * 'g1 list ]
     as 'g1)
    Monad.Checked.t) ->
   'f1 -> 'g1 Monad.Checked.t) ->
  'f1 -> 'g1 Monad.Checked.t
)
ident(
  def statement "L3.ml" 92 3081 3085 "L3.ml" 133 4883 4888
)
"L3.ml" 92 3081 3103 "L3.ml" 92 3081 3106
type(
  'v
)
ident(
  def env "L3.ml" 92 3081 3107 "L3.ml" 119 4359 4366
)
"L3.ml" 92 3081 3107 "L3.ml" 92 3081 3116
type(
  'v -> 'b1 -> 'c1 Monad.Checked.t
)
ident(
  def reference "L3.ml" 92 3081 3117 "L3.ml" 119 4359 4366
)
"L3.ml" 92 3081 3117 "L3.ml" 92 3081 3122
type(
  'v -> 'd1 -> 'e1 Monad.Checked.t
)
ident(
  def cexpr "L3.ml" 92 3081 3123 "L3.ml" 119 4359 4366
)
"L3.ml" 92 3081 3123 "L3.ml" 92 3081 3133
type(
  'v -> 'b1 -> 'c1 Monad.Checked.t
)
ident(
  def expression "L3.ml" 93 3136 3142 "L3.ml" 119 4359 4366
)
"L3.ml" 93 3136 3142 "L3.ml" 93 3136 3162
type(
  ('b1 -> 'c1 Monad.Checked.t) ->
  ('d1 -> 'e1 Monad.Checked.t) ->
  ('b1 -> 'c1 Monad.Checked.t) ->
  (('f1 -> 'g1 Monad.Checked.t) -> 'f1 -> 'g1 Monad.Checked.t) ->
  'f1 -> 'g1 Monad.Checked.t
)
ident(
  ext_ref L2.Resolve.statement
)
"L3.ml" 93 3136 3164 "L3.ml" 93 3136 3173
type(
  'v -> 'b1 -> 'c1 Monad.Checked.t
)
ident(
  int_ref reference "L3.ml" 92 3081 3107 "L3.ml" 92 3081 3116
)
"L3.ml" 93 3136 3174 "L3.ml" 93 3136 3177
type(
  'v
)
ident(
  int_ref env "L3.ml" 92 3081 3103 "L3.ml" 92 3081 3106
)
"L3.ml" 93 3136 3163 "L3.ml" 93 3136 3178
call(
  stack
)
type(
  'b1 -> 'c1 Monad.Checked.t
)
"L3.ml" 93 3136 3180 "L3.ml" 93 3136 3185
type(
  'v -> 'd1 -> 'e1 Monad.Checked.t
)
ident(
  int_ref cexpr "L3.ml" 92 3081 3117 "L3.ml" 92 3081 3122
)
"L3.ml" 93 3136 3186 "L3.ml" 93 3136 3189
type(
  'v
)
ident(
  int_ref env "L3.ml" 92 3081 3103 "L3.ml" 92 3081 3106
)
"L3.ml" 93 3136 3179 "L3.ml" 93 3136 3190
call(
  stack
)
type(
  'd1 -> 'e1 Monad.Checked.t
)
"L3.ml" 93 3136 3192 "L3.ml" 93 3136 3202
type(
  'v -> 'b1 -> 'c1 Monad.Checked.t
)
ident(
  int_ref expression "L3.ml" 92 3081 3123 "L3.ml" 92 3081 3133
)
"L3.ml" 93 3136 3203 "L3.ml" 93 3136 3206
type(
  'v
)
ident(
  int_ref env "L3.ml" 92 3081 3103 "L3.ml" 92 3081 3106
)
"L3.ml" 93 3136 3191 "L3.ml" 93 3136 3207
call(
  stack
)
type(
  'b1 -> 'c1 Monad.Checked.t
)
"L3.ml" 93 3136 3142 "L3.ml" 93 3136 3207
call(
  stack
)
type(
  (('f1 -> 'g1 Monad.Checked.t) -> 'f1 -> 'g1 Monad.Checked.t) ->
  'f1 -> 'g1 Monad.Checked.t
)
"L3.ml" 94 3211 3222 "L3.ml" 94 3211 3225
type(
  ((('f1 -> 'g1 Monad.Checked.t) -> 'f1 -> 'g1 Monad.Checked.t) ->
   'f1 -> 'g1 Monad.Checked.t) ->
  'f1 -> 'g1 Monad.Checked.t
)
ident(
  def ext "L3.ml" 94 3211 3229 "L3.ml" 118 4296 4358
)
"L3.ml" 95 3239 3255 "L3.ml" 95 3239 3259
type(
  string
)
ident(
  def name "L3.ml" 96 3280 3290 "L3.ml" 117 4284 4295
)
"L3.ml" 95 3239 3261 "L3.ml" 95 3239 3266
type(
  'b1 list
)
ident(
  def aargs "L3.ml" 96 3280 3290 "L3.ml" 117 4284 4295
)
"L3.ml" 95 3239 3255 "L3.ml" 95 3239 3266
type(
  string * 'b1 list
)
"L3.ml" 95 3239 3248 "L3.ml" 95 3239 3267
type(
  'f1
)
"L3.ml" 95 3239 3248 "L3.ml" 95 3239 3275
type(
  'f1
)
ident(
  def call "L3.ml" 96 3280 3290 "L3.ml" 117 4284 4295
)
"L3.ml" 96 3280 3294 "L3.ml" 96 3280 3299
type(
  'g1 -> 'g1
)
ident(
  def reloc "L3.ml" 97 3325 3335 "L3.ml" 117 4284 4295
)
"L3.ml" 96 3280 3302 "L3.ml" 96 3280 3307
type(
  Ostap.Msg.Locator.t -> 'g1 -> 'g1
)
ident(
  ext_ref Common.reloc
)
"L3.ml" 96 3280 3309 "L3.ml" 96 3280 3315
type(
  _[> `Call of string * 'b1 list ] -> Ostap.Msg.Locator.t
)
ident(
  ext_ref Common.locate
)
"L3.ml" 96 3280 3316 "L3.ml" 96 3280 3320
type(
  _[> `Call of string * 'b1 list ] as 'h1
)
ident(
  int_ref call "L3.ml" 95 3239 3248 "L3.ml" 95 3239 3275
)
"L3.ml" 96 3280 3308 "L3.ml" 96 3280 3321
call(
  stack
)
type(
  Ostap.Msg.Locator.t
)
"L3.ml" 96 3280 3302 "L3.ml" 96 3280 3321
call(
  stack
)
type(
  'g1 -> 'g1
)
"L3.ml" 97 3325 3335 "L3.ml" 97 3325 3338
type(
  'v
)
ident(
  int_ref env "L3.ml" 92 3081 3103 "L3.ml" 92 3081 3106
)
"L3.ml" 97 3325 3335 "L3.ml" 97 3325 3349
call(
  stack
)
type(
  string ->
  ([> `Proc of 'w * ('x * 'y * 'z) list ] as 'i1, Ostap.Msg.t) Checked.t
)
"L3.ml" 97 3325 3350 "L3.ml" 97 3325 3354
type(
  string
)
ident(
  int_ref name "L3.ml" 95 3239 3255 "L3.ml" 95 3239 3259
)
"L3.ml" 97 3325 3335 "L3.ml" 97 3325 3354
type(
  ('i1, Ostap.Msg.t) Checked.t
)
"L3.ml" 99 3376 3396 "L3.ml" 99 3376 3397
type(
  'w
)
"L3.ml" 99 3376 3399 "L3.ml" 99 3376 3404
type(
  ('x * 'y * 'z) list
)
ident(
  def fargs "L3.ml" 100 3415 3430 "L3.ml" 115 4152 4237
)
"L3.ml" 99 3376 3396 "L3.ml" 99 3376 3404
type(
  'w * ('x * 'y * 'z) list
)
"L3.ml" 99 3376 3389 "L3.ml" 99 3376 3405
type(
  'i1
)
"L3.ml" 99 3376 3389 "L3.ml" 99 3376 3410
type(
  'i1
)
ident(
  def x "L3.ml" 100 3415 3430 "L3.ml" 115 4152 4237
)
"L3.ml" 100 3415 3434 "L3.ml" 100 3415 3438
type(
  ('c1 list, Ostap.Msg.t) Checked.t
)
ident(
  def args "L3.ml" 115 4152 4167 "L3.ml" 115 4152 4237
)
"L3.ml" 101 3441 3461 "L3.ml" 101 3441 3472
type(
  ('x * 'y * 'z) list -> int
)
ident(
  ext_ref List.length
)
"L3.ml" 101 3441 3473 "L3.ml" 101 3441 3478
type(
  ('x * 'y * 'z) list
)
ident(
  int_ref fargs "L3.ml" 99 3376 3399 "L3.ml" 99 3376 3404
)
"L3.ml" 101 3441 3461 "L3.ml" 101 3441 3478
call(
  stack
)
type(
  int
)
"L3.ml" 101 3441 3482 "L3.ml" 101 3441 3493
type(
  'b1 list -> int
)
ident(
  ext_ref List.length
)
"L3.ml" 101 3441 3494 "L3.ml" 101 3441 3499
type(
  'b1 list
)
ident(
  int_ref aargs "L3.ml" 95 3239 3261 "L3.ml" 95 3239 3266
)
"L3.ml" 101 3441 3482 "L3.ml" 101 3441 3499
call(
  stack
)
type(
  int
)
"L3.ml" 101 3441 3461 "L3.ml" 101 3441 3499
type(
  bool
)
type(
  int -> int -> bool
)
ident(
  ext_ref Pervasives.( <> )
)
"L3.ml" 102 3501 3529 "L3.ml" 102 3501 3533
type(
  string -> string array -> Ostap.Msg.Locator.t -> Ostap.Msg.t
)
ident(
  ext_ref Ostap.Msg.make
)
"L3.ml" 102 3501 3534 "L3.ml" 102 3501 3601
type(
  string
)
"L3.ml" 103 3603 3635 "L3.ml" 103 3603 3639
type(
  string
)
ident(
  int_ref name "L3.ml" 95 3239 3255 "L3.ml" 95 3239 3259
)
"L3.ml" 103 3603 3641 "L3.ml" 103 3603 3654
type(
  int -> string
)
ident(
  ext_ref Pervasives.string_of_int
)
"L3.ml" 103 3603 3656 "L3.ml" 103 3603 3667
type(
  ('x * 'y * 'z) list -> int
)
ident(
  ext_ref List.length
)
"L3.ml" 103 3603 3668 "L3.ml" 103 3603 3673
type(
  ('x * 'y * 'z) list
)
ident(
  int_ref fargs "L3.ml" 99 3376 3399 "L3.ml" 99 3376 3404
)
"L3.ml" 103 3603 3655 "L3.ml" 103 3603 3674
call(
  stack
)
type(
  int
)
"L3.ml" 103 3603 3641 "L3.ml" 103 3603 3674
call(
  stack
)
type(
  string
)
"L3.ml" 103 3603 3676 "L3.ml" 103 3603 3689
type(
  int -> string
)
ident(
  ext_ref Pervasives.string_of_int
)
"L3.ml" 103 3603 3691 "L3.ml" 103 3603 3702
type(
  'b1 list -> int
)
ident(
  ext_ref List.length
)
"L3.ml" 103 3603 3703 "L3.ml" 103 3603 3708
type(
  'b1 list
)
ident(
  int_ref aargs "L3.ml" 95 3239 3261 "L3.ml" 95 3239 3266
)
"L3.ml" 103 3603 3690 "L3.ml" 103 3603 3709
call(
  stack
)
type(
  int
)
"L3.ml" 103 3603 3676 "L3.ml" 103 3603 3709
call(
  stack
)
type(
  string
)
"L3.ml" 103 3603 3633 "L3.ml" 103 3603 3711
type(
  string array
)
"L3.ml" 104 3713 3744 "L3.ml" 104 3713 3750
type(
  _[> `Call of string * 'b1 list ] -> Ostap.Msg.Locator.t
)
ident(
  ext_ref Common.locate
)
"L3.ml" 104 3713 3751 "L3.ml" 104 3713 3755
type(
  _[> `Call of string * 'b1 list ] as 'j1
)
ident(
  int_ref call "L3.ml" 95 3239 3248 "L3.ml" 95 3239 3275
)
"L3.ml" 104 3713 3743 "L3.ml" 104 3713 3756
call(
  stack
)
type(
  Ostap.Msg.Locator.t
)
"L3.ml" 102 3501 3529 "L3.ml" 104 3713 3756
call(
  stack
)
type(
  Ostap.Msg.t
)
"L3.ml" 102 3501 3528 "L3.ml" 105 3757 3784
type(
  Ostap.Msg.t list
)
type(
  Ostap.Msg.t list
)
"L3.ml" 102 3501 3523 "L3.ml" 105 3757 3784
type(
  ('c1 list, Ostap.Msg.t) Checked.t
)
"L3.ml" 107 3808 3827 "L3.ml" 107 3808 3831
type(
  'c1 Monad.Checked.t list -> ('c1 list, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.list
)
"L3.ml" 108 3834 3855 "L3.ml" 108 3834 3863
type(
  (('x * 'y * 'z) * 'b1 -> 'c1 Monad.Checked.t) ->
  (('x * 'y * 'z) * 'b1) list -> 'c1 Monad.Checked.t list
)
ident(
  ext_ref List.map
)
"L3.ml" 109 3865 3895 "L3.ml" 109 3865 3896
type(
  'x
)
ident(
  def m "L3.ml" 110 3950 3975 "L3.ml" 110 3950 4036
)
"L3.ml" 109 3865 3898 "L3.ml" 109 3865 3902
type(
  'y
)
ident(
  def name "L3.ml" 110 3950 3975 "L3.ml" 110 3950 4036
)
"L3.ml" 109 3865 3904 "L3.ml" 109 3865 3907
type(
  'z
)
ident(
  def typ "L3.ml" 110 3950 3975 "L3.ml" 110 3950 4036
)
"L3.ml" 109 3865 3895 "L3.ml" 109 3865 3907
type(
  'x * 'y * 'z
)
"L3.ml" 109 3865 3910 "L3.ml" 109 3865 3913
type(
  'b1
)
ident(
  def arg "L3.ml" 110 3950 3975 "L3.ml" 110 3950 4036
)
"L3.ml" 109 3865 3894 "L3.ml" 109 3865 3913
type(
  ('x * 'y * 'z) * 'b1
)
"L3.ml" 110 3950 3982 "L3.ml" 110 3950 3983
type(
  'x
)
ident(
  int_ref m "L3.ml" 109 3865 3895 "L3.ml" 109 3865 3896
)
"L3.ml" 110 3950 3989 "L3.ml" 110 3950 3993
type(
  'x
)
"L3.ml" 110 3950 3997 "L3.ml" 110 3950 4006
type(
  'v -> 'b1 -> 'c1 Monad.Checked.t
)
ident(
  int_ref reference "L3.ml" 92 3081 3107 "L3.ml" 92 3081 3116
)
"L3.ml" 110 3950 4009 "L3.ml" 110 3950 4013
type(
  'x
)
"L3.ml" 110 3950 4017 "L3.ml" 110 3950 4027
type(
  'v -> 'b1 -> 'c1 Monad.Checked.t
)
ident(
  int_ref expression "L3.ml" 92 3081 3123 "L3.ml" 92 3081 3133
)
"L3.ml" 110 3950 3975 "L3.ml" 110 3950 4028
type(
  'v -> 'b1 -> 'c1 Monad.Checked.t
)
"L3.ml" 110 3950 4029 "L3.ml" 110 3950 4032
type(
  'v
)
ident(
  int_ref env "L3.ml" 92 3081 3103 "L3.ml" 92 3081 3106
)
"L3.ml" 110 3950 4033 "L3.ml" 110 3950 4036
type(
  'b1
)
ident(
  int_ref arg "L3.ml" 109 3865 3910 "L3.ml" 109 3865 3913
)
"L3.ml" 110 3950 3975 "L3.ml" 110 3950 4036
call(
  tail
)
type(
  'c1 Monad.Checked.t
)
"L3.ml" 109 3865 3888 "L3.ml" 111 4037 4061
type(
  ('x * 'y * 'z) * 'b1 -> 'c1 Monad.Checked.t
)
"L3.ml" 112 4062 4086 "L3.ml" 112 4062 4098
type(
  ('x * 'y * 'z) list -> 'b1 list -> (('x * 'y * 'z) * 'b1) list
)
ident(
  ext_ref List.combine
)
"L3.ml" 112 4062 4099 "L3.ml" 112 4062 4104
type(
  ('x * 'y * 'z) list
)
ident(
  int_ref fargs "L3.ml" 99 3376 3399 "L3.ml" 99 3376 3404
)
"L3.ml" 112 4062 4105 "L3.ml" 112 4062 4110
type(
  'b1 list
)
ident(
  int_ref aargs "L3.ml" 95 3239 3261 "L3.ml" 95 3239 3266
)
"L3.ml" 112 4062 4085 "L3.ml" 112 4062 4111
call(
  stack
)
type(
  (('x * 'y * 'z) * 'b1) list
)
"L3.ml" 107 3808 3832 "L3.ml" 113 4112 4133
call(
  stack
)
type(
  'c1 Monad.Checked.t list
)
"L3.ml" 107 3808 3827 "L3.ml" 113 4112 4133
call(
  stack
)
type(
  ('c1 list, Ostap.Msg.t) Checked.t
)
"L3.ml" 101 3441 3458 "L3.ml" 113 4112 4133
type(
  ('c1 list, Ostap.Msg.t) Checked.t
)
"L3.ml" 115 4152 4167 "L3.ml" 115 4152 4171
type(
  ('c1 list, Ostap.Msg.t) Checked.t
)
ident(
  int_ref args "L3.ml" 100 3415 3434 "L3.ml" 100 3415 3438
)
"L3.ml" 115 4152 4182 "L3.ml" 115 4152 4186
type(
  'c1 list
)
ident(
  def args "L3.ml" 115 4152 4190 "L3.ml" 115 4152 4236
)
"L3.ml" 115 4152 4190 "L3.ml" 115 4152 4195
type(
  'g1 -> 'g1
)
ident(
  int_ref reloc "L3.ml" 96 3280 3294 "L3.ml" 96 3280 3299
)
"L3.ml" 115 4152 4204 "L3.ml" 115 4152 4207
type(
  'v
)
ident(
  int_ref env "L3.ml" 92 3081 3103 "L3.ml" 92 3081 3106
)
"L3.ml" 115 4152 4204 "L3.ml" 115 4152 4223
call(
  stack
)
type(
  ([> `Proc of 'w * ('x * 'y * 'z) list ] as 'k1) -> 'a1
)
"L3.ml" 115 4152 4224 "L3.ml" 115 4152 4225
type(
  'k1
)
ident(
  int_ref x "L3.ml" 99 3376 3389 "L3.ml" 99 3376 3410
)
"L3.ml" 115 4152 4204 "L3.ml" 115 4152 4225
type(
  'a1
)
"L3.ml" 115 4152 4227 "L3.ml" 115 4152 4231
type(
  'c1 list
)
ident(
  int_ref args "L3.ml" 115 4152 4182 "L3.ml" 115 4152 4186
)
"L3.ml" 115 4152 4233 "L3.ml" 115 4152 4234
type(
  [> `Proc of 'w * ('x * 'y * 'z) list ] as 'l1
)
ident(
  int_ref x "L3.ml" 99 3376 3389 "L3.ml" 99 3376 3410
)
"L3.ml" 115 4152 4203 "L3.ml" 115 4152 4235
type(
  'a1 * 'c1 list * 'l1
)
"L3.ml" 115 4152 4196 "L3.ml" 115 4152 4236
type(
  'g1
)
"L3.ml" 115 4152 4190 "L3.ml" 115 4152 4236
call(
  tail
)
type(
  'g1
)
"L3.ml" 115 4152 4177 "L3.ml" 115 4152 4237
type(
  'c1 list -> 'g1
)
"L3.ml" 115 4152 4167 "L3.ml" 115 4152 4237
call(
  tail
)
type(
  ('g1, Ostap.Msg.t) Checked.t
)
type(
  ('c1 list, Ostap.Msg.t) Checked.t ->
  ('c1 list -> 'g1) -> ('g1, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.( -?-> )
)
"L3.ml" 100 3415 3430 "L3.ml" 115 4152 4237
type(
  ('g1, Ostap.Msg.t) Checked.t
)
"L3.ml" 116 4238 4251 "L3.ml" 116 4238 4252
type(
  'i1
)
"L3.ml" 116 4238 4256 "L3.ml" 116 4238 4261
type(
  string ->
  string -> _[> `Call of string * 'b1 list ] -> ('g1, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Common.wrong
)
"L3.ml" 116 4238 4262 "L3.ml" 116 4238 4273
type(
  string
)
"L3.ml" 116 4238 4274 "L3.ml" 116 4238 4278
type(
  string
)
ident(
  int_ref name "L3.ml" 95 3239 3255 "L3.ml" 95 3239 3259
)
"L3.ml" 116 4238 4279 "L3.ml" 116 4238 4283
type(
  _[> `Call of string * 'b1 list ] as 'm1
)
ident(
  int_ref call "L3.ml" 95 3239 3248 "L3.ml" 95 3239 3275
)
"L3.ml" 116 4238 4256 "L3.ml" 116 4238 4283
call(
  tail
)
type(
  ('g1, Ostap.Msg.t) Checked.t
)
"L3.ml" 98 3362 3365 "L3.ml" 117 4284 4295
type(
  'i1 -> ('g1, Ostap.Msg.t) Checked.t
)
"L3.ml" 97 3325 3335 "L3.ml" 117 4284 4295
call(
  tail
)
type(
  'g1 Monad.Checked.t
)
type(
  ('i1, Ostap.Msg.t) Checked.t ->
  ('i1 -> ('g1, Ostap.Msg.t) Checked.t) -> 'g1 Monad.Checked.t
)
ident(
  ext_ref Checked.( -?->> )
)
"L3.ml" 96 3280 3290 "L3.ml" 117 4284 4295
type(
  'g1 Monad.Checked.t
)
"L3.ml" 118 4296 4305 "L3.ml" 118 4296 4306
type(
  'f1
)
ident(
  def x "L3.ml" 118 4296 4310 "L3.ml" 118 4296 4358
)
"L3.ml" 118 4296 4310 "L3.ml" 118 4296 4313
type(
  ((('f1 -> 'g1 Monad.Checked.t) -> 'f1 -> 'g1 Monad.Checked.t) ->
   'f1 -> 'g1 Monad.Checked.t) ->
  'f1 -> 'g1 Monad.Checked.t
)
ident(
  int_ref ext "L3.ml" 94 3211 3222 "L3.ml" 94 3211 3225
)
"L3.ml" 118 4296 4315 "L3.ml" 118 4296 4324
type(
  'v ->
  ('v -> 'b1 -> 'c1 Monad.Checked.t) ->
  ('v -> 'd1 -> 'e1 Monad.Checked.t) ->
  ('v -> 'b1 -> 'c1 Monad.Checked.t) ->
  (('f1 -> 'g1 Monad.Checked.t) -> 'f1 -> 'g1 Monad.Checked.t) ->
  'f1 -> 'g1 Monad.Checked.t
)
ident(
  int_ref statement "L3.ml" 92 3081 3093 "L3.ml" 92 3081 3102
)
"L3.ml" 118 4296 4325 "L3.ml" 118 4296 4328
type(
  'v
)
ident(
  int_ref env "L3.ml" 92 3081 3103 "L3.ml" 92 3081 3106
)
"L3.ml" 118 4296 4329 "L3.ml" 118 4296 4338
type(
  'v -> 'b1 -> 'c1 Monad.Checked.t
)
ident(
  int_ref reference "L3.ml" 92 3081 3107 "L3.ml" 92 3081 3116
)
"L3.ml" 118 4296 4339 "L3.ml" 118 4296 4344
type(
  'v -> 'd1 -> 'e1 Monad.Checked.t
)
ident(
  int_ref cexpr "L3.ml" 92 3081 3117 "L3.ml" 92 3081 3122
)
"L3.ml" 118 4296 4345 "L3.ml" 118 4296 4355
type(
  'v -> 'b1 -> 'c1 Monad.Checked.t
)
ident(
  int_ref expression "L3.ml" 92 3081 3123 "L3.ml" 92 3081 3133
)
"L3.ml" 118 4296 4314 "L3.ml" 118 4296 4356
call(
  stack
)
type(
  (('f1 -> 'g1 Monad.Checked.t) -> 'f1 -> 'g1 Monad.Checked.t) ->
  'f1 -> 'g1 Monad.Checked.t
)
"L3.ml" 118 4296 4357 "L3.ml" 118 4296 4358
type(
  'f1
)
ident(
  int_ref x "L3.ml" 118 4296 4305 "L3.ml" 118 4296 4306
)
"L3.ml" 118 4296 4310 "L3.ml" 118 4296 4358
call(
  tail
)
type(
  'g1 Monad.Checked.t
)
"L3.ml" 94 3211 3229 "L3.ml" 118 4296 4358
type(
  'f1 -> 'g1 Monad.Checked.t
)
"L3.ml" 94 3211 3217 "L3.ml" 119 4359 4366
type(
  (((('f1 -> 'g1 Monad.Checked.t) -> 'f1 -> 'g1 Monad.Checked.t) ->
    'f1 -> 'g1 Monad.Checked.t) ->
   'f1 -> 'g1 Monad.Checked.t) ->
  'f1 -> 'g1 Monad.Checked.t
)
"L3.ml" 93 3136 3142 "L3.ml" 119 4359 4366
call(
  tail
)
type(
  (('f1 -> 'g1 Monad.Checked.t) -> 'f1 -> 'g1 Monad.Checked.t) ->
  'f1 -> 'g1 Monad.Checked.t
)
type(
  ((('f1 -> 'g1 Monad.Checked.t) -> 'f1 -> 'g1 Monad.Checked.t) ->
   'f1 -> 'g1 Monad.Checked.t) ->
  ((((('f1 -> 'g1 Monad.Checked.t) -> 'f1 -> 'g1 Monad.Checked.t) ->
     'f1 -> 'g1 Monad.Checked.t) ->
    'f1 -> 'g1 Monad.Checked.t) ->
   'f1 -> 'g1 Monad.Checked.t) ->
  (('f1 -> 'g1 Monad.Checked.t) -> 'f1 -> 'g1 Monad.Checked.t) ->
  'f1 -> 'g1 Monad.Checked.t
)
ident(
  ext_ref Common.( ++ )
)
"L3.ml" 92 3081 3123 "L3.ml" 119 4359 4366
type(
  ('v -> 'b1 -> 'c1 Monad.Checked.t) ->
  (('f1 -> 'g1 Monad.Checked.t) -> 'f1 -> 'g1 Monad.Checked.t) ->
  'f1 -> 'g1 Monad.Checked.t
)
"L3.ml" 92 3081 3117 "L3.ml" 119 4359 4366
type(
  ('v -> 'd1 -> 'e1 Monad.Checked.t) ->
  ('v -> 'b1 -> 'c1 Monad.Checked.t) ->
  (('f1 -> 'g1 Monad.Checked.t) -> 'f1 -> 'g1 Monad.Checked.t) ->
  'f1 -> 'g1 Monad.Checked.t
)
"L3.ml" 92 3081 3107 "L3.ml" 119 4359 4366
type(
  ('v -> 'b1 -> 'c1 Monad.Checked.t) ->
  ('v -> 'd1 -> 'e1 Monad.Checked.t) ->
  ('v -> 'b1 -> 'c1 Monad.Checked.t) ->
  (('f1 -> 'g1 Monad.Checked.t) -> 'f1 -> 'g1 Monad.Checked.t) ->
  'f1 -> 'g1 Monad.Checked.t
)
"L3.ml" 92 3081 3103 "L3.ml" 119 4359 4366
type(
  'v ->
  ('v -> 'b1 -> 'c1 Monad.Checked.t) ->
  ('v -> 'd1 -> 'e1 Monad.Checked.t) ->
  ('v -> 'b1 -> 'c1 Monad.Checked.t) ->
  (('f1 -> 'g1 Monad.Checked.t) -> 'f1 -> 'g1 Monad.Checked.t) ->
  'f1 -> 'g1 Monad.Checked.t
)
"L3.ml" 121 4368 4376 "L3.ml" 121 4368 4380
type(
  < extractInternal : ([> `Const of
                            [> `Binop of
                                 ([< `Add
                                   | `And
                                   | `Div
                                   | `Eq
                                   | `Ge
                                   | `Gt
                                   | `Le
                                   | `Lt
                                   | `Mod
                                   | `Mul
                                   | `Ne
                                   | `Or
                                   | `Sub
                                   > `Add `Div `Mod `Mul `Sub ]
                                  as 'p1) *
                                 'o1 * 'o1
                             | `Const of
                                 [< `False
                                  | `Literal of int Monad.Id.t
                                  | `True
                                  > `Literal ]
                                 as 'q1
                             | `Ident of 'r1 * 'n1
                             | `Unop of [ `Neg | `Not ] * 'o1 ]
                            as 'o1
                        | `Proc of
                            's1 *
                            (([< `Val | `Var ] as 't1) * 'u1 * 'v1) list ]
                       as 'n1) ->
                      'r1;
    lookup : string -> ('n1, Ostap.Msg.t) Checked.t;
    lookupConst : 'w1 -> ('n1, Ostap.Msg.t) Checked.t;
    lookupProc : string ->
                 ([> `Proc of 's1 * ('t1 * 'u1 * 'v1) list ], Ostap.Msg.t)
                 Checked.t;
    lookupVar : string -> ('n1, Ostap.Msg.t) Checked.t; .. > ->
  ([> `Assign of
        ([> `Binop of 'p1 * 'y1 * 'y1
          | `Const of 'q1
          | `Ident of string
          | `Unop of [ `Neg | `Not ] * 'y1 ]
         as 'y1) *
        'y1
    | `Call of string * 'y1 list
    | `Case of
        'y1 *
        ([< `Atom of
              [> `Binop of 'p1 * 'z1 * 'z1
               | `Const of 'q1
               | `Ident of 'w1
               | `Unop of [ `Neg | `Not ] * 'z1 ]
              as 'z1
          | `Interval of 'z1 * 'z1 ]
         list * 'x1 list)
        list * 'x1 list
    | `For of 'y1 * 'y1 * 'y1 * 'z1 option * 'x1 list
    | `If of ('y1 * 'x1 list) list * 'x1 list
    | `While of 'y1 * 'x1 list ]
   as 'x1) ->
  ([> `Assign of 'o1 * 'o1
    | `Call of 'r1 * 'o1 list * [> `Proc of 's1 * ('t1 * 'u1 * 'v1) list ]
    | `Case of
        'o1 *
        ([> `Atom of
              [> `Const of [> `False | `Literal of int Monad.Id.t | `True ] ]
              as 'b2
          | `Interval of 'b2 * 'b2 ]
         list * 'a2 list)
        list * 'a2 list
    | `For of 'o1 * 'o1 * 'o1 * 'b2 option * 'a2 list
    | `If of ('o1 * 'a2 list) list * 'a2 list
    | `While of 'o1 * 'a2 list ]
   as 'a2)
  Monad.Checked.t
)
ident(
  def stmt "L3.ml" 123 4470 4474 "L3.ml" 133 4883 4888
)
"L3.ml" 121 4368 4381 "L3.ml" 121 4368 4384
type(
  < extractInternal : 'n1 -> 'r1;
    lookup : string -> ('n1, Ostap.Msg.t) Checked.t;
    lookupConst : 'w1 -> ('n1, Ostap.Msg.t) Checked.t;
    lookupProc : string ->
                 ([> `Proc of 's1 * ('t1 * 'u1 * 'v1) list ], Ostap.Msg.t)
                 Checked.t;
    lookupVar : string -> ('n1, Ostap.Msg.t) Checked.t; .. >
  as 'c2
)
ident(
  def env "L3.ml" 121 4368 4385 "L3.ml" 121 4368 4468
)
"L3.ml" 121 4368 4385 "L3.ml" 121 4368 4386
type(
  'x1
)
ident(
  def s "L3.ml" 121 4368 4389 "L3.ml" 121 4368 4468
)
"L3.ml" 121 4368 4389 "L3.ml" 121 4368 4398
type(
  'c2 ->
  ('c2 -> 'y1 -> 'o1 Monad.Checked.t) ->
  ('c2 -> 'z1 -> 'b2 Monad.Checked.t) ->
  ('c2 -> 'y1 -> 'o1 Monad.Checked.t) ->
  (('x1 -> 'a2 Monad.Checked.t) -> 'x1 -> 'a2 Monad.Checked.t) ->
  'x1 -> 'a2 Monad.Checked.t
)
ident(
  int_ref statement "L3.ml" 92 3081 3093 "L3.ml" 92 3081 3102
)
"L3.ml" 121 4368 4399 "L3.ml" 121 4368 4402
type(
  'c2
)
ident(
  int_ref env "L3.ml" 121 4368 4381 "L3.ml" 121 4368 4384
)
"L3.ml" 121 4368 4403 "L3.ml" 121 4368 4425
type(
  'c2 -> 'y1 -> 'o1 Monad.Checked.t
)
ident(
  ext_ref L1.Resolve.destination
)
"L3.ml" 121 4368 4426 "L3.ml" 121 4368 4449
type(
  'c2 -> 'z1 -> 'b2 Monad.Checked.t
)
ident(
  ext_ref L1.Resolve.constantExpr
)
"L3.ml" 121 4368 4450 "L3.ml" 121 4368 4460
type(
  'c2 -> 'y1 -> 'o1 Monad.Checked.t
)
ident(
  int_ref expression "L3.ml" 90 2986 2994 "L3.ml" 90 2986 3004
)
"L3.ml" 121 4368 4461 "L3.ml" 121 4368 4466
type(
  ('x1 -> 'a2 Monad.Checked.t) -> 'x1 -> 'a2 Monad.Checked.t
)
ident(
  ext_ref Common.apply
)
"L3.ml" 121 4368 4467 "L3.ml" 121 4368 4468
type(
  'x1
)
ident(
  int_ref s "L3.ml" 121 4368 4385 "L3.ml" 121 4368 4386
)
"L3.ml" 121 4368 4389 "L3.ml" 121 4368 4468
call(
  tail
)
type(
  'a2 Monad.Checked.t
)
"L3.ml" 121 4368 4385 "L3.ml" 121 4368 4468
type(
  'x1 -> 'a2 Monad.Checked.t
)
"L3.ml" 121 4368 4381 "L3.ml" 121 4368 4468
type(
  'c2 -> 'x1 -> 'a2 Monad.Checked.t
)
"L3.ml" 123 4470 4482 "L3.ml" 123 4470 4494
type(
  bool ->
  ((< compositeType : [> `Bool | `Int | `User of 'e2 ] -> bool;
      down : 'f2 -> 'g2;
      extractInternal : ([> `Const of
                              [> `Binop of
                                   ([< `Add
                                     | `And
                                     | `Div
                                     | `Eq
                                     | `Ge
                                     | `Gt
                                     | `Le
                                     | `Lt
                                     | `Mod
                                     | `Mul
                                     | `Ne
                                     | `Or
                                     | `Sub
                                     > `Add `Div `Mod `Mul `Sub ]
                                    as 'j2) *
                                   'i2 * 'i2
                               | `Const of
                                   [< `False
                                    | `Literal of int Monad.Id.t
                                    | `True
                                    > `Literal ]
                                   as 'k2
                               | `Ident of 'l2 * 'h2
                               | `Unop of [ `Neg | `Not ] * 'i2 ]
                              as 'i2 ]
                         as 'h2) ->
                        'l2;
      getInternal : 'f2 -> 'm2;
      lookupConst : 'n2 -> ('h2, Ostap.Msg.t) Checked.t; up : unit -> 'o2;
      update : 'f2 ->
               [> `Param of 'm2 * ([> `Bool | `Int | `User of 'e2 ] as 'p2)
                | `Proc of 'm2 * (([> `Var ] as 'q2) * 'f2 * 'p2) list
                | `Type of 'm2 * ([> `Bool | `Int | `User of 'e2 ] as 'r2)
                | `VParam of 'm2 * 'p2 ] ->
               (unit, Ostap.Msg.t) Checked.t;
      updateConst : 's2 ->
                    ([> `Const of
                          [> `False | `Literal of int Monad.Id.t | `True ] ]
                     as 't2) ->
                    ('u2, Ostap.Msg.t) Checked.t;
      updateVars : 'f2 list -> 'r2 -> ('v2, Ostap.Msg.t) Checked.t; .. >
    as 'd2) ->
   'w2 -> ('r2, Ostap.Msg.t) Checked.t) ->
  ('d2 -> 'x2 -> ('y2, Ostap.Msg.t) Checked.t) ->
  'd2 ->
  ((('s2 *
     ([> `Binop of 'j2 * 'a3 * 'a3
       | `Const of 'k2
       | `Ident of 'n2
       | `Unop of [ `Neg | `Not ] * 'a3 ]
      as 'a3))
    list * ('f2 * 'w2) list * ('f2 list * 'w2) list) *
   ('f2 * ('q2 * 'f2 * 'w2) list * 'z2 * 'x2 list) list as 'z2) ->
  (unit, Ostap.Msg.t) Checked.t *
  ((('s2 * 't2) list * ('m2 * 'r2) list * ('m2 list * 'r2) list) *
   ('m2 * ('q2 * 'm2 * 'p2) list * 'b3 * 'y2 list) list as 'b3, Ostap.Msg.t)
  Checked.t
)
ident(
  def declarations "L3.ml" 123 4470 4474 "L3.ml" 133 4883 4888
)
"L3.ml" 123 4470 4495 "L3.ml" 123 4470 4505
type(
  bool
)
ident(
  def restricted "L3.ml" 123 4470 4506 "L3.ml" 126 4689 4710
)
"L3.ml" 123 4470 4506 "L3.ml" 123 4470 4509
type(
  'd2 -> 'w2 -> ('r2, Ostap.Msg.t) Checked.t
)
ident(
  def typ "L3.ml" 123 4470 4510 "L3.ml" 126 4689 4710
)
"L3.ml" 123 4470 4510 "L3.ml" 123 4470 4514
type(
  'd2 -> 'x2 -> ('y2, Ostap.Msg.t) Checked.t
)
ident(
  def stmt "L3.ml" 123 4470 4515 "L3.ml" 126 4689 4710
)
"L3.ml" 123 4470 4515 "L3.ml" 123 4470 4518
type(
  'd2
)
ident(
  def env "L3.ml" 123 4470 4519 "L3.ml" 126 4689 4710
)
"L3.ml" 123 4470 4520 "L3.ml" 123 4470 4521
type(
  ('s2 * 'a3) list * ('f2 * 'w2) list * ('f2 list * 'w2) list
)
ident(
  def d "L3.ml" 124 4528 4534 "L3.ml" 126 4689 4710
)
"L3.ml" 123 4470 4523 "L3.ml" 123 4470 4524
type(
  ('f2 * ('q2 * 'f2 * 'w2) list * 'z2 * 'x2 list) list as 'c3
)
ident(
  def p "L3.ml" 124 4528 4534 "L3.ml" 126 4689 4710
)
"L3.ml" 123 4470 4520 "L3.ml" 123 4470 4524
type(
  'z2
)
"L3.ml" 124 4528 4538 "L3.ml" 124 4528 4539
type(
  (unit, Ostap.Msg.t) Checked.t
)
ident(
  def m "L3.ml" 125 4582 4588 "L3.ml" 126 4689 4710
)
"L3.ml" 124 4528 4541 "L3.ml" 124 4528 4542
type(
  (('s2 * 't2) list * ('m2 * 'r2) list * ('m2 list * 'r2) list, 'd3)
  Checked.t
)
ident(
  def d "L3.ml" 125 4582 4588 "L3.ml" 126 4689 4710
)
"L3.ml" 124 4528 4538 "L3.ml" 124 4528 4542
type(
  (unit, Ostap.Msg.t) Checked.t *
  (('s2 * 't2) list * ('m2 * 'r2) list * ('m2 list * 'r2) list, 'd3)
  Checked.t
)
"L3.ml" 124 4528 4545 "L3.ml" 124 4528 4568
type(
  ('d2 -> 'w2 -> ('r2, Ostap.Msg.t) Checked.t) ->
  'd2 ->
  ('s2 * 'a3) list * ('f2 * 'w2) list * ('f2 list * 'w2) list ->
  (unit, Ostap.Msg.t) Checked.t *
  (('s2 * 't2) list * ('m2 * 'r2) list * ('m2 list * 'r2) list, 'd3)
  Checked.t
)
ident(
  ext_ref L1.Resolve.declarations
)
"L3.ml" 124 4528 4569 "L3.ml" 124 4528 4572
type(
  'd2 -> 'w2 -> ('r2, Ostap.Msg.t) Checked.t
)
ident(
  int_ref typ "L3.ml" 123 4470 4506 "L3.ml" 123 4470 4509
)
"L3.ml" 124 4528 4573 "L3.ml" 124 4528 4576
type(
  'd2
)
ident(
  int_ref env "L3.ml" 123 4470 4515 "L3.ml" 123 4470 4518
)
"L3.ml" 124 4528 4577 "L3.ml" 124 4528 4578
type(
  ('s2 * 'a3) list * ('f2 * 'w2) list * ('f2 list * 'w2) list
)
ident(
  int_ref d "L3.ml" 123 4470 4520 "L3.ml" 123 4470 4521
)
"L3.ml" 124 4528 4545 "L3.ml" 124 4528 4578
call(
  stack
)
type(
  (unit, Ostap.Msg.t) Checked.t *
  (('s2 * 't2) list * ('m2 * 'r2) list * ('m2 list * 'r2) list, 'd3)
  Checked.t
)
"L3.ml" 125 4582 4592 "L3.ml" 125 4582 4593
type(
  (('m2 * ('q2 * 'm2 * 'p2) list * 'b3 * 'y2 list) list, Ostap.Msg.t)
  Checked.t
)
ident(
  def p "L3.ml" 126 4689 4695 "L3.ml" 126 4689 4710
)
"L3.ml" 125 4582 4596 "L3.ml" 125 4582 4612
type(
  bool ->
  'd2 ->
  ('w2 -> ('r2, Ostap.Msg.t) Checked.t) ->
  ('d2 -> 'z2 -> (unit, Ostap.Msg.t) Checked.t * ('b3, Ostap.Msg.t) Checked.t) ->
  ('x2 -> ('y2, Ostap.Msg.t) Checked.t) ->
  'c3 ->
  (('m2 * ('q2 * 'm2 * 'p2) list * 'b3 * 'y2 list) list, Ostap.Msg.t)
  Checked.t
)
ident(
  ext_ref ProcDecl.resolve
)
"L3.ml" 125 4582 4613 "L3.ml" 125 4582 4623
type(
  bool
)
ident(
  int_ref restricted "L3.ml" 123 4470 4495 "L3.ml" 123 4470 4505
)
"L3.ml" 125 4582 4624 "L3.ml" 125 4582 4627
type(
  'd2
)
ident(
  int_ref env "L3.ml" 123 4470 4515 "L3.ml" 123 4470 4518
)
"L3.ml" 125 4582 4629 "L3.ml" 125 4582 4632
type(
  'd2 -> 'w2 -> ('r2, Ostap.Msg.t) Checked.t
)
ident(
  int_ref typ "L3.ml" 123 4470 4506 "L3.ml" 123 4470 4509
)
"L3.ml" 125 4582 4633 "L3.ml" 125 4582 4636
type(
  'd2
)
ident(
  int_ref env "L3.ml" 123 4470 4515 "L3.ml" 123 4470 4518
)
"L3.ml" 125 4582 4628 "L3.ml" 125 4582 4637
call(
  stack
)
type(
  'w2 -> ('r2, Ostap.Msg.t) Checked.t
)
"L3.ml" 125 4582 4639 "L3.ml" 125 4582 4651
type(
  bool ->
  ('d2 -> 'w2 -> ('r2, Ostap.Msg.t) Checked.t) ->
  ('d2 -> 'x2 -> ('y2, Ostap.Msg.t) Checked.t) ->
  'd2 -> 'z2 -> (unit, Ostap.Msg.t) Checked.t * ('b3, Ostap.Msg.t) Checked.t
)
ident(
  int_ref declarations "L3.ml" 123 4470 4482 "L3.ml" 123 4470 4494
)
"L3.ml" 125 4582 4652 "L3.ml" 125 4582 4662
type(
  bool
)
ident(
  int_ref restricted "L3.ml" 123 4470 4495 "L3.ml" 123 4470 4505
)
"L3.ml" 125 4582 4663 "L3.ml" 125 4582 4666
type(
  'd2 -> 'w2 -> ('r2, Ostap.Msg.t) Checked.t
)
ident(
  int_ref typ "L3.ml" 123 4470 4506 "L3.ml" 123 4470 4509
)
"L3.ml" 125 4582 4667 "L3.ml" 125 4582 4671
type(
  'd2 -> 'x2 -> ('y2, Ostap.Msg.t) Checked.t
)
ident(
  int_ref stmt "L3.ml" 123 4470 4510 "L3.ml" 123 4470 4514
)
"L3.ml" 125 4582 4638 "L3.ml" 125 4582 4672
call(
  stack
)
type(
  'd2 -> 'z2 -> (unit, Ostap.Msg.t) Checked.t * ('b3, Ostap.Msg.t) Checked.t
)
"L3.ml" 125 4582 4674 "L3.ml" 125 4582 4678
type(
  'd2 -> 'x2 -> ('y2, Ostap.Msg.t) Checked.t
)
ident(
  int_ref stmt "L3.ml" 123 4470 4510 "L3.ml" 123 4470 4514
)
"L3.ml" 125 4582 4679 "L3.ml" 125 4582 4682
type(
  'd2
)
ident(
  int_ref env "L3.ml" 123 4470 4515 "L3.ml" 123 4470 4518
)
"L3.ml" 125 4582 4673 "L3.ml" 125 4582 4683
call(
  stack
)
type(
  'x2 -> ('y2, Ostap.Msg.t) Checked.t
)
"L3.ml" 125 4582 4684 "L3.ml" 125 4582 4685
type(
  'c3
)
ident(
  int_ref p "L3.ml" 123 4470 4523 "L3.ml" 123 4470 4524
)
"L3.ml" 125 4582 4596 "L3.ml" 125 4582 4685
call(
  stack
)
type(
  (('m2 * ('q2 * 'm2 * 'p2) list * 'b3 * 'y2 list) list, Ostap.Msg.t)
  Checked.t
)
"L3.ml" 126 4689 4695 "L3.ml" 126 4689 4696
type(
  (unit, Ostap.Msg.t) Checked.t
)
ident(
  int_ref m "L3.ml" 124 4528 4538 "L3.ml" 124 4528 4539
)
"L3.ml" 126 4689 4698 "L3.ml" 126 4689 4703
type(
  (('s2 * 't2) list * ('m2 * 'r2) list * ('m2 list * 'r2) list, Ostap.Msg.t)
  Checked.t *
  (('m2 * ('q2 * 'm2 * 'p2) list * 'b3 * 'y2 list) list as 'e3, Ostap.Msg.t)
  Checked.t -> ('b3, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.tuple
)
"L3.ml" 126 4689 4705 "L3.ml" 126 4689 4706
type(
  (('s2 * 't2) list * ('m2 * 'r2) list * ('m2 list * 'r2) list, Ostap.Msg.t)
  Checked.t
)
ident(
  int_ref d "L3.ml" 124 4528 4541 "L3.ml" 124 4528 4542
)
"L3.ml" 126 4689 4708 "L3.ml" 126 4689 4709
type(
  ('e3, Ostap.Msg.t) Checked.t
)
ident(
  int_ref p "L3.ml" 125 4582 4592 "L3.ml" 125 4582 4593
)
"L3.ml" 126 4689 4704 "L3.ml" 126 4689 4710
type(
  (('s2 * 't2) list * ('m2 * 'r2) list * ('m2 list * 'r2) list, Ostap.Msg.t)
  Checked.t * ('e3, Ostap.Msg.t) Checked.t
)
"L3.ml" 126 4689 4698 "L3.ml" 126 4689 4710
call(
  stack
)
type(
  ('b3, Ostap.Msg.t) Checked.t
)
"L3.ml" 126 4689 4695 "L3.ml" 126 4689 4710
type(
  (unit, Ostap.Msg.t) Checked.t * ('b3, Ostap.Msg.t) Checked.t
)
"L3.ml" 125 4582 4588 "L3.ml" 126 4689 4710
type(
  (unit, Ostap.Msg.t) Checked.t * ('b3, Ostap.Msg.t) Checked.t
)
"L3.ml" 124 4528 4534 "L3.ml" 126 4689 4710
type(
  (unit, Ostap.Msg.t) Checked.t * ('b3, Ostap.Msg.t) Checked.t
)
"L3.ml" 123 4470 4519 "L3.ml" 126 4689 4710
type(
  'z2 -> (unit, Ostap.Msg.t) Checked.t * ('b3, Ostap.Msg.t) Checked.t
)
"L3.ml" 123 4470 4515 "L3.ml" 126 4689 4710
type(
  'd2 -> 'z2 -> (unit, Ostap.Msg.t) Checked.t * ('b3, Ostap.Msg.t) Checked.t
)
"L3.ml" 123 4470 4510 "L3.ml" 126 4689 4710
type(
  ('d2 -> 'x2 -> ('y2, Ostap.Msg.t) Checked.t) ->
  'd2 -> 'z2 -> (unit, Ostap.Msg.t) Checked.t * ('b3, Ostap.Msg.t) Checked.t
)
"L3.ml" 123 4470 4506 "L3.ml" 126 4689 4710
type(
  ('d2 -> 'w2 -> ('r2, Ostap.Msg.t) Checked.t) ->
  ('d2 -> 'x2 -> ('y2, Ostap.Msg.t) Checked.t) ->
  'd2 -> 'z2 -> (unit, Ostap.Msg.t) Checked.t * ('b3, Ostap.Msg.t) Checked.t
)
"L3.ml" 123 4470 4495 "L3.ml" 126 4689 4710
type(
  bool ->
  ('d2 -> 'w2 -> ('r2, Ostap.Msg.t) Checked.t) ->
  ('d2 -> 'x2 -> ('y2, Ostap.Msg.t) Checked.t) ->
  'd2 -> 'z2 -> (unit, Ostap.Msg.t) Checked.t * ('b3, Ostap.Msg.t) Checked.t
)
"L3.ml" 128 4712 4720 "L3.ml" 128 4712 4727
type(
  'f3 *
  (((String.t *
     ([> `Binop of
           ([< `Add
             | `And
             | `Div
             | `Eq
             | `Ge
             | `Gt
             | `Le
             | `Lt
             | `Mod
             | `Mul
             | `Ne
             | `Or
             | `Sub
             > `Add `Div `Mod `Mul `Sub ]
            as 'i3) *
           'h3 * 'h3
       | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
       | `Ident of String.t
       | `Unop of [ `Neg | `Not ] * 'h3 ]
      as 'h3))
    list * (String.t * ([< `Bool | `Int | `User of String.t ] as 'j3)) list *
    (String.t list * 'j3) list) *
   (String.t * ([ `Val | `Var ] * String.t * 'j3) list * 'g3 *
    ([> `Assign of
          ([> `Binop of 'i3 * 'l3 * 'l3
            | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
            | `Ident of String.t
            | `Unop of [ `Neg | `Not ] * 'l3 ]
           as 'l3) *
          'l3
      | `Call of String.t * 'l3 list
      | `Case of
          'l3 *
          ([< `Atom of
                [> `Binop of 'i3 * 'm3 * 'm3
                 | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
                 | `Ident of String.t
                 | `Unop of [ `Neg | `Not ] * 'm3 ]
                as 'm3
            | `Interval of 'm3 * 'm3 ]
           list * 'k3 list)
          list * 'k3 list
      | `For of 'l3 * 'l3 * 'l3 * 'm3 option * 'k3 list
      | `If of ('l3 * 'k3 list) list * 'k3 list
      | `While of 'l3 * 'k3 list ]
     as 'k3)
    list)
   list as 'g3) *
  ([> `Assign of
        ([> `Binop of 'i3 * 'o3 * 'o3
          | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
          | `Ident of String.t
          | `Unop of [ `Neg | `Not ] * 'o3 ]
         as 'o3) *
        'o3
    | `Call of String.t * 'o3 list
    | `Case of
        'o3 *
        ([< `Atom of
              [> `Binop of 'i3 * 'p3 * 'p3
               | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
               | `Ident of String.t
               | `Unop of [ `Neg | `Not ] * 'p3 ]
              as 'p3
          | `Interval of 'p3 * 'p3 ]
         list * 'n3 list)
        list * 'n3 list
    | `For of 'o3 * 'o3 * 'o3 * 'p3 option * 'n3 list
    | `If of ('o3 * 'n3 list) list * 'n3 list
    | `While of 'o3 * 'n3 list ]
   as 'n3)
  list ->
  (('f3 *
    (((String.t *
       ([> `Binop of 'i3 * 'r3 * 'r3
         | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
         | `Ident of
             string *
             [ `Const of 'r3
             | `Param of
                 string *
                 ([> `Bool
                   | `Int
                   | `User of
                       String.t * string *
                       ([> `Bool | `Int | `User of 't3 ] as 'u3) as 't3 ]
                  as 's3)
             | `Proc of string * ([ `Val | `Var ] * String.t * 's3) list
             | `Type of string * 'u3
             | `VParam of string * 's3
             | `Var of string * 'u3 ]
         | `Unop of [ `Neg | `Not ] * 'r3 ]
        as 'r3))
      list * (string * 'u3) list * (string list * 'u3) list) *
     (string * ([ `Val | `Var ] * string * 's3) list * 'q3 *
      ([> `Assign of 'r3 * 'r3
        | `Call of
            string * 'r3 list *
            [> `Proc of string * ([ `Val | `Var ] * String.t * 's3) list ]
        | `Case of
            'r3 *
            ([> `Atom of
                  [> `Const of
                       [> `False
                        | `Literal of int Monad.Id.t Monad.Id.t
                        | `True ] ]
                  as 'w3
              | `Interval of 'w3 * 'w3 ]
             list * 'v3 list)
            list * 'v3 list
        | `For of 'r3 * 'r3 * 'r3 * 'w3 option * 'v3 list
        | `If of ('r3 * 'v3 list) list * 'v3 list
        | `While of 'r3 * 'v3 list ]
       as 'v3)
      list)
     list as 'q3) *
    ([> `Assign of 'r3 * 'r3
      | `Call of
          string * 'r3 list *
          [> `Proc of string * ([ `Val | `Var ] * String.t * 's3) list ]
      | `Case of
          'r3 *
          ([> `Atom of
                [> `Const of
                     [> `False
                      | `Literal of int Monad.Id.t Monad.Id.t
                      | `True ] ]
                as 'y3
            | `Interval of 'y3 * 'y3 ]
           list * 'x3 list)
          list * 'x3 list
      | `For of 'r3 * 'r3 * 'r3 * 'y3 option * 'x3 list
      | `If of ('r3 * 'x3 list) list * 'x3 list
      | `While of 'r3 * 'x3 list ]
     as 'x3)
    list) *
   < getName : String.t -> String.t >, Ostap.Msg.t)
  Checked.t
)
ident(
  def program "L3.ml" 131 4849 4881 "L3.ml" 133 4883 4888
)
"L3.ml" 128 4712 4728 "L3.ml" 128 4712 4729
type(
  'f3 * 'g3 * 'n3 list
)
ident(
  def m "L3.ml" 129 4732 4738 "L3.ml" 131 4849 4881
)
"L3.ml" 129 4732 4742 "L3.ml" 129 4732 4745
type(
  ([ `Const of 'r3
   | `Param of string * 's3
   | `Proc of string * ([ `Val | `Var ] * String.t * 's3) list
   | `Type of string * 'u3
   | `VParam of string * 's3
   | `Var of string * 'u3 ], 'u3)
  env
)
ident(
  def env "L3.ml" 130 4759 4765 "L3.ml" 131 4849 4881
)
"L3.ml" 129 4732 4748 "L3.ml" 129 4732 4755
type(
  ([ `Const of 'r3
   | `Param of string * 's3
   | `Proc of string * ([ `Val | `Var ] * String.t * 's3) list
   | `Type of string * 'u3
   | `VParam of string * 's3
   | `Var of string * 'u3 ], 'u3)
  env
)
"L3.ml" 130 4759 4765 "L3.ml" 130 4759 4779
type(
  ([ `Const of 'r3
   | `Param of string * 's3
   | `Proc of string * ([ `Val | `Var ] * String.t * 's3) list
   | `Type of string * 'u3
   | `VParam of string * 's3
   | `Var of string * 'u3 ], 'u3)
  env ->
  (([ `Const of 'r3
    | `Param of string * 's3
    | `Proc of string * ([ `Val | `Var ] * String.t * 's3) list
    | `Type of string * 'u3
    | `VParam of string * 's3
    | `Var of string * 'u3 ], 'u3)
   env -> 'g3 -> (unit, Ostap.Msg.t) Checked.t * ('q3, Ostap.Msg.t) Checked.t) ->
  ('n3 -> 'x3 Monad.Checked.t) ->
  'f3 * 'g3 * 'n3 list -> ('f3 * 'q3 * 'x3 list, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Module.resolve
)
"L3.ml" 130 4759 4780 "L3.ml" 130 4759 4783
type(
  ([ `Const of 'r3
   | `Param of string * 's3
   | `Proc of string * ([ `Val | `Var ] * String.t * 's3) list
   | `Type of string * 'u3
   | `VParam of string * 's3
   | `Var of string * 'u3 ], 'u3)
  env
)
ident(
  int_ref env "L3.ml" 129 4732 4742 "L3.ml" 129 4732 4745
)
"L3.ml" 130 4759 4785 "L3.ml" 130 4759 4797
type(
  bool ->
  (([ `Const of 'r3
    | `Param of string * 's3
    | `Proc of string * ([ `Val | `Var ] * String.t * 's3) list
    | `Type of string * 'u3
    | `VParam of string * 's3
    | `Var of string * 'u3 ], 'u3)
   env -> 'j3 -> ('u3, Ostap.Msg.t) Checked.t) ->
  (([ `Const of 'r3
    | `Param of string * 's3
    | `Proc of string * ([ `Val | `Var ] * String.t * 's3) list
    | `Type of string * 'u3
    | `VParam of string * 's3
    | `Var of string * 'u3 ], 'u3)
   env -> 'k3 -> 'v3 Monad.Checked.t) ->
  ([ `Const of 'r3
   | `Param of string * 's3
   | `Proc of string * ([ `Val | `Var ] * String.t * 's3) list
   | `Type of string * 'u3
   | `VParam of string * 's3
   | `Var of string * 'u3 ], 'u3)
  env -> 'g3 -> (unit, Ostap.Msg.t) Checked.t * ('q3, Ostap.Msg.t) Checked.t
)
ident(
  int_ref declarations "L3.ml" 123 4470 4482 "L3.ml" 123 4470 4494
)
"L3.ml" 130 4759 4798 "L3.ml" 130 4759 4802
type(
  bool
)
"L3.ml" 130 4759 4803 "L3.ml" 130 4759 4824
type(
  ([ `Const of 'r3
   | `Param of string * 's3
   | `Proc of string * ([ `Val | `Var ] * String.t * 's3) list
   | `Type of string * 'u3
   | `VParam of string * 's3
   | `Var of string * 'u3 ], 'u3)
  env -> 'j3 -> ('u3, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref PrimitiveType.resolve
)
"L3.ml" 130 4759 4825 "L3.ml" 130 4759 4829
type(
  ([ `Const of 'r3
   | `Param of string * 's3
   | `Proc of string * ([ `Val | `Var ] * String.t * 's3) list
   | `Type of string * 'u3
   | `VParam of string * 's3
   | `Var of string * 'u3 ], 'u3)
  env -> 'k3 -> 'v3 Monad.Checked.t
)
ident(
  int_ref stmt "L3.ml" 121 4368 4376 "L3.ml" 121 4368 4380
)
"L3.ml" 130 4759 4784 "L3.ml" 130 4759 4830
call(
  stack
)
type(
  ([ `Const of 'r3
   | `Param of string * 's3
   | `Proc of string * ([ `Val | `Var ] * String.t * 's3) list
   | `Type of string * 'u3
   | `VParam of string * 's3
   | `Var of string * 'u3 ], 'u3)
  env -> 'g3 -> (unit, Ostap.Msg.t) Checked.t * ('q3, Ostap.Msg.t) Checked.t
)
"L3.ml" 130 4759 4832 "L3.ml" 130 4759 4836
type(
  ([ `Const of 'r3
   | `Param of string * 's3
   | `Proc of string * ([ `Val | `Var ] * String.t * 's3) list
   | `Type of string * 'u3
   | `VParam of string * 's3
   | `Var of string * 'u3 ], 'u3)
  env -> 'n3 -> 'x3 Monad.Checked.t
)
ident(
  int_ref stmt "L3.ml" 121 4368 4376 "L3.ml" 121 4368 4380
)
"L3.ml" 130 4759 4837 "L3.ml" 130 4759 4840
type(
  ([ `Const of 'r3
   | `Param of string * 's3
   | `Proc of string * ([ `Val | `Var ] * String.t * 's3) list
   | `Type of string * 'u3
   | `VParam of string * 's3
   | `Var of string * 'u3 ], 'u3)
  env
)
ident(
  int_ref env "L3.ml" 129 4732 4742 "L3.ml" 129 4732 4745
)
"L3.ml" 130 4759 4831 "L3.ml" 130 4759 4841
call(
  stack
)
type(
  'n3 -> 'x3 Monad.Checked.t
)
"L3.ml" 130 4759 4842 "L3.ml" 130 4759 4843
type(
  'f3 * 'g3 * 'n3 list
)
ident(
  int_ref m "L3.ml" 128 4712 4728 "L3.ml" 128 4712 4729
)
"L3.ml" 130 4759 4765 "L3.ml" 130 4759 4843
call(
  stack
)
type(
  ('f3 * 'q3 * 'x3 list, Ostap.Msg.t) Checked.t
)
"L3.ml" 131 4849 4860 "L3.ml" 131 4849 4861
type(
  'f3 * 'q3 * 'x3 list
)
ident(
  def x "L3.ml" 131 4849 4865 "L3.ml" 131 4849 4880
)
"L3.ml" 131 4849 4865 "L3.ml" 131 4849 4866
type(
  'f3 * 'q3 * 'x3 list
)
ident(
  int_ref x "L3.ml" 131 4849 4860 "L3.ml" 131 4849 4861
)
"L3.ml" 131 4849 4868 "L3.ml" 131 4849 4871
type(
  ([ `Const of 'r3
   | `Param of string * 's3
   | `Proc of string * ([ `Val | `Var ] * String.t * 's3) list
   | `Type of string * 'u3
   | `VParam of string * 's3
   | `Var of string * 'u3 ], 'u3)
  env
)
ident(
  int_ref env "L3.ml" 129 4732 4742 "L3.ml" 129 4732 4745
)
"L3.ml" 131 4849 4868 "L3.ml" 131 4849 4877
call(
  stack
)
type(
  unit -> < getName : String.t -> String.t >
)
"L3.ml" 131 4849 4878 "L3.ml" 131 4849 4880
type(
  unit
)
"L3.ml" 131 4849 4868 "L3.ml" 131 4849 4880
type(
  < getName : String.t -> String.t >
)
"L3.ml" 131 4849 4865 "L3.ml" 131 4849 4880
type(
  ('f3 * 'q3 * 'x3 list) * < getName : String.t -> String.t >
)
"L3.ml" 131 4849 4855 "L3.ml" 131 4849 4881
type(
  'f3 * 'q3 * 'x3 list ->
  ('f3 * 'q3 * 'x3 list) * < getName : String.t -> String.t >
)
"L3.ml" 130 4759 4765 "L3.ml" 131 4849 4881
call(
  tail
)
type(
  (('f3 * 'q3 * 'x3 list) * < getName : String.t -> String.t >, Ostap.Msg.t)
  Checked.t
)
type(
  ('f3 * 'q3 * 'x3 list, Ostap.Msg.t) Checked.t ->
  ('f3 * 'q3 * 'x3 list ->
   ('f3 * 'q3 * 'x3 list) * < getName : String.t -> String.t >) ->
  (('f3 * 'q3 * 'x3 list) * < getName : String.t -> String.t >, Ostap.Msg.t)
  Checked.t
)
ident(
  ext_ref Checked.( -?-> )
)
"L3.ml" 129 4732 4738 "L3.ml" 131 4849 4881
type(
  (('f3 * 'q3 * 'x3 list) * < getName : String.t -> String.t >, Ostap.Msg.t)
  Checked.t
)
"L3.ml" 128 4712 4728 "L3.ml" 131 4849 4881
type(
  'f3 * 'g3 * 'n3 list ->
  (('f3 * 'q3 * 'x3 list) * < getName : String.t -> String.t >, Ostap.Msg.t)
  Checked.t
)
"L3.ml" 139 5008 5016 "L3.ml" 139 5008 5025
type(
  (([> `Ident of
         'b *
         [> `Const of [> `Literal of 'd ] as 'c
          | `Param of 'e * ([> `Bool | `Int ] as 'f)
          | `VParam of 'g * 'f
          | `Var of 'h * 'f ] ]
    as 'a) ->
   (([> `Ident of
          'b *
          [> `Const of 'c
           | `Param of 'e * 'f
           | `VParam of 'g * 'f
           | `Var of 'h * 'f ] ]
     as 'i) *
    'f, 'j)
   Checked.t) ->
  'a -> ('i * 'f, 'j) Checked.t
)
ident(
  def reference "L3.ml" 146 5220 5224 "L3.ml" 174 6374 6379
)
"L3.ml" 139 5008 5026 "L3.ml" 139 5008 5029
type(
  'a -> ('i * 'f, 'j) Checked.t
)
ident(
  def ext "L3.ml" 139 5008 5030 "L3.ml" 145 5207 5219
)
"L3.ml" 139 5008 5030 "L3.ml" 139 5008 5034
type(
  'a
)
ident(
  def expr "L3.ml" 140 5038 5044 "L3.ml" 145 5207 5219
)
"L3.ml" 140 5038 5044 "L3.ml" 140 5038 5066
type(
  ('a -> ('i * 'f, 'j) Checked.t) -> 'a -> ('i * 'f, 'j) Checked.t
)
ident(
  ext_ref L1.Typecheck.reference
)
"L3.ml" 142 5087 5107 "L3.ml" 142 5087 5108
type(
  'b
)
"L3.ml" 142 5087 5119 "L3.ml" 142 5087 5120
type(
  'g
)
"L3.ml" 142 5087 5122 "L3.ml" 142 5087 5123
type(
  'f
)
ident(
  def t "L3.ml" 142 5087 5163 "L3.ml" 142 5087 5172
)
"L3.ml" 142 5087 5119 "L3.ml" 142 5087 5123
type(
  'g * 'f
)
"L3.ml" 142 5087 5110 "L3.ml" 142 5087 5124
type(
  [> `Const of 'c | `Param of 'e * 'f | `VParam of 'g * 'f | `Var of 'h * 'f ]
  as 'k
)
"L3.ml" 142 5087 5107 "L3.ml" 142 5087 5124
type(
  'b * 'k
)
"L3.ml" 142 5087 5099 "L3.ml" 142 5087 5125
type(
  'a
)
"L3.ml" 142 5087 5136 "L3.ml" 142 5087 5137
type(
  'b
)
"L3.ml" 142 5087 5147 "L3.ml" 142 5087 5148
type(
  'e
)
"L3.ml" 142 5087 5150 "L3.ml" 142 5087 5151
type(
  'f
)
ident(
  def t "L3.ml" 142 5087 5163 "L3.ml" 142 5087 5172
)
"L3.ml" 142 5087 5147 "L3.ml" 142 5087 5151
type(
  'e * 'f
)
"L3.ml" 142 5087 5139 "L3.ml" 142 5087 5152
type(
  'k
)
"L3.ml" 142 5087 5136 "L3.ml" 142 5087 5152
type(
  'b * 'k
)
"L3.ml" 142 5087 5128 "L3.ml" 142 5087 5153
type(
  'a
)
"L3.ml" 142 5087 5099 "L3.ml" 142 5087 5153
type(
  'a
)
"L3.ml" 142 5087 5098 "L3.ml" 142 5087 5159
type(
  'a
)
ident(
  def x "L3.ml" 142 5087 5163 "L3.ml" 142 5087 5172
)
"L3.ml" 142 5087 5167 "L3.ml" 142 5087 5168
type(
  'i
)
ident(
  int_ref x "L3.ml" 142 5087 5098 "L3.ml" 142 5087 5159
)
"L3.ml" 142 5087 5170 "L3.ml" 142 5087 5171
type(
  'f
)
ident(
  int_ref t "L3.ml" 142 5087 5122 "L3.ml" 142 5087 5123
)
"L3.ml" 142 5087 5166 "L3.ml" 142 5087 5172
type(
  'i * 'f
)
"L3.ml" 142 5087 5163 "L3.ml" 142 5087 5172
call(
  tail
)
type(
  ('i * 'f, 'j) Checked.t
)
type(
  'i * 'f -> ('i * 'f, 'j) Checked.t
)
ident(
  ext_ref Checked.( !! )
)
"L3.ml" 143 5174 5185 "L3.ml" 143 5174 5186
type(
  'a
)
ident(
  def x "L3.ml" 143 5174 5190 "L3.ml" 143 5174 5195
)
"L3.ml" 143 5174 5190 "L3.ml" 143 5174 5193
type(
  'a -> ('i * 'f, 'j) Checked.t
)
ident(
  int_ref ext "L3.ml" 139 5008 5026 "L3.ml" 139 5008 5029
)
"L3.ml" 143 5174 5194 "L3.ml" 143 5174 5195
type(
  'a
)
ident(
  int_ref x "L3.ml" 143 5174 5185 "L3.ml" 143 5174 5186
)
"L3.ml" 143 5174 5190 "L3.ml" 143 5174 5195
call(
  tail
)
type(
  ('i * 'f, 'j) Checked.t
)
"L3.ml" 141 5068 5076 "L3.ml" 144 5196 5205
type(
  'a -> ('i * 'f, 'j) Checked.t
)
"L3.ml" 145 5207 5215 "L3.ml" 145 5207 5219
type(
  'a
)
ident(
  int_ref expr "L3.ml" 139 5008 5030 "L3.ml" 139 5008 5034
)
"L3.ml" 140 5038 5044 "L3.ml" 145 5207 5219
call(
  tail
)
type(
  ('i * 'f, 'j) Checked.t
)
"L3.ml" 139 5008 5030 "L3.ml" 145 5207 5219
type(
  'a -> ('i * 'f, 'j) Checked.t
)
"L3.ml" 139 5008 5026 "L3.ml" 145 5207 5219
type(
  ('a -> ('i * 'f, 'j) Checked.t) -> 'a -> ('i * 'f, 'j) Checked.t
)
"L3.ml" 146 5220 5232 "L3.ml" 146 5220 5244
type(
  (< equal : [> `Bool | `Int ] -> ([> `Bool | `Int ] as 'm) -> bool; .. >
   as 'l) ->
  ('l -> 'n -> ('o, Ostap.Msg.t) Checked.t) ->
  ((('q *
     ([> `Binop of
           [> `And | `Eq | `Ge | `Gt | `Le | `Lt | `Ne | `Or ] * 'r * 'r
       | `Const of [< `False | `Literal of 's | `True ]
       | `Ident of 't * [> `Const of [> `Literal of 'u ] | `Var of 'v * 'm ]
       | `Unop of [< `Neg | `Not ] * 'r ]
      as 'r))
    list * 'w * 'x) *
   ('y * 'z * 'p * 'n list) list as 'p) ->
  ((('q * 'r) list * 'w * 'x) * ('y * 'z * 'a1 * 'o list) list as 'a1,
   Ostap.Msg.t)
  Checked.t
)
ident(
  def declarations "L3.ml" 146 5220 5224 "L3.ml" 174 6374 6379
)
"L3.ml" 146 5220 5245 "L3.ml" 146 5220 5247
type(
  'l
)
ident(
  def ts "L3.ml" 146 5220 5248 "L3.ml" 150 5380 5387
)
"L3.ml" 146 5220 5248 "L3.ml" 146 5220 5252
type(
  'l -> 'n -> ('o, Ostap.Msg.t) Checked.t
)
ident(
  def stmt "L3.ml" 146 5220 5253 "L3.ml" 150 5380 5387
)
"L3.ml" 146 5220 5254 "L3.ml" 146 5220 5255
type(
  ('q * 'r) list * 'w * 'x
)
ident(
  def d "L3.ml" 147 5262 5268 "L3.ml" 150 5380 5387
)
"L3.ml" 146 5220 5257 "L3.ml" 146 5220 5258
type(
  ('y * 'z * 'p * 'n list) list as 'b1
)
ident(
  def p "L3.ml" 147 5262 5268 "L3.ml" 150 5380 5387
)
"L3.ml" 146 5220 5254 "L3.ml" 146 5220 5258
type(
  'p
)
"L3.ml" 147 5262 5268 "L3.ml" 147 5262 5273
type(
  (('q * 'r) list * 'w * 'x, Ostap.Msg.t) Checked.t *
  (('y * 'z * 'a1 * 'o list) list as 'c1, Ostap.Msg.t) Checked.t ->
  ('a1, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.tuple
)
"L3.ml" 148 5276 5284 "L3.ml" 148 5276 5309
type(
  'l ->
  ('q * 'r) list * 'w * 'x ->
  (('q * 'r) list * 'w * 'x, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref L1.Typecheck.declarations
)
"L3.ml" 148 5276 5310 "L3.ml" 148 5276 5312
type(
  'l
)
ident(
  int_ref ts "L3.ml" 146 5220 5245 "L3.ml" 146 5220 5247
)
"L3.ml" 148 5276 5313 "L3.ml" 148 5276 5314
type(
  ('q * 'r) list * 'w * 'x
)
ident(
  int_ref d "L3.ml" 146 5220 5254 "L3.ml" 146 5220 5255
)
"L3.ml" 148 5276 5284 "L3.ml" 148 5276 5314
call(
  stack
)
type(
  (('q * 'r) list * 'w * 'x, Ostap.Msg.t) Checked.t
)
"L3.ml" 149 5318 5326 "L3.ml" 149 5318 5344
type(
  ('p -> ('a1, Ostap.Msg.t) Checked.t) ->
  ('n -> ('o, Ostap.Msg.t) Checked.t) -> 'b1 -> ('c1, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref ProcDecl.typecheck
)
"L3.ml" 149 5318 5346 "L3.ml" 149 5318 5358
type(
  'l ->
  ('l -> 'n -> ('o, Ostap.Msg.t) Checked.t) ->
  'p -> ('a1, Ostap.Msg.t) Checked.t
)
ident(
  int_ref declarations "L3.ml" 146 5220 5232 "L3.ml" 146 5220 5244
)
"L3.ml" 149 5318 5359 "L3.ml" 149 5318 5361
type(
  'l
)
ident(
  int_ref ts "L3.ml" 146 5220 5245 "L3.ml" 146 5220 5247
)
"L3.ml" 149 5318 5362 "L3.ml" 149 5318 5366
type(
  'l -> 'n -> ('o, Ostap.Msg.t) Checked.t
)
ident(
  int_ref stmt "L3.ml" 146 5220 5248 "L3.ml" 146 5220 5252
)
"L3.ml" 149 5318 5345 "L3.ml" 149 5318 5367
call(
  stack
)
type(
  'p -> ('a1, Ostap.Msg.t) Checked.t
)
"L3.ml" 149 5318 5369 "L3.ml" 149 5318 5373
type(
  'l -> 'n -> ('o, Ostap.Msg.t) Checked.t
)
ident(
  int_ref stmt "L3.ml" 146 5220 5248 "L3.ml" 146 5220 5252
)
"L3.ml" 149 5318 5374 "L3.ml" 149 5318 5376
type(
  'l
)
ident(
  int_ref ts "L3.ml" 146 5220 5245 "L3.ml" 146 5220 5247
)
"L3.ml" 149 5318 5368 "L3.ml" 149 5318 5377
call(
  stack
)
type(
  'n -> ('o, Ostap.Msg.t) Checked.t
)
"L3.ml" 149 5318 5378 "L3.ml" 149 5318 5379
type(
  'b1
)
ident(
  int_ref p "L3.ml" 146 5220 5257 "L3.ml" 146 5220 5258
)
"L3.ml" 149 5318 5326 "L3.ml" 149 5318 5379
call(
  stack
)
type(
  ('c1, Ostap.Msg.t) Checked.t
)
"L3.ml" 147 5262 5274 "L3.ml" 150 5380 5387
type(
  (('q * 'r) list * 'w * 'x, Ostap.Msg.t) Checked.t *
  ('c1, Ostap.Msg.t) Checked.t
)
"L3.ml" 147 5262 5268 "L3.ml" 150 5380 5387
call(
  tail
)
type(
  ('a1, Ostap.Msg.t) Checked.t
)
"L3.ml" 146 5220 5253 "L3.ml" 150 5380 5387
type(
  'p -> ('a1, Ostap.Msg.t) Checked.t
)
"L3.ml" 146 5220 5248 "L3.ml" 150 5380 5387
type(
  ('l -> 'n -> ('o, Ostap.Msg.t) Checked.t) ->
  'p -> ('a1, Ostap.Msg.t) Checked.t
)
"L3.ml" 146 5220 5245 "L3.ml" 150 5380 5387
type(
  'l ->
  ('l -> 'n -> ('o, Ostap.Msg.t) Checked.t) ->
  'p -> ('a1, Ostap.Msg.t) Checked.t
)
"L3.ml" 151 5388 5396 "L3.ml" 151 5388 5400
type(
  < equal : ([> `Bool | `Int ] as 'd1) -> 'd1 -> bool;
    primitive : 'd1 -> bool; string : 'd1 -> string; .. > ->
  ([> `Assign of
        ([> `Binop of
              ([> `And | `Eq | `Ge | `Gt | `Le | `Lt | `Ne | `Or ] as 'g1) *
              'f1 * 'f1
          | `Const of [< `False | `Literal of 'i1 | `True ] as 'h1
          | `Ident of
              'j1 *
              [> `Const of [> `Literal of 'l1 ] as 'k1
               | `Param of 'm1 * 'd1
               | `VParam of 'n1 * 'd1
               | `Var of 'o1 * 'd1 ]
          | `Unop of [< `Neg | `Not ] * 'f1 ]
         as 'f1) *
        'f1
    | `Call of 'p1 * 'f1 list * [> `Proc of 'q1 * ('r1 * 's1 * 'd1) list ]
    | `Case of
        'f1 *
        ([< `Atom of 'f1 | `Interval of 'f1 * 'f1 ] list * 'e1 list) list *
        'e1 list
    | `For of 'f1 * 'f1 * 'f1 * 'f1 option * 'e1 list
    | `If of ('f1 * 'e1 list) list * 'e1 list
    | `While of 'f1 * 'e1 list ]
   as 'e1) ->
  ([> `Assign of
        (([> `Binop of 'g1 * ('u1 * 'd1) * ('u1 * 'd1)
           | `Const of 'h1
           | `Ident of
               'j1 *
               [> `Const of 'k1
                | `Param of 'm1 * 'd1
                | `VParam of 'n1 * 'd1
                | `Var of 'o1 * 'd1 ]
           | `Unop of [> `Neg | `Not ] * ('u1 * 'd1) ]
          as 'u1) *
         'd1) *
        ('u1 * 'd1)
    | `Call of
        'p1 * ('u1 * 'd1) list *
        ('p1 * 'f1 list * [> `Proc of 'q1 * ('r1 * 's1 * 'd1) list ])
    | `Case of
        ('u1 * 'd1) *
        ([ `Atom of 'u1 * 'd1 | `Interval of ('u1 * 'd1) * ('u1 * 'd1) ] list *
         't1 list)
        list * 't1 list
    | `For of
        ('u1 * 'd1) * ('u1 * 'd1) * ('u1 * 'd1) * ('u1 * 'd1) option *
        't1 list
    | `If of (('u1 * 'd1) * 't1 list) list * 't1 list
    | `While of ('u1 * 'd1) * 't1 list ]
   as 't1)
  Monad.Checked.t
)
ident(
  def stmt "L3.ml" 146 5220 5224 "L3.ml" 174 6374 6379
)
"L3.ml" 151 5388 5401 "L3.ml" 151 5388 5403
type(
  < equal : 'd1 -> 'd1 -> bool; primitive : 'd1 -> bool;
    string : 'd1 -> string; .. >
  as 'v1
)
ident(
  def ts "L3.ml" 151 5388 5404 "L3.ml" 151 5388 5480
)
"L3.ml" 151 5388 5404 "L3.ml" 151 5388 5405
type(
  'e1
)
ident(
  def s "L3.ml" 151 5388 5408 "L3.ml" 151 5388 5480
)
"L3.ml" 151 5388 5408 "L3.ml" 151 5388 5417
type(
  'v1 ->
  ('v1 -> 'f1 -> ('u1 * 'd1) Monad.Checked.t) ->
  (('e1 -> 't1 Monad.Checked.t) -> 'e1 -> 't1 Monad.Checked.t) ->
  'e1 -> 't1 Monad.Checked.t
)
ident(
  int_ref statement "L3.ml" 152 5481 5489 "L3.ml" 152 5481 5498
)
"L3.ml" 151 5388 5418 "L3.ml" 151 5388 5420
type(
  'v1
)
ident(
  int_ref ts "L3.ml" 151 5388 5401 "L3.ml" 151 5388 5403
)
"L3.ml" 151 5388 5426 "L3.ml" 151 5388 5428
type(
  'v1
)
ident(
  def ts "L3.ml" 151 5388 5432 "L3.ml" 151 5388 5471
)
"L3.ml" 151 5388 5432 "L3.ml" 151 5388 5458
type(
  'v1 ->
  (('f1 -> ('u1 * 'd1) Monad.Checked.t) -> 'f1 -> ('u1 * 'd1) Monad.Checked.t) ->
  'f1 -> ('u1 * 'd1) Monad.Checked.t
)
ident(
  ext_ref SimpleExpression.typecheck
)
"L3.ml" 151 5388 5459 "L3.ml" 151 5388 5461
type(
  'v1
)
ident(
  int_ref ts "L3.ml" 151 5388 5426 "L3.ml" 151 5388 5428
)
"L3.ml" 151 5388 5462 "L3.ml" 151 5388 5471
type(
  ('f1 -> ('u1 * 'd1) Monad.Checked.t) -> 'f1 -> ('u1 * 'd1) Monad.Checked.t
)
ident(
  int_ref reference "L3.ml" 139 5008 5016 "L3.ml" 139 5008 5025
)
"L3.ml" 151 5388 5432 "L3.ml" 151 5388 5471
call(
  tail
)
type(
  'f1 -> ('u1 * 'd1) Monad.Checked.t
)
"L3.ml" 151 5388 5421 "L3.ml" 151 5388 5472
type(
  'v1 -> 'f1 -> ('u1 * 'd1) Monad.Checked.t
)
"L3.ml" 151 5388 5473 "L3.ml" 151 5388 5478
type(
  ('e1 -> 't1 Monad.Checked.t) -> 'e1 -> 't1 Monad.Checked.t
)
ident(
  ext_ref Common.apply
)
"L3.ml" 151 5388 5479 "L3.ml" 151 5388 5480
type(
  'e1
)
ident(
  int_ref s "L3.ml" 151 5388 5404 "L3.ml" 151 5388 5405
)
"L3.ml" 151 5388 5408 "L3.ml" 151 5388 5480
call(
  tail
)
type(
  't1 Monad.Checked.t
)
"L3.ml" 151 5388 5404 "L3.ml" 151 5388 5480
type(
  'e1 -> 't1 Monad.Checked.t
)
"L3.ml" 151 5388 5401 "L3.ml" 151 5388 5480
type(
  'v1 -> 'e1 -> 't1 Monad.Checked.t
)
"L3.ml" 152 5481 5489 "L3.ml" 152 5481 5498
type(
  'v1 ->
  ('v1 -> 'f1 -> ('u1 * 'd1) Monad.Checked.t) ->
  (('e1 -> 't1 Monad.Checked.t) -> 'e1 -> 't1 Monad.Checked.t) ->
  'e1 -> 't1 Monad.Checked.t
)
ident(
  def statement "L3.ml" 146 5220 5224 "L3.ml" 174 6374 6379
)
"L3.ml" 152 5481 5499 "L3.ml" 152 5481 5501
type(
  'v1
)
ident(
  def ts "L3.ml" 152 5481 5502 "L3.ml" 171 6257 6264
)
"L3.ml" 152 5481 5502 "L3.ml" 152 5481 5512
type(
  'v1 -> 'f1 -> ('u1 * 'd1) Monad.Checked.t
)
ident(
  def expression "L3.ml" 153 5515 5521 "L3.ml" 171 6257 6264
)
"L3.ml" 153 5515 5521 "L3.ml" 153 5515 5543
type(
  'v1 ->
  ('f1 -> ('u1 * 'd1) Monad.Checked.t) ->
  (('e1 -> 't1 Monad.Checked.t) -> 'e1 -> 't1 Monad.Checked.t) ->
  'e1 -> 't1 Monad.Checked.t
)
ident(
  ext_ref L2.Typecheck.statement
)
"L3.ml" 153 5515 5544 "L3.ml" 153 5515 5546
type(
  'v1
)
ident(
  int_ref ts "L3.ml" 152 5481 5499 "L3.ml" 152 5481 5501
)
"L3.ml" 153 5515 5548 "L3.ml" 153 5515 5558
type(
  'v1 -> 'f1 -> ('u1 * 'd1) Monad.Checked.t
)
ident(
  int_ref expression "L3.ml" 152 5481 5502 "L3.ml" 152 5481 5512
)
"L3.ml" 153 5515 5559 "L3.ml" 153 5515 5561
type(
  'v1
)
ident(
  int_ref ts "L3.ml" 152 5481 5499 "L3.ml" 152 5481 5501
)
"L3.ml" 153 5515 5547 "L3.ml" 153 5515 5562
call(
  stack
)
type(
  'f1 -> ('u1 * 'd1) Monad.Checked.t
)
"L3.ml" 153 5515 5521 "L3.ml" 153 5515 5562
call(
  stack
)
type(
  (('e1 -> 't1 Monad.Checked.t) -> 'e1 -> 't1 Monad.Checked.t) ->
  'e1 -> 't1 Monad.Checked.t
)
"L3.ml" 154 5566 5577 "L3.ml" 154 5566 5580
type(
  ((('e1 -> 't1 Monad.Checked.t) -> 'e1 -> 't1 Monad.Checked.t) ->
   'e1 -> 't1 Monad.Checked.t) ->
  'e1 -> 't1 Monad.Checked.t
)
ident(
  def ext "L3.ml" 154 5566 5584 "L3.ml" 170 6211 6256
)
"L3.ml" 155 5593 5609 "L3.ml" 155 5593 5613
type(
  'p1
)
ident(
  def name "L3.ml" 156 5649 5661 "L3.ml" 169 6154 6210
)
"L3.ml" 155 5593 5615 "L3.ml" 155 5593 5620
type(
  'f1 list
)
ident(
  def aargs "L3.ml" 156 5649 5661 "L3.ml" 169 6154 6210
)
"L3.ml" 155 5593 5629 "L3.ml" 155 5593 5630
type(
  'q1
)
"L3.ml" 155 5593 5632 "L3.ml" 155 5593 5637
type(
  ('r1 * 's1 * 'd1) list
)
ident(
  def fargs "L3.ml" 156 5649 5661 "L3.ml" 169 6154 6210
)
"L3.ml" 155 5593 5629 "L3.ml" 155 5593 5637
type(
  'q1 * ('r1 * 's1 * 'd1) list
)
"L3.ml" 155 5593 5622 "L3.ml" 155 5593 5638
type(
  [> `Proc of 'q1 * ('r1 * 's1 * 'd1) list ] as 'w1
)
"L3.ml" 155 5593 5609 "L3.ml" 155 5593 5638
type(
  'p1 * 'f1 list * 'w1
)
"L3.ml" 155 5593 5609 "L3.ml" 155 5593 5643
type(
  'p1 * 'f1 list * 'w1
)
ident(
  def p "L3.ml" 156 5649 5661 "L3.ml" 169 6154 6210
)
"L3.ml" 155 5593 5602 "L3.ml" 155 5593 5644
type(
  'e1
)
"L3.ml" 156 5649 5661 "L3.ml" 156 5649 5665
type(
  ('u1 * 'd1, Ostap.Msg.t) Checked.t list ->
  (('u1 * 'd1) list, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.list
)
"L3.ml" 157 5668 5682 "L3.ml" 157 5668 5690
type(
  (('r1 * 's1 * 'd1) * 'f1 -> ('u1 * 'd1, Ostap.Msg.t) Checked.t) ->
  (('r1 * 's1 * 'd1) * 'f1) list -> ('u1 * 'd1, Ostap.Msg.t) Checked.t list
)
ident(
  ext_ref List.map
)
"L3.ml" 158 5692 5715 "L3.ml" 158 5692 5716
type(
  'r1
)
"L3.ml" 158 5692 5718 "L3.ml" 158 5692 5722
type(
  's1
)
ident(
  def farg "L3.ml" 159 5739 5758 "L3.ml" 166 6071 6091
)
"L3.ml" 158 5692 5724 "L3.ml" 158 5692 5727
type(
  'd1
)
ident(
  def typ "L3.ml" 159 5739 5758 "L3.ml" 166 6071 6091
)
"L3.ml" 158 5692 5715 "L3.ml" 158 5692 5727
type(
  'r1 * 's1 * 'd1
)
"L3.ml" 158 5692 5730 "L3.ml" 158 5692 5733
type(
  'f1
)
ident(
  def arg "L3.ml" 159 5739 5758 "L3.ml" 166 6071 6091
)
"L3.ml" 158 5692 5714 "L3.ml" 158 5692 5733
type(
  ('r1 * 's1 * 'd1) * 'f1
)
"L3.ml" 159 5739 5758 "L3.ml" 159 5739 5768
type(
  'v1 -> 'f1 -> ('u1 * 'd1) Monad.Checked.t
)
ident(
  int_ref expression "L3.ml" 152 5481 5502 "L3.ml" 152 5481 5512
)
"L3.ml" 159 5739 5769 "L3.ml" 159 5739 5771
type(
  'v1
)
ident(
  int_ref ts "L3.ml" 152 5481 5499 "L3.ml" 152 5481 5501
)
"L3.ml" 159 5739 5772 "L3.ml" 159 5739 5775
type(
  'f1
)
ident(
  int_ref arg "L3.ml" 158 5692 5730 "L3.ml" 158 5692 5733
)
"L3.ml" 159 5739 5758 "L3.ml" 159 5739 5775
call(
  stack
)
type(
  ('u1 * 'd1) Monad.Checked.t
)
"L3.ml" 160 5783 5809 "L3.ml" 160 5783 5810
type(
  'u1
)
ident(
  def x "L3.ml" 161 5826 5848 "L3.ml" 165 6042 6070
)
"L3.ml" 160 5783 5812 "L3.ml" 160 5783 5813
type(
  'd1
)
ident(
  def t "L3.ml" 161 5826 5848 "L3.ml" 165 6042 6070
)
"L3.ml" 160 5783 5809 "L3.ml" 160 5783 5813
type(
  'u1 * 'd1
)
"L3.ml" 160 5783 5808 "L3.ml" 160 5783 5821
type(
  'u1 * 'd1
)
ident(
  def arg "L3.ml" 161 5826 5848 "L3.ml" 165 6042 6070
)
"L3.ml" 161 5826 5851 "L3.ml" 161 5826 5853
type(
  'v1
)
ident(
  int_ref ts "L3.ml" 152 5481 5499 "L3.ml" 152 5481 5501
)
"L3.ml" 161 5826 5851 "L3.ml" 161 5826 5859
call(
  stack
)
type(
  'd1 -> 'd1 -> bool
)
"L3.ml" 161 5826 5860 "L3.ml" 161 5826 5863
type(
  'd1
)
ident(
  int_ref typ "L3.ml" 158 5692 5724 "L3.ml" 158 5692 5727
)
"L3.ml" 161 5826 5864 "L3.ml" 161 5826 5865
type(
  'd1
)
ident(
  int_ref t "L3.ml" 160 5783 5812 "L3.ml" 160 5783 5813
)
"L3.ml" 161 5826 5851 "L3.ml" 161 5826 5865
type(
  bool
)
"L3.ml" 162 5866 5896 "L3.ml" 162 5866 5899
type(
  'u1 * 'd1
)
ident(
  int_ref arg "L3.ml" 160 5783 5808 "L3.ml" 160 5783 5821
)
"L3.ml" 162 5866 5893 "L3.ml" 162 5866 5899
call(
  tail
)
type(
  ('u1 * 'd1, Ostap.Msg.t) Checked.t
)
type(
  'u1 * 'd1 -> ('u1 * 'd1, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.( !! )
)
"L3.ml" 163 5900 5933 "L3.ml" 163 5900 5937
type(
  string -> string array -> Ostap.Msg.Locator.t -> Ostap.Msg.t
)
ident(
  ext_ref Ostap.Msg.make
)
"L3.ml" 163 5900 5938 "L3.ml" 163 5900 5982
type(
  string
)
"L3.ml" 164 5984 6015 "L3.ml" 164 5984 6017
type(
  'v1
)
ident(
  int_ref ts "L3.ml" 152 5481 5499 "L3.ml" 152 5481 5501
)
"L3.ml" 164 5984 6015 "L3.ml" 164 5984 6024
call(
  stack
)
type(
  'd1 -> string
)
"L3.ml" 164 5984 6025 "L3.ml" 164 5984 6028
type(
  'd1
)
ident(
  int_ref typ "L3.ml" 158 5692 5724 "L3.ml" 158 5692 5727
)
"L3.ml" 164 5984 6015 "L3.ml" 164 5984 6028
type(
  string
)
"L3.ml" 164 5984 6013 "L3.ml" 164 5984 6030
type(
  string array
)
"L3.ml" 164 5984 6032 "L3.ml" 164 5984 6038
type(
  'u1 -> Ostap.Msg.Locator.t
)
ident(
  ext_ref Common.locate
)
"L3.ml" 164 5984 6039 "L3.ml" 164 5984 6040
type(
  'u1
)
ident(
  int_ref x "L3.ml" 160 5783 5809 "L3.ml" 160 5783 5810
)
"L3.ml" 164 5984 6031 "L3.ml" 164 5984 6041
call(
  stack
)
type(
  Ostap.Msg.Locator.t
)
"L3.ml" 163 5900 5933 "L3.ml" 164 5984 6041
call(
  stack
)
type(
  Ostap.Msg.t
)
"L3.ml" 163 5900 5932 "L3.ml" 165 6042 6070
type(
  Ostap.Msg.t list
)
type(
  Ostap.Msg.t list
)
"L3.ml" 163 5900 5927 "L3.ml" 165 6042 6070
type(
  ('u1 * 'd1, Ostap.Msg.t) Checked.t
)
"L3.ml" 161 5826 5848 "L3.ml" 165 6042 6070
type(
  ('u1 * 'd1, Ostap.Msg.t) Checked.t
)
"L3.ml" 160 5783 5802 "L3.ml" 166 6071 6091
type(
  'u1 * 'd1 -> ('u1 * 'd1, Ostap.Msg.t) Checked.t
)
"L3.ml" 159 5739 5758 "L3.ml" 166 6071 6091
call(
  tail
)
type(
  ('u1 * 'd1, Ostap.Msg.t) Checked.t
)
type(
  ('u1 * 'd1) Monad.Checked.t ->
  ('u1 * 'd1 -> ('u1 * 'd1, Ostap.Msg.t) Checked.t) ->
  ('u1 * 'd1, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Checked.( -?->> )
)
"L3.ml" 158 5692 5708 "L3.ml" 167 6092 6109
type(
  ('r1 * 's1 * 'd1) * 'f1 -> ('u1 * 'd1, Ostap.Msg.t) Checked.t
)
"L3.ml" 168 6111 6128 "L3.ml" 168 6111 6140
type(
  ('r1 * 's1 * 'd1) list -> 'f1 list -> (('r1 * 's1 * 'd1) * 'f1) list
)
ident(
  ext_ref List.combine
)
"L3.ml" 168 6111 6141 "L3.ml" 168 6111 6146
type(
  ('r1 * 's1 * 'd1) list
)
ident(
  int_ref fargs "L3.ml" 155 5593 5632 "L3.ml" 155 5593 5637
)
"L3.ml" 168 6111 6147 "L3.ml" 168 6111 6152
type(
  'f1 list
)
ident(
  int_ref aargs "L3.ml" 155 5593 5615 "L3.ml" 155 5593 5620
)
"L3.ml" 168 6111 6127 "L3.ml" 168 6111 6153
call(
  stack
)
type(
  (('r1 * 's1 * 'd1) * 'f1) list
)
"L3.ml" 156 5649 5666 "L3.ml" 169 6154 6167
call(
  stack
)
type(
  ('u1 * 'd1, Ostap.Msg.t) Checked.t list
)
"L3.ml" 156 5649 5661 "L3.ml" 169 6154 6167
call(
  stack
)
type(
  (('u1 * 'd1) list, Ostap.Msg.t) Checked.t
)
"L3.ml" 169 6154 6178 "L3.ml" 169 6154 6183
type(
  ('u1 * 'd1) list
)
ident(
  def aargs "L3.ml" 169 6154 6187 "L3.ml" 169 6154 6209
)
"L3.ml" 169 6154 6194 "L3.ml" 169 6154 6198
type(
  'p1
)
ident(
  int_ref name "L3.ml" 155 5593 5609 "L3.ml" 155 5593 5613
)
"L3.ml" 169 6154 6200 "L3.ml" 169 6154 6205
type(
  ('u1 * 'd1) list
)
ident(
  int_ref aargs "L3.ml" 169 6154 6178 "L3.ml" 169 6154 6183
)
"L3.ml" 169 6154 6207 "L3.ml" 169 6154 6208
type(
  'p1 * 'f1 list * ([> `Proc of 'q1 * ('r1 * 's1 * 'd1) list ] as 'x1)
)
ident(
  int_ref p "L3.ml" 155 5593 5609 "L3.ml" 155 5593 5643
)
"L3.ml" 169 6154 6193 "L3.ml" 169 6154 6209
type(
  'p1 * ('u1 * 'd1) list * ('p1 * 'f1 list * 'x1)
)
"L3.ml" 169 6154 6187 "L3.ml" 169 6154 6209
type(
  't1
)
"L3.ml" 169 6154 6173 "L3.ml" 169 6154 6210
type(
  ('u1 * 'd1) list -> 't1
)
"L3.ml" 156 5649 5661 "L3.ml" 169 6154 6210
call(
  tail
)
type(
  't1 Monad.Checked.t
)
type(
  (('u1 * 'd1) list, Ostap.Msg.t) Checked.t ->
  (('u1 * 'd1) list -> 't1) -> 't1 Monad.Checked.t
)
ident(
  ext_ref Checked.( -?-> )
)
"L3.ml" 170 6211 6220 "L3.ml" 170 6211 6221
type(
  'e1
)
ident(
  def s "L3.ml" 170 6211 6225 "L3.ml" 170 6211 6256
)
"L3.ml" 170 6211 6225 "L3.ml" 170 6211 6228
type(
  ((('e1 -> 't1 Monad.Checked.t) -> 'e1 -> 't1 Monad.Checked.t) ->
   'e1 -> 't1 Monad.Checked.t) ->
  'e1 -> 't1 Monad.Checked.t
)
ident(
  int_ref ext "L3.ml" 154 5566 5577 "L3.ml" 154 5566 5580
)
"L3.ml" 170 6211 6230 "L3.ml" 170 6211 6239
type(
  'v1 ->
  ('v1 -> 'f1 -> ('u1 * 'd1) Monad.Checked.t) ->
  (('e1 -> 't1 Monad.Checked.t) -> 'e1 -> 't1 Monad.Checked.t) ->
  'e1 -> 't1 Monad.Checked.t
)
ident(
  int_ref statement "L3.ml" 152 5481 5489 "L3.ml" 152 5481 5498
)
"L3.ml" 170 6211 6240 "L3.ml" 170 6211 6242
type(
  'v1
)
ident(
  int_ref ts "L3.ml" 152 5481 5499 "L3.ml" 152 5481 5501
)
"L3.ml" 170 6211 6243 "L3.ml" 170 6211 6253
type(
  'v1 -> 'f1 -> ('u1 * 'd1) Monad.Checked.t
)
ident(
  int_ref expression "L3.ml" 152 5481 5502 "L3.ml" 152 5481 5512
)
"L3.ml" 170 6211 6229 "L3.ml" 170 6211 6254
call(
  stack
)
type(
  (('e1 -> 't1 Monad.Checked.t) -> 'e1 -> 't1 Monad.Checked.t) ->
  'e1 -> 't1 Monad.Checked.t
)
"L3.ml" 170 6211 6255 "L3.ml" 170 6211 6256
type(
  'e1
)
ident(
  int_ref s "L3.ml" 170 6211 6220 "L3.ml" 170 6211 6221
)
"L3.ml" 170 6211 6225 "L3.ml" 170 6211 6256
call(
  tail
)
type(
  't1 Monad.Checked.t
)
"L3.ml" 154 5566 5584 "L3.ml" 170 6211 6256
type(
  'e1 -> 't1 Monad.Checked.t
)
"L3.ml" 154 5566 5572 "L3.ml" 171 6257 6264
type(
  (((('e1 -> 't1 Monad.Checked.t) -> 'e1 -> 't1 Monad.Checked.t) ->
    'e1 -> 't1 Monad.Checked.t) ->
   'e1 -> 't1 Monad.Checked.t) ->
  'e1 -> 't1 Monad.Checked.t
)
"L3.ml" 153 5515 5521 "L3.ml" 171 6257 6264
call(
  tail
)
type(
  (('e1 -> 't1 Monad.Checked.t) -> 'e1 -> 't1 Monad.Checked.t) ->
  'e1 -> 't1 Monad.Checked.t
)
type(
  ((('e1 -> 't1 Monad.Checked.t) -> 'e1 -> 't1 Monad.Checked.t) ->
   'e1 -> 't1 Monad.Checked.t) ->
  ((((('e1 -> 't1 Monad.Checked.t) -> 'e1 -> 't1 Monad.Checked.t) ->
     'e1 -> 't1 Monad.Checked.t) ->
    'e1 -> 't1 Monad.Checked.t) ->
   'e1 -> 't1 Monad.Checked.t) ->
  (('e1 -> 't1 Monad.Checked.t) -> 'e1 -> 't1 Monad.Checked.t) ->
  'e1 -> 't1 Monad.Checked.t
)
ident(
  ext_ref Common.( ++ )
)
"L3.ml" 152 5481 5502 "L3.ml" 171 6257 6264
type(
  ('v1 -> 'f1 -> ('u1 * 'd1) Monad.Checked.t) ->
  (('e1 -> 't1 Monad.Checked.t) -> 'e1 -> 't1 Monad.Checked.t) ->
  'e1 -> 't1 Monad.Checked.t
)
"L3.ml" 152 5481 5499 "L3.ml" 171 6257 6264
type(
  'v1 ->
  ('v1 -> 'f1 -> ('u1 * 'd1) Monad.Checked.t) ->
  (('e1 -> 't1 Monad.Checked.t) -> 'e1 -> 't1 Monad.Checked.t) ->
  'e1 -> 't1 Monad.Checked.t
)
"L3.ml" 173 6274 6282 "L3.ml" 173 6274 6289
type(
  'y1 *
  ((('a2 *
     ([> `Binop of
           [> `And | `Eq | `Ge | `Gt | `Le | `Lt | `Ne | `Or ] * 'b2 * 'b2
       | `Const of [< `False | `Literal of 'c2 | `True ]
       | `Ident of
           'd2 *
           [> `Const of [> `Literal of 'e2 ]
            | `Var of
                'f2 * ([ `Bool | `Int | `User of string * 'h2 * 'g2 ] as 'g2) ]
       | `Unop of [< `Neg | `Not ] * 'b2 ]
      as 'b2))
    list * 'i2 * 'j2) *
   ('k2 * 'l2 * 'z1 *
    ([> `Assign of
          ([> `Binop of
                ([> `And | `Eq | `Ge | `Gt | `Le | `Lt | `Ne | `Or ] as 'o2) *
                'n2 * 'n2
            | `Const of [< `False | `Literal of 'q2 | `True ] as 'p2
            | `Ident of
                'r2 *
                [> `Const of [> `Literal of 't2 ] as 's2
                 | `Param of 'u2 * 'g2
                 | `VParam of 'v2 * 'g2
                 | `Var of 'w2 * 'g2 ]
            | `Unop of [< `Neg | `Not ] * 'n2 ]
           as 'n2) *
          'n2
      | `Call of 'x2 * 'n2 list * [> `Proc of 'y2 * ('z2 * 'a3 * 'g2) list ]
      | `Case of
          'n2 *
          ([< `Atom of 'n2 | `Interval of 'n2 * 'n2 ] list * 'm2 list) list *
          'm2 list
      | `For of 'n2 * 'n2 * 'n2 * 'n2 option * 'm2 list
      | `If of ('n2 * 'm2 list) list * 'm2 list
      | `While of 'n2 * 'm2 list ]
     as 'm2)
    list)
   list as 'z1) *
  ([> `Assign of
        ([> `Binop of
              ([> `And | `Eq | `Ge | `Gt | `Le | `Lt | `Ne | `Or ] as 'd3) *
              'c3 * 'c3
          | `Const of [< `False | `Literal of 'f3 | `True ] as 'e3
          | `Ident of
              'g3 *
              [> `Const of [> `Literal of 'i3 ] as 'h3
               | `Param of
                   'j3 *
                   ([ `Bool | `Int | `User of string * 'l3 * 'k3 ] as 'k3)
               | `VParam of 'm3 * 'k3
               | `Var of 'n3 * 'k3 ]
          | `Unop of [< `Neg | `Not ] * 'c3 ]
         as 'c3) *
        'c3
    | `Call of 'o3 * 'c3 list * [> `Proc of 'p3 * ('q3 * 'r3 * 'k3) list ]
    | `Case of
        'c3 *
        ([< `Atom of 'c3 | `Interval of 'c3 * 'c3 ] list * 'b3 list) list *
        'b3 list
    | `For of 'c3 * 'c3 * 'c3 * 'c3 option * 'b3 list
    | `If of ('c3 * 'b3 list) list * 'b3 list
    | `While of 'c3 * 'b3 list ]
   as 'b3)
  list ->
  ('y1 *
   ((('a2 * 'b2) list * 'i2 * 'j2) *
    ('k2 * 'l2 * 's3 *
     ([> `Assign of
           (([> `Binop of 'o2 * ('u3 * 'g2) * ('u3 * 'g2)
              | `Const of 'p2
              | `Ident of
                  'r2 *
                  [> `Const of 's2
                   | `Param of 'u2 * 'g2
                   | `VParam of 'v2 * 'g2
                   | `Var of 'w2 * 'g2 ]
              | `Unop of [> `Neg | `Not ] * ('u3 * 'g2) ]
             as 'u3) *
            'g2) *
           ('u3 * 'g2)
       | `Call of
           'x2 * ('u3 * 'g2) list *
           ('x2 * 'n2 list * [> `Proc of 'y2 * ('z2 * 'a3 * 'g2) list ])
       | `Case of
           ('u3 * 'g2) *
           ([ `Atom of 'u3 * 'g2 | `Interval of ('u3 * 'g2) * ('u3 * 'g2) ]
            list * 't3 list)
           list * 't3 list
       | `For of
           ('u3 * 'g2) * ('u3 * 'g2) * ('u3 * 'g2) * ('u3 * 'g2) option *
           't3 list
       | `If of (('u3 * 'g2) * 't3 list) list * 't3 list
       | `While of ('u3 * 'g2) * 't3 list ]
      as 't3)
     list)
    list as 's3) *
   ([> `Assign of
         (([> `Binop of 'd3 * ('w3 * 'k3) * ('w3 * 'k3)
            | `Const of 'e3
            | `Ident of
                'g3 *
                [> `Const of 'h3
                 | `Param of 'j3 * 'k3
                 | `VParam of 'm3 * 'k3
                 | `Var of 'n3 * 'k3 ]
            | `Unop of [> `Neg | `Not ] * ('w3 * 'k3) ]
           as 'w3) *
          'k3) *
         ('w3 * 'k3)
     | `Call of
         'o3 * ('w3 * 'k3) list *
         ('o3 * 'c3 list * [> `Proc of 'p3 * ('q3 * 'r3 * 'k3) list ])
     | `Case of
         ('w3 * 'k3) *
         ([ `Atom of 'w3 * 'k3 | `Interval of ('w3 * 'k3) * ('w3 * 'k3) ]
          list * 'v3 list)
         list * 'v3 list
     | `For of
         ('w3 * 'k3) * ('w3 * 'k3) * ('w3 * 'k3) * ('w3 * 'k3) option *
         'v3 list
     | `If of (('w3 * 'k3) * 'v3 list) list * 'v3 list
     | `While of ('w3 * 'k3) * 'v3 list ]
    as 'v3)
   list, Ostap.Msg.t)
  Checked.t
)
ident(
  def program "L3.ml" 173 6274 6373 "L3.ml" 174 6374 6379
)
"L3.ml" 173 6274 6290 "L3.ml" 173 6274 6291
type(
  'y1 * 'z1 * 'b3 list
)
ident(
  def m "L3.ml" 173 6274 6294 "L3.ml" 173 6274 6373
)
"L3.ml" 173 6274 6294 "L3.ml" 173 6274 6310
type(
  ('z1 -> ('s3, Ostap.Msg.t) Checked.t) ->
  ('b3 -> 'v3 Monad.Checked.t) ->
  'y1 * 'z1 * 'b3 list -> ('y1 * 's3 * 'v3 list, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref Module.typecheck
)
"L3.ml" 173 6274 6312 "L3.ml" 173 6274 6324
type(
  < equal : 'g2 -> 'g2 -> bool; primitive : 'g2 -> bool;
    string : 'g2 -> string > ->
  (< equal : 'g2 -> 'g2 -> bool; primitive : 'g2 -> bool;
     string : 'g2 -> string > ->
   'm2 -> 't3 Monad.Checked.t) ->
  'z1 -> ('s3, Ostap.Msg.t) Checked.t
)
ident(
  int_ref declarations "L3.ml" 146 5220 5232 "L3.ml" 146 5220 5244
)
"L3.ml" 173 6274 6325 "L3.ml" 173 6274 6341
type(
  < equal : 'g2 -> 'g2 -> bool; primitive : 'g2 -> bool;
    string : 'g2 -> string >
)
ident(
  ext_ref PrimitiveType.ts
)
"L3.ml" 173 6274 6342 "L3.ml" 173 6274 6346
type(
  < equal : 'g2 -> 'g2 -> bool; primitive : 'g2 -> bool;
    string : 'g2 -> string > ->
  'm2 -> 't3 Monad.Checked.t
)
ident(
  int_ref stmt "L3.ml" 151 5388 5396 "L3.ml" 151 5388 5400
)
"L3.ml" 173 6274 6311 "L3.ml" 173 6274 6347
call(
  stack
)
type(
  'z1 -> ('s3, Ostap.Msg.t) Checked.t
)
"L3.ml" 173 6274 6349 "L3.ml" 173 6274 6353
type(
  < equal : 'k3 -> 'k3 -> bool; primitive : 'k3 -> bool;
    string : 'k3 -> string > ->
  'b3 -> 'v3 Monad.Checked.t
)
ident(
  int_ref stmt "L3.ml" 151 5388 5396 "L3.ml" 151 5388 5400
)
"L3.ml" 173 6274 6354 "L3.ml" 173 6274 6370
type(
  < equal : 'k3 -> 'k3 -> bool; primitive : 'k3 -> bool;
    string : 'k3 -> string >
)
ident(
  ext_ref PrimitiveType.ts
)
"L3.ml" 173 6274 6348 "L3.ml" 173 6274 6371
call(
  stack
)
type(
  'b3 -> 'v3 Monad.Checked.t
)
"L3.ml" 173 6274 6372 "L3.ml" 173 6274 6373
type(
  'y1 * 'z1 * 'b3 list
)
ident(
  int_ref m "L3.ml" 173 6274 6290 "L3.ml" 173 6274 6291
)
"L3.ml" 173 6274 6294 "L3.ml" 173 6274 6373
call(
  tail
)
type(
  ('y1 * 's3 * 'v3 list, Ostap.Msg.t) Checked.t
)
"L3.ml" 173 6274 6290 "L3.ml" 173 6274 6373
type(
  'y1 * 'z1 * 'b3 list -> ('y1 * 's3 * 'v3 list, Ostap.Msg.t) Checked.t
)
"L3.ml" 178 6471 6475 "L3.ml" 178 6471 6478
type(
  string ->
  < generate : unit -> (string * string, Ostap.Msg.t) Checked.t;
    parse : unit -> (unit, Ostap.Msg.t) Checked.t;
    print : unit -> (string, Ostap.Msg.t) Checked.t;
    resolve : unit -> (unit, Ostap.Msg.t) Checked.t;
    typecheck : unit -> ('a -> unit, Ostap.Msg.t) Checked.t >
)
ident(
  def top "L3.ml" 178 6471 6574 "L3.ml" 1 0 -1
)
"L3.ml" 178 6471 6479 "L3.ml" 178 6471 6485
type(
  string
)
ident(
  def source "L3.ml" 178 6471 6488 "L3.ml" 178 6471 6574
)
"L3.ml" 178 6471 6488 "L3.ml" 178 6471 6500
type(
  (Lexer.t ->
   (Lexer.t,
    String.t *
    (((String.t *
       (_[> `Binop of
              [ `Add
              | `And
              | `Div
              | `Eq
              | `Ge
              | `Gt
              | `Le
              | `Lt
              | `Mod
              | `Mul
              | `Ne
              | `Or
              | `Sub ] * 'c * 'c
          | `Const of
              [ `False | `Literal of int Monad.Id.t Monad.Id.t | `True ]
          | `Ident of String.t
          | `Unop of [ `Neg | `Not ] * 'c ]
        as 'c))
      list *
      (String.t * (_[< `Bool | `Int | `User of String.t > `User ] as 'd))
      list * (String.t list * 'd) list) *
     (String.t * ([ `Val | `Var ] * String.t * 'd) list * 'b *
      (_[> `Assign of
             (_[> `Binop of
                    [ `Add
                    | `And
                    | `Div
                    | `Eq
                    | `Ge
                    | `Gt
                    | `Le
                    | `Lt
                    | `Mod
                    | `Mul
                    | `Ne
                    | `Or
                    | `Sub ] * 'f * 'f
                | `Const of
                    [ `False | `Literal of int Monad.Id.t Monad.Id.t | `True ]
                | `Ident of String.t
                | `Unop of [ `Neg | `Not ] * 'f ]
              as 'f) *
             'f
         | `Call of String.t * 'f list
         | `Case of
             'f *
             ([ `Atom of 'f | `Interval of 'f * 'f ] list * 'e list) list *
             'e list
         | `For of 'f * 'f * 'f * 'f option * 'e list
         | `If of ('f * 'e list) list * 'e list
         | `While of 'f * 'e list ]
       as 'e)
      list)
     list as 'b) *
    'e list, Ostap.Reason.t)
   Ostap.Combinators.result) *
  (String.t * 'b * 'e list -> Ostap.Pretty.printer) *
  (String.t * 'b * 'e list ->
   ((String.t *
     (((String.t *
        (_[> `Binop of
               [ `Add
               | `And
               | `Div
               | `Eq
               | `Ge
               | `Gt
               | `Le
               | `Lt
               | `Mod
               | `Mul
               | `Ne
               | `Or
               | `Sub ] * 'h * 'h
           | `Const of
               [ `False | `Literal of int Monad.Id.t Monad.Id.t | `True ]
           | `Ident of
               string *
               [ `Const of 'h
               | `Param of
                   string *
                   ([ `Bool | `Int | `User of String.t * string * 'i ] as 'i)
               | `Proc of string * ([ `Val | `Var ] * String.t * 'i) list
               | `Type of string * 'i
               | `VParam of string * 'i
               | `Var of string * 'i ]
           | `Literal of '_j
           | `Unop of [ `Neg | `Not ] * 'h ]
         as 'h))
       list * (string * 'i) list * (string list * 'i) list) *
      (string * ([ `Val | `Var ] * string * 'i) list * 'g *
       (_[> `Assign of 'h * 'h
          | `Call of
              string * 'h list *
              _[> `Proc of string * ([ `Val | `Var ] * String.t * 'i) list ]
          | `Case of
              'h *
              ([ `Atom of 'h | `Interval of 'h * 'h ] list * 'k list) list *
              'k list
          | `For of 'h * 'h * 'h * 'h option * 'k list
          | `If of ('h * 'k list) list * 'k list
          | `While of 'h * 'k list ]
        as 'k)
       list)
      list as 'g) *
     (_[> `Assign of 'h * 'h
        | `Call of
            string * 'h list *
            _[> `Proc of string * ([ `Val | `Var ] * String.t * 'i) list ]
        | `Case of
            'h *
            ([ `Atom of 'h | `Interval of 'h * 'h ] list * 'l list) list *
            'l list
        | `For of 'h * 'h * 'h * 'h option * 'l list
        | `If of ('h * 'l list) list * 'l list
        | `While of 'h * 'l list ]
      as 'l)
     list) *
    < getName : String.t -> String.t >, Ostap.Msg.t)
   Checked.t) *
  (String.t * 'g * 'l list ->
   (String.t *
    (((String.t * 'h) list * (string * 'i) list * (string list * 'i) list) *
     (string * ([ `Val | `Var ] * string * 'i) list * 'm *
      (_[> `Assign of
             ((_[> `Binop of
                     [ `Add
                     | `And
                     | `Div
                     | `Eq
                     | `Ge
                     | `Gt
                     | `Le
                     | `Lt
                     | `Mod
                     | `Mul
                     | `Ne
                     | `Or
                     | `Sub ] * ('o * 'i) * ('o * 'i)
                 | `Const of
                     [ `False | `Literal of int Monad.Id.t Monad.Id.t | `True ]
                 | `Ident of
                     string *
                     _[> `Const of 'h
                       | `Param of string * 'i
                       | `VParam of string * 'i
                       | `Var of string * 'i ]
                 | `Unop of _[> `Neg | `Not ] * ('o * 'i) ]
               as 'o) *
              'i) *
             ('o * 'i)
         | `Call of
             string * ('o * 'i) list *
             (string * 'h list *
              _[> `Proc of string * ([ `Val | `Var ] * String.t * 'i) list ])
         | `Case of
             ('o * 'i) *
             ([ `Atom of 'o * 'i | `Interval of ('o * 'i) * ('o * 'i) ] list *
              'n list)
             list * 'n list
         | `For of
             ('o * 'i) * ('o * 'i) * ('o * 'i) * ('o * 'i) option * 'n list
         | `If of (('o * 'i) * 'n list) list * 'n list
         | `While of ('o * 'i) * 'n list ]
       as 'n)
      list)
     list as 'm) *
    (_[> `Assign of
           ((_[> `Binop of
                   [ `Add
                   | `And
                   | `Div
                   | `Eq
                   | `Ge
                   | `Gt
                   | `Le
                   | `Lt
                   | `Mod
                   | `Mul
                   | `Ne
                   | `Or
                   | `Sub ] * ('q * 'i) * ('q * 'i)
               | `Const of
                   [ `False | `Literal of int Monad.Id.t Monad.Id.t | `True ]
               | `Ident of
                   string *
                   _[> `Const of 'h
                     | `Param of string * 'i
                     | `VParam of string * 'i
                     | `Var of string * 'i ]
               | `Unop of _[> `Neg | `Not ] * ('q * 'i) ]
             as 'q) *
            'i) *
           ('q * 'i)
       | `Call of
           string * ('q * 'i) list *
           (string * 'h list *
            _[> `Proc of string * ([ `Val | `Var ] * String.t * 'i) list ])
       | `Case of
           ('q * 'i) *
           ([ `Atom of 'q * 'i | `Interval of ('q * 'i) * ('q * 'i) ] list *
            'p list)
           list * 'p list
       | `For of
           ('q * 'i) * ('q * 'i) * ('q * 'i) * ('q * 'i) option * 'p list
       | `If of (('q * 'i) * 'p list) list * 'p list
       | `While of ('q * 'i) * 'p list ]
     as 'p)
    list, Ostap.Msg.t)
   Checked.t) ->
  string ->
  < generate : unit -> (string * string, Ostap.Msg.t) Checked.t;
    parse : unit -> (unit, Ostap.Msg.t) Checked.t;
    print : unit -> (string, Ostap.Msg.t) Checked.t;
    resolve : unit -> (unit, Ostap.Msg.t) Checked.t;
    typecheck : unit -> ('a -> unit, Ostap.Msg.t) Checked.t >
)
ident(
  ext_ref L1.toplevel0
)
"L3.ml" 178 6471 6502 "L3.ml" 178 6471 6515
type(
  Lexer.t ->
  (Lexer.t, String.t * 'b * 'e list, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  int_ref Parse.program "L3.ml" 12 197 203 "L3.ml" 21 659 734
)
"L3.ml" 178 6471 6517 "L3.ml" 178 6471 6530
type(
  String.t * 'b * 'e list -> Ostap.Pretty.printer
)
ident(
  int_ref Print.program "L3.ml" 39 1292 1300 "L3.ml" 39 1292 1307
)
"L3.ml" 178 6471 6532 "L3.ml" 178 6471 6547
type(
  String.t * 'b * 'e list ->
  ((String.t * 'g * 'l list) * < getName : String.t -> String.t >,
   Ostap.Msg.t)
  Checked.t
)
ident(
  int_ref Resolve.program "L3.ml" 128 4712 4720 "L3.ml" 128 4712 4727
)
"L3.ml" 178 6471 6549 "L3.ml" 178 6471 6566
type(
  String.t * 'g * 'l list -> (String.t * 'm * 'p list, Ostap.Msg.t) Checked.t
)
ident(
  int_ref Typecheck.program "L3.ml" 173 6274 6282 "L3.ml" 173 6274 6289
)
"L3.ml" 178 6471 6501 "L3.ml" 178 6471 6567
type(
  (Lexer.t ->
   (Lexer.t, String.t * 'b * 'e list, Ostap.Reason.t)
   Ostap.Combinators.result) *
  (String.t * 'b * 'e list -> Ostap.Pretty.printer) *
  (String.t * 'b * 'e list ->
   ((String.t * 'g * 'l list) * < getName : String.t -> String.t >,
    Ostap.Msg.t)
   Checked.t) *
  (String.t * 'g * 'l list ->
   (String.t * 'm * 'p list, Ostap.Msg.t) Checked.t)
)
"L3.ml" 178 6471 6568 "L3.ml" 178 6471 6574
type(
  string
)
ident(
  int_ref source "L3.ml" 178 6471 6479 "L3.ml" 178 6471 6485
)
"L3.ml" 178 6471 6488 "L3.ml" 178 6471 6574
call(
  tail
)
type(
  < generate : unit -> (string * string, Ostap.Msg.t) Checked.t;
    parse : unit -> (unit, Ostap.Msg.t) Checked.t;
    print : unit -> (string, Ostap.Msg.t) Checked.t;
    resolve : unit -> (unit, Ostap.Msg.t) Checked.t;
    typecheck : unit -> ('a -> unit, Ostap.Msg.t) Checked.t >
)
"L3.ml" 178 6471 6479 "L3.ml" 178 6471 6574
type(
  string ->
  < generate : unit -> (string * string, Ostap.Msg.t) Checked.t;
    parse : unit -> (unit, Ostap.Msg.t) Checked.t;
    print : unit -> (string, Ostap.Msg.t) Checked.t;
    resolve : unit -> (unit, Ostap.Msg.t) Checked.t;
    typecheck : unit -> ('a -> unit, Ostap.Msg.t) Checked.t >
)
