"L2.ml" 11 187 203 "L2.ml" 11 187 206
type(
  (< coord : 'b;
     getIDENT : ('a, Ostap.Matcher.Token.t, Ostap.Reason.t)
                Ostap.Combinators.result;
     getLITERAL : ('a, Ostap.Matcher.Token.t, Ostap.Reason.t)
                  Ostap.Combinators.result;
     loc : Ostap.Msg.Locator.t;
     look : string -> ('a, 'c, Ostap.Reason.t) Ostap.Combinators.result;
     pos : 'd;
     regexp : string ->
              string -> ('a, 'c, Ostap.Reason.t) Ostap.Combinators.result;
     skip : 'd -> 'b -> [> `Skipped of 'e * Ostap.Msg.Coord.t ]; .. >
   as 'a,
   [> `Binop of
        [> `Add
         | `And
         | `Div
         | `Eq
         | `Ge
         | `Gt
         | `Le
         | `Lt
         | `Mod
         | `Mul
         | `Ne
         | `Or
         | `Sub ] *
        'f * 'f
    | `Const of [> `False | `Literal of int | `True ]
    | `Ident of string
    | `Unop of [> `Neg | `Not ] * 'f ]
   as 'f, Ostap.Reason.t)
  Ostap.Combinators.parse
)
ident(
  def ref "L2.ml" 11 187 193 "L2.ml" 13 279 337
)
"L2.ml" 11 187 208 "L2.ml" 11 187 213
type(
  ('a,
   [> `Binop of
        [> `Add
         | `And
         | `Div
         | `Eq
         | `Ge
         | `Gt
         | `Le
         | `Lt
         | `Mod
         | `Mul
         | `Ne
         | `Or
         | `Sub ] *
        'g * 'g
    | `Const of [> `False | `Literal of int | `True ]
    | `Ident of string
    | `Unop of [> `Neg | `Not ] * 'g ]
   as 'g, Ostap.Reason.t)
  Ostap.Combinators.parse
)
ident(
  def cexpr "L2.ml" 11 187 193 "L2.ml" 13 279 337
)
"L2.ml" 11 187 215 "L2.ml" 11 187 219
type(
  ('a,
   [> `Binop of
        [> `Add
         | `And
         | `Div
         | `Eq
         | `Ge
         | `Gt
         | `Le
         | `Lt
         | `Mod
         | `Mul
         | `Ne
         | `Or
         | `Sub ] *
        'h * 'h
    | `Const of [> `False | `Literal of int | `True ]
    | `Ident of string
    | `Unop of [> `Neg | `Not ] * 'h ]
   as 'h, Ostap.Reason.t)
  Ostap.Combinators.parse
)
ident(
  def expr "L2.ml" 11 187 193 "L2.ml" 13 279 337
)
"L2.ml" 11 187 221 "L2.ml" 11 187 225
type(
  ('a,
   [> `Assign of 'f * 'h
    | `Case of
        'h * ([> `Atom of 'g | `Interval of 'g * 'g ] list * 'i list) list *
        'i list
    | `For of 'f * 'h * 'h * 'g option * 'i list
    | `If of ('h * 'i list) list * 'i list
    | `While of 'h * 'i list ]
   as 'i, Ostap.Reason.t)
  Ostap.Combinators.parse
)
ident(
  def stmt "L2.ml" 11 187 193 "L2.ml" 13 279 337
)
"L2.ml" 12 229 239 "L2.ml" 12 229 260
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  'a -> ('a, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  ext_ref SimpleStatement.parse
)
"L2.ml" 12 229 262 "L2.ml" 12 229 265
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref ref "L2.ml" 11 187 203 "L2.ml" 11 187 206
)
"L2.ml" 12 229 267 "L2.ml" 12 229 271
type(
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref expr "L2.ml" 11 187 215 "L2.ml" 11 187 219
)
"L2.ml" 12 229 273 "L2.ml" 12 229 277
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref stmt "L2.ml" 11 187 221 "L2.ml" 11 187 225
)
"L2.ml" 12 229 237 "L2.ml" 12 229 278
call(
  tail
)
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L2.ml" 12 229 237 "L2.ml" 12 229 278
)
type(
  'a
)
ident(
  def _ostap_stream "L2.ml" 12 229 237 "L2.ml" 12 229 278
)
"L2.ml" 13 279 289 "L2.ml" 13 279 312
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'g, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  'a -> ('a, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  ext_ref ExtendedStatement.parse
)
"L2.ml" 13 279 314 "L2.ml" 13 279 317
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref ref "L2.ml" 11 187 203 "L2.ml" 11 187 206
)
"L2.ml" 13 279 319 "L2.ml" 13 279 324
type(
  ('a, 'g, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref cexpr "L2.ml" 11 187 208 "L2.ml" 11 187 213
)
"L2.ml" 13 279 326 "L2.ml" 13 279 330
type(
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref expr "L2.ml" 11 187 215 "L2.ml" 11 187 219
)
"L2.ml" 13 279 332 "L2.ml" 13 279 336
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref stmt "L2.ml" 11 187 221 "L2.ml" 11 187 225
)
"L2.ml" 13 279 287 "L2.ml" 13 279 337
call(
  tail
)
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L2.ml" 13 279 287 "L2.ml" 13 279 337
)
type(
  'a
)
ident(
  def _ostap_stream "L2.ml" 13 279 287 "L2.ml" 13 279 337
)
"L2.ml" 12 229 237 "L2.ml" 13 279 337
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref Ostap.Combinators.alt
)
"L2.ml" 11 187 193 "L2.ml" 13 279 337
call(
  tail
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'g, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  'a -> ('a, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'g, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  'a -> ('a, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  'a -> ('a, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  'a -> ('a, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a -> ('a, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L2.ml" 11 187 193 "L2.ml" 13 279 337
)
type(
  'a
)
ident(
  def _ostap_stream "L2.ml" 11 187 193 "L2.ml" 13 279 337
)
"L2.ml" 14 339 354 "L2.ml" 14 339 363
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'g, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  'a -> ('a, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  int_ref statement "L2.ml" 11 187 193 "L2.ml" 15 406 476
)
"L2.ml" 14 339 364 "L2.ml" 14 339 373
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref L1.Parse.reference
)
"L2.ml" 14 339 375 "L2.ml" 14 339 385
type(
  ('a, 'g, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref L1.Parse.expression
)
"L2.ml" 14 339 387 "L2.ml" 14 339 397
type(
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref L1.Parse.expression
)
"L2.ml" 14 339 399 "L2.ml" 14 339 403
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref stmt "L2.ml" 11 187 193 "L2.ml" 15 406 476
)
"L2.ml" 14 339 354 "L2.ml" 14 339 404
call(
  tail
)
type(
  'a -> ('a, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L2.ml" 14 339 354 "L2.ml" 14 339 404
)
type(
  'a
)
ident(
  def _ostap_stream "L2.ml" 14 339 354 "L2.ml" 14 339 404
)
"L2.ml" 14 339 345 "L2.ml" 14 339 404
type(
  'a -> ('a, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L2.ml" 14 339 345 "L2.ml" 14 339 404
)
type(
  'a
)
ident(
  def _ostap_stream "L2.ml" 14 339 345 "L2.ml" 14 339 404
)
"L2.ml" 15 406 423 "L2.ml" 15 406 435
type(
  ('a,
   (string *
    ([> `Binop of
          [> `Add
           | `And
           | `Div
           | `Eq
           | `Ge
           | `Gt
           | `Le
           | `Lt
           | `Mod
           | `Mul
           | `Ne
           | `Or
           | `Sub ] *
          'j * 'j
      | `Const of [> `False | `Literal of int | `True ]
      | `Ident of string
      | `Unop of [> `Neg | `Not ] * 'j ]
     as 'j))
   list * (string * ([> `User of string ] as 'k)) list *
   (string list * 'k) list, Ostap.Reason.t)
  Ostap.Combinators.parse ->
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  'a ->
  ('a,
   string *
   ((string * 'j) list * (string * 'k) list * (string list * 'k) list) *
   'i list, Ostap.Reason.t)
  Ostap.Combinators.result
)
ident(
  ext_ref Module.parse
)
"L2.ml" 15 406 437 "L2.ml" 15 406 449
type(
  ('a, 'k, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, (string * 'j) list * (string * 'k) list * (string list * 'k) list,
   Ostap.Reason.t)
  Ostap.Combinators.parse
)
ident(
  ext_ref L1.Parse.declarations
)
"L2.ml" 15 406 450 "L2.ml" 15 406 469
type(
  ('a, 'k, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  ext_ref PrimitiveType.parse
)
"L2.ml" 15 406 437 "L2.ml" 15 406 469
call(
  stack
)
type(
  ('a, (string * 'j) list * (string * 'k) list * (string list * 'k) list,
   Ostap.Reason.t)
  Ostap.Combinators.parse
)
"L2.ml" 15 406 471 "L2.ml" 15 406 475
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  int_ref stmt "L2.ml" 11 187 193 "L2.ml" 15 406 476
)
"L2.ml" 15 406 421 "L2.ml" 15 406 476
call(
  tail
)
type(
  'a ->
  ('a,
   string *
   ((string * 'j) list * (string * 'k) list * (string list * 'k) list) *
   'i list, Ostap.Reason.t)
  Ostap.Combinators.result
)
type(
  ('a,
   string *
   ((string * 'j) list * (string * 'k) list * (string list * 'k) list) *
   'i list, Ostap.Reason.t)
  Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L2.ml" 15 406 421 "L2.ml" 15 406 476
)
type(
  'a
)
ident(
  def _ostap_stream "L2.ml" 15 406 421 "L2.ml" 15 406 476
)
"L2.ml" 15 406 412 "L2.ml" 15 406 476
type(
  'a ->
  ('a,
   string *
   ((string * 'j) list * (string * 'k) list * (string list * 'k) list) *
   'i list, Ostap.Reason.t)
  Ostap.Combinators.result
)
type(
  ('a,
   string *
   ((string * 'j) list * (string * 'k) list * (string list * 'k) list) *
   'i list, Ostap.Reason.t)
  Ostap.Combinators.result
)
type(
  'a
)
ident(
  int_ref _ostap_stream "L2.ml" 15 406 412 "L2.ml" 15 406 476
)
type(
  'a
)
ident(
  def _ostap_stream "L2.ml" 15 406 412 "L2.ml" 15 406 476
)
"L2.ml" 11 187 193 "L2.ml" 15 406 476
type(
  'a ->
  ('a,
   string *
   ((string * 'j) list * (string * 'k) list * (string list * 'k) list) *
   'i list, Ostap.Reason.t)
  Ostap.Combinators.result
)
ident(
  def program "L2.ml" 10 175 179 "L2.ml" 17 483 488
)
type(
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse
)
ident(
  def stmt "L2.ml" 10 175 179 "L2.ml" 17 483 488
)
type(
  ('a, 'f, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'g, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'h, Ostap.Reason.t) Ostap.Combinators.parse ->
  ('a, 'i, Ostap.Reason.t) Ostap.Combinators.parse ->
  'a -> ('a, 'i, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  def statement "L2.ml" 10 175 179 "L2.ml" 17 483 488
)
"L2.ml" 24 622 630 "L2.ml" 24 622 639
type(
  ('a -> Ostap.Pretty.printer Monad.Id.t) ->
  ((([> `Assign of 'a * 'a
      | `Case of
          'a *
          ([< `Atom of 'a | `Interval of 'a * 'a ] list * 'b list) list *
          'b list
      | `For of 'a * 'a * 'a * 'a option * 'b list
      | `If of ('a * 'b list) list * 'b list
      | `While of 'a * 'b list ]
     as 'b) ->
    Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  'b -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  def statement "L2.ml" 25 694 698 "L2.ml" 26 804 809
)
"L2.ml" 24 622 640 "L2.ml" 24 622 644
type(
  'a -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  def expr "L2.ml" 24 622 647 "L2.ml" 24 622 693
)
"L2.ml" 24 622 647 "L2.ml" 24 622 656
type(
  ('a -> Ostap.Pretty.printer Monad.Id.t) ->
  (('b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  'b -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref L1.Print.statement
)
"L2.ml" 24 622 657 "L2.ml" 24 622 661
type(
  'a -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref expr "L2.ml" 24 622 640 "L2.ml" 24 622 644
)
"L2.ml" 24 622 647 "L2.ml" 24 622 661
call(
  stack
)
type(
  (('b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  'b -> Ostap.Pretty.printer Monad.Id.t
)
"L2.ml" 24 622 665 "L2.ml" 24 622 688
type(
  ('a -> Ostap.Pretty.printer Monad.Id.t) ->
  (('b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  'b -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref ExtendedStatement.print
)
"L2.ml" 24 622 689 "L2.ml" 24 622 693
type(
  'a -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  int_ref expr "L2.ml" 24 622 640 "L2.ml" 24 622 644
)
"L2.ml" 24 622 665 "L2.ml" 24 622 693
call(
  stack
)
type(
  (('b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  'b -> Ostap.Pretty.printer Monad.Id.t
)
"L2.ml" 24 622 647 "L2.ml" 24 622 693
call(
  tail
)
type(
  (('b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  'b -> Ostap.Pretty.printer Monad.Id.t
)
type(
  ((('b -> Ostap.Pretty.printer Monad.Id.t) ->
    'b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  ((('b -> Ostap.Pretty.printer Monad.Id.t) ->
    'b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  (('b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  'b -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref Common.( ++ )
)
"L2.ml" 24 622 640 "L2.ml" 24 622 693
type(
  ('a -> Ostap.Pretty.printer Monad.Id.t) ->
  (('b -> Ostap.Pretty.printer Monad.Id.t) ->
   'b -> Ostap.Pretty.printer Monad.Id.t) ->
  'b -> Ostap.Pretty.printer Monad.Id.t
)
"L2.ml" 25 694 702 "L2.ml" 25 694 709
type(
  string *
  ((string *
    ([> `Binop of
          [< `Add
           | `And
           | `Div
           | `Eq
           | `Ge
           | `Gt
           | `Le
           | `Lt
           | `Mod
           | `Mul
           | `Ne
           | `Or
           | `Sub ] *
          'c * 'c
      | `Const of [< `False | `Literal of int | `True ]
      | `Ident of string
      | `Unop of [< `Neg | `Not ] * 'c ]
     as 'c))
   list * (string * ([< `Bool | `Int | `User of string ] as 'd)) list *
   (string list * 'd) list) *
  ([> `Assign of
        ([> `Binop of
              [< `Add
               | `And
               | `Div
               | `Eq
               | `Ge
               | `Gt
               | `Le
               | `Lt
               | `Mod
               | `Mul
               | `Ne
               | `Or
               | `Sub ] *
              'f * 'f
          | `Const of [< `False | `Literal of int | `True ]
          | `Ident of string
          | `Unop of [< `Neg | `Not ] * 'f ]
         as 'f) *
        'f
    | `Case of
        'f * ([< `Atom of 'f | `Interval of 'f * 'f ] list * 'e list) list *
        'e list
    | `For of 'f * 'f * 'f * 'f option * 'e list
    | `If of ('f * 'e list) list * 'e list
    | `While of 'f * 'e list ]
   as 'e)
  list -> Ostap.Pretty.printer
)
ident(
  def program "L2.ml" 25 694 803 "L2.ml" 26 804 809
)
"L2.ml" 25 694 710 "L2.ml" 25 694 711
type(
  string *
  ((string * 'c) list * (string * 'd) list * (string list * 'd) list) *
  'e list
)
ident(
  def m "L2.ml" 25 694 714 "L2.ml" 25 694 803
)
"L2.ml" 25 694 714 "L2.ml" 25 694 726
type(
  ((string * 'c) list * (string * 'd) list * (string list * 'd) list ->
   Ostap.Pretty.printer) ->
  ('e -> Ostap.Pretty.printer) ->
  string *
  ((string * 'c) list * (string * 'd) list * (string list * 'd) list) *
  'e list -> Ostap.Pretty.printer
)
ident(
  ext_ref Module.print
)
"L2.ml" 25 694 728 "L2.ml" 25 694 740
type(
  ('c -> Ostap.Pretty.printer) ->
  ('d -> Ostap.Pretty.printer) ->
  (string * 'c) list * (string * 'd) list * (string list * 'd) list ->
  Ostap.Pretty.printer
)
ident(
  ext_ref L1.Print.declarations
)
"L2.ml" 25 694 741 "L2.ml" 25 694 751
type(
  'c -> Ostap.Pretty.printer
)
ident(
  ext_ref L1.Print.expression
)
"L2.ml" 25 694 752 "L2.ml" 25 694 771
type(
  'd -> Ostap.Pretty.printer
)
ident(
  ext_ref PrimitiveType.print
)
"L2.ml" 25 694 727 "L2.ml" 25 694 772
call(
  stack
)
type(
  (string * 'c) list * (string * 'd) list * (string list * 'd) list ->
  Ostap.Pretty.printer
)
"L2.ml" 25 694 774 "L2.ml" 25 694 783
type(
  ('f -> Ostap.Pretty.printer Monad.Id.t) ->
  (('e -> Ostap.Pretty.printer Monad.Id.t) ->
   'e -> Ostap.Pretty.printer Monad.Id.t) ->
  'e -> Ostap.Pretty.printer
)
ident(
  int_ref statement "L2.ml" 24 622 630 "L2.ml" 24 622 639
)
"L2.ml" 25 694 784 "L2.ml" 25 694 794
type(
  'f -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref L1.Print.expression
)
"L2.ml" 25 694 795 "L2.ml" 25 694 800
type(
  ('e -> Ostap.Pretty.printer Monad.Id.t) ->
  'e -> Ostap.Pretty.printer Monad.Id.t
)
ident(
  ext_ref Common.apply
)
"L2.ml" 25 694 773 "L2.ml" 25 694 801
call(
  stack
)
type(
  'e -> Ostap.Pretty.printer
)
"L2.ml" 25 694 802 "L2.ml" 25 694 803
type(
  string *
  ((string * 'c) list * (string * 'd) list * (string list * 'd) list) *
  'e list
)
ident(
  int_ref m "L2.ml" 25 694 710 "L2.ml" 25 694 711
)
"L2.ml" 25 694 714 "L2.ml" 25 694 803
call(
  tail
)
type(
  Ostap.Pretty.printer
)
"L2.ml" 25 694 710 "L2.ml" 25 694 803
type(
  string *
  ((string * 'c) list * (string * 'd) list * (string list * 'd) list) *
  'e list -> Ostap.Pretty.printer
)
"L2.ml" 35 962 970 "L2.ml" 35 962 979
type(
  ('a -> 'b Monad.Checked.t) ->
  ('c -> 'd Monad.Checked.t) ->
  ('e -> 'b Monad.Checked.t) ->
  ((([> `Assign of 'a * 'e
      | `Case of
          'e *
          ([< `Atom of 'c | `Interval of 'c * 'c ] list * 'f list) list *
          'f list
      | `For of 'a * 'e * 'e * 'c option * 'f list
      | `If of ('e * 'f list) list * 'f list
      | `While of 'e * 'f list ]
     as 'f) ->
    ([> `Assign of 'b * 'b
      | `Case of
          'b *
          ([> `Atom of 'd | `Interval of 'd * 'd ] list * 'g list) list *
          'g list
      | `For of 'b * 'b * 'b * 'd option * 'g list
      | `If of ('b * 'g list) list * 'g list
      | `While of 'b * 'g list ]
     as 'g)
    Monad.Checked.t) ->
   'f -> 'g Monad.Checked.t) ->
  'f -> 'g Monad.Checked.t
)
ident(
  def statement "L2.ml" 36 1075 1079 "L2.ml" 48 1410 1415
)
"L2.ml" 35 962 980 "L2.ml" 35 962 983
type(
  'a -> 'b Monad.Checked.t
)
ident(
  def ref "L2.ml" 35 962 984 "L2.ml" 35 962 1073
)
"L2.ml" 35 962 984 "L2.ml" 35 962 989
type(
  'c -> 'd Monad.Checked.t
)
ident(
  def cexpr "L2.ml" 35 962 990 "L2.ml" 35 962 1073
)
"L2.ml" 35 962 990 "L2.ml" 35 962 994
type(
  'e -> 'b Monad.Checked.t
)
ident(
  def expr "L2.ml" 35 962 997 "L2.ml" 35 962 1073
)
"L2.ml" 35 962 997 "L2.ml" 35 962 1020
type(
  ('a -> 'b Monad.Checked.t) ->
  ('e -> 'b Monad.Checked.t) ->
  (('f -> 'g Monad.Checked.t) -> 'f -> 'g Monad.Checked.t) ->
  'f -> 'g Monad.Checked.t
)
ident(
  ext_ref SimpleStatement.resolve
)
"L2.ml" 35 962 1021 "L2.ml" 35 962 1024
type(
  'a -> 'b Monad.Checked.t
)
ident(
  int_ref ref "L2.ml" 35 962 980 "L2.ml" 35 962 983
)
"L2.ml" 35 962 1025 "L2.ml" 35 962 1029
type(
  'e -> 'b Monad.Checked.t
)
ident(
  int_ref expr "L2.ml" 35 962 990 "L2.ml" 35 962 994
)
"L2.ml" 35 962 997 "L2.ml" 35 962 1029
call(
  stack
)
type(
  (('f -> 'g Monad.Checked.t) -> 'f -> 'g Monad.Checked.t) ->
  'f -> 'g Monad.Checked.t
)
"L2.ml" 35 962 1033 "L2.ml" 35 962 1058
type(
  ('a -> 'b Monad.Checked.t) ->
  ('c -> 'd Monad.Checked.t) ->
  ('e -> 'b Monad.Checked.t) ->
  (('f -> 'g Monad.Checked.t) -> 'f -> 'g Monad.Checked.t) ->
  'f -> 'g Monad.Checked.t
)
ident(
  ext_ref ExtendedStatement.resolve
)
"L2.ml" 35 962 1059 "L2.ml" 35 962 1062
type(
  'a -> 'b Monad.Checked.t
)
ident(
  int_ref ref "L2.ml" 35 962 980 "L2.ml" 35 962 983
)
"L2.ml" 35 962 1063 "L2.ml" 35 962 1068
type(
  'c -> 'd Monad.Checked.t
)
ident(
  int_ref cexpr "L2.ml" 35 962 984 "L2.ml" 35 962 989
)
"L2.ml" 35 962 1069 "L2.ml" 35 962 1073
type(
  'e -> 'b Monad.Checked.t
)
ident(
  int_ref expr "L2.ml" 35 962 990 "L2.ml" 35 962 994
)
"L2.ml" 35 962 1033 "L2.ml" 35 962 1073
call(
  stack
)
type(
  (('f -> 'g Monad.Checked.t) -> 'f -> 'g Monad.Checked.t) ->
  'f -> 'g Monad.Checked.t
)
"L2.ml" 35 962 997 "L2.ml" 35 962 1073
call(
  tail
)
type(
  (('f -> 'g Monad.Checked.t) -> 'f -> 'g Monad.Checked.t) ->
  'f -> 'g Monad.Checked.t
)
type(
  ((('f -> 'g Monad.Checked.t) -> 'f -> 'g Monad.Checked.t) ->
   'f -> 'g Monad.Checked.t) ->
  ((('f -> 'g Monad.Checked.t) -> 'f -> 'g Monad.Checked.t) ->
   'f -> 'g Monad.Checked.t) ->
  (('f -> 'g Monad.Checked.t) -> 'f -> 'g Monad.Checked.t) ->
  'f -> 'g Monad.Checked.t
)
ident(
  ext_ref Common.( ++ )
)
"L2.ml" 35 962 990 "L2.ml" 35 962 1073
type(
  ('e -> 'b Monad.Checked.t) ->
  (('f -> 'g Monad.Checked.t) -> 'f -> 'g Monad.Checked.t) ->
  'f -> 'g Monad.Checked.t
)
"L2.ml" 35 962 984 "L2.ml" 35 962 1073
type(
  ('c -> 'd Monad.Checked.t) ->
  ('e -> 'b Monad.Checked.t) ->
  (('f -> 'g Monad.Checked.t) -> 'f -> 'g Monad.Checked.t) ->
  'f -> 'g Monad.Checked.t
)
"L2.ml" 35 962 980 "L2.ml" 35 962 1073
type(
  ('a -> 'b Monad.Checked.t) ->
  ('c -> 'd Monad.Checked.t) ->
  ('e -> 'b Monad.Checked.t) ->
  (('f -> 'g Monad.Checked.t) -> 'f -> 'g Monad.Checked.t) ->
  'f -> 'g Monad.Checked.t
)
"L2.ml" 36 1075 1083 "L2.ml" 36 1075 1090
type(
  'h *
  ((String.t *
    ([> `Binop of
          ([< `Add
            | `And
            | `Div
            | `Eq
            | `Ge
            | `Gt
            | `Le
            | `Lt
            | `Mod
            | `Mul
            | `Ne
            | `Or
            | `Sub
            > `Add `Div `Mod `Mul `Sub ]
           as 'j) *
          'i * 'i
      | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
      | `Ident of String.t
      | `Unop of [ `Neg | `Not ] * 'i ]
     as 'i))
   list * (String.t * ([< `Bool | `Int | `User of String.t ] as 'k)) list *
   (String.t list * 'k) list) *
  ([> `Assign of
        ([> `Ident of String.t ] as 'm) *
        ([> `Binop of 'j * 'n * 'n
          | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
          | `Ident of String.t
          | `Unop of [ `Neg | `Not ] * 'n ]
         as 'n)
    | `Case of
        'n *
        ([< `Atom of
              [> `Binop of 'j * 'o * 'o
               | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
               | `Ident of String.t
               | `Unop of [ `Neg | `Not ] * 'o ]
              as 'o
          | `Interval of 'o * 'o ]
         list * 'l list)
        list * 'l list
    | `For of 'm * 'n * 'n * 'o option * 'l list
    | `If of ('n * 'l list) list * 'l list
    | `While of 'n * 'l list ]
   as 'l)
  list ->
  (('h *
    ((String.t *
      ([> `Binop of 'j * 'p * 'p
        | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
        | `Ident of
            string *
            [> `Const of 'p
             | `Type of
                 string *
                 ([> `Bool | `Int | `User of String.t * string * 'q ] as 'q)
             | `Var of string * 'q ]
        | `Unop of [ `Neg | `Not ] * 'p ]
       as 'p))
     list * (string * 'q) list * (string list * 'q) list) *
    ([> `Assign of 'p * 'p
      | `Case of
          'p *
          ([> `Atom of
                [> `Const of
                     [> `False
                      | `Literal of int Monad.Id.t Monad.Id.t
                      | `True ] ]
                as 's
            | `Interval of 's * 's ]
           list * 'r list)
          list * 'r list
      | `For of 'p * 'p * 'p * 's option * 'r list
      | `If of ('p * 'r list) list * 'r list
      | `While of 'p * 'r list ]
     as 'r)
    list) *
   < getName : String.t -> String.t >, Ostap.Msg.t)
  Checked.t
)
ident(
  def program "L2.ml" 47 1368 1409 "L2.ml" 48 1410 1415
)
"L2.ml" 36 1075 1091 "L2.ml" 36 1075 1092
type(
  'h *
  ((String.t * 'i) list * (String.t * 'k) list * (String.t list * 'k) list) *
  'l list
)
ident(
  def m "L2.ml" 37 1095 1101 "L2.ml" 47 1368 1409
)
"L2.ml" 37 1095 1105 "L2.ml" 37 1095 1108
type(
  ([> `Const of 'p | `Type of string * 'q | `Var of string * 'q ] as 't)
  L1.Resolve.env
)
ident(
  def env "L2.ml" 38 1122 1128 "L2.ml" 47 1368 1409
)
"L2.ml" 37 1095 1111 "L2.ml" 37 1095 1118
type(
  't L1.Resolve.env
)
"L2.ml" 38 1122 1128 "L2.ml" 38 1122 1142
type(
  't L1.Resolve.env ->
  ('t L1.Resolve.env ->
   (String.t * 'i) list * (String.t * 'k) list * (String.t list * 'k) list ->
   (unit, Ostap.Msg.t) Checked.t *
   ((String.t * 'p) list * (string * 'q) list * (string list * 'q) list,
    Ostap.Msg.t)
   Checked.t) ->
  ('l -> 'r Monad.Checked.t) ->
  'h *
  ((String.t * 'i) list * (String.t * 'k) list * (String.t list * 'k) list) *
  'l list ->
  ('h *
   ((String.t * 'p) list * (string * 'q) list * (string list * 'q) list) *
   'r list, Ostap.Msg.t)
  Checked.t
)
ident(
  ext_ref Module.resolve
)
"L2.ml" 39 1143 1151 "L2.ml" 39 1143 1154
type(
  't L1.Resolve.env
)
ident(
  int_ref env "L2.ml" 37 1095 1105 "L2.ml" 37 1095 1108
)
"L2.ml" 40 1155 1164 "L2.ml" 40 1155 1176
type(
  ('t L1.Resolve.env -> 'k -> ('q, Ostap.Msg.t) Checked.t) ->
  't L1.Resolve.env ->
  (String.t * 'i) list * (String.t * 'k) list * (String.t list * 'k) list ->
  (unit, Ostap.Msg.t) Checked.t *
  ((String.t * 'p) list * (string * 'q) list * (string list * 'q) list,
   Ostap.Msg.t)
  Checked.t
)
ident(
  ext_ref L1.Resolve.declarations
)
"L2.ml" 40 1155 1177 "L2.ml" 40 1155 1198
type(
  't L1.Resolve.env -> 'k -> ('q, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref PrimitiveType.resolve
)
"L2.ml" 40 1155 1163 "L2.ml" 40 1155 1199
call(
  stack
)
type(
  't L1.Resolve.env ->
  (String.t * 'i) list * (String.t * 'k) list * (String.t list * 'k) list ->
  (unit, Ostap.Msg.t) Checked.t *
  ((String.t * 'p) list * (string * 'q) list * (string list * 'q) list,
   Ostap.Msg.t)
  Checked.t
)
"L2.ml" 41 1200 1209 "L2.ml" 41 1200 1218
type(
  ('m -> 'p Monad.Checked.t) ->
  ('o -> 's Monad.Checked.t) ->
  ('n -> 'p Monad.Checked.t) ->
  (('l -> 'r Monad.Checked.t) -> 'l -> 'r Monad.Checked.t) ->
  'l -> 'r Monad.Checked.t
)
ident(
  int_ref statement "L2.ml" 35 962 970 "L2.ml" 35 962 979
)
"L2.ml" 42 1219 1231 "L2.ml" 42 1219 1242
type(
  't L1.Resolve.env -> 'm -> 'p Monad.Checked.t
)
ident(
  ext_ref L1.Resolve.destination
)
"L2.ml" 42 1219 1243 "L2.ml" 42 1219 1246
type(
  't L1.Resolve.env
)
ident(
  int_ref env "L2.ml" 37 1095 1105 "L2.ml" 37 1095 1108
)
"L2.ml" 42 1219 1230 "L2.ml" 42 1219 1247
call(
  stack
)
type(
  'm -> 'p Monad.Checked.t
)
"L2.ml" 43 1249 1261 "L2.ml" 43 1249 1273
type(
  't L1.Resolve.env -> 'o -> 's Monad.Checked.t
)
ident(
  ext_ref L1.Resolve.constantExpr
)
"L2.ml" 43 1249 1274 "L2.ml" 43 1249 1277
type(
  't L1.Resolve.env
)
ident(
  int_ref env "L2.ml" 37 1095 1105 "L2.ml" 37 1095 1108
)
"L2.ml" 43 1249 1260 "L2.ml" 43 1249 1278
call(
  stack
)
type(
  'o -> 's Monad.Checked.t
)
"L2.ml" 44 1279 1291 "L2.ml" 44 1279 1315
type(
  (('n -> 'p Monad.Checked.t) -> 'n -> 'p Monad.Checked.t) ->
  'n -> 'p Monad.Checked.t
)
ident(
  ext_ref SimpleExpression.resolve
)
"L2.ml" 44 1279 1317 "L2.ml" 44 1279 1326
type(
  ('t L1.Resolve.env -> String.t -> ('t, Ostap.Msg.t) Checked.t) ->
  't L1.Resolve.env -> ('n -> 'p Monad.Checked.t) -> 'n -> 'p Monad.Checked.t
)
ident(
  ext_ref L1.Resolve.reference
)
"L2.ml" 44 1279 1327 "L2.ml" 44 1279 1333
type(
  't L1.Resolve.env -> String.t -> ('t, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref L1.Resolve.lookup
)
"L2.ml" 44 1279 1334 "L2.ml" 44 1279 1337
type(
  't L1.Resolve.env
)
ident(
  int_ref env "L2.ml" 37 1095 1105 "L2.ml" 37 1095 1108
)
"L2.ml" 44 1279 1316 "L2.ml" 44 1279 1338
call(
  stack
)
type(
  ('n -> 'p Monad.Checked.t) -> 'n -> 'p Monad.Checked.t
)
"L2.ml" 44 1279 1290 "L2.ml" 44 1279 1339
call(
  stack
)
type(
  'n -> 'p Monad.Checked.t
)
"L2.ml" 45 1340 1351 "L2.ml" 45 1340 1356
type(
  ('l -> 'r Monad.Checked.t) -> 'l -> 'r Monad.Checked.t
)
ident(
  ext_ref Common.apply
)
"L2.ml" 41 1200 1208 "L2.ml" 46 1358 1367
call(
  stack
)
type(
  'l -> 'r Monad.Checked.t
)
"L2.ml" 47 1368 1376 "L2.ml" 47 1368 1377
type(
  'h *
  ((String.t * 'i) list * (String.t * 'k) list * (String.t list * 'k) list) *
  'l list
)
ident(
  int_ref m "L2.ml" 36 1075 1091 "L2.ml" 36 1075 1092
)
"L2.ml" 38 1122 1128 "L2.ml" 47 1368 1377
call(
  stack
)
type(
  ('h *
   ((String.t * 'p) list * (string * 'q) list * (string list * 'q) list) *
   'r list, Ostap.Msg.t)
  Checked.t
)
"L2.ml" 47 1368 1388 "L2.ml" 47 1368 1389
type(
  'h *
  ((String.t * 'p) list * (string * 'q) list * (string list * 'q) list) *
  'r list
)
ident(
  def x "L2.ml" 47 1368 1393 "L2.ml" 47 1368 1408
)
"L2.ml" 47 1368 1393 "L2.ml" 47 1368 1394
type(
  'h *
  ((String.t * 'p) list * (string * 'q) list * (string list * 'q) list) *
  'r list
)
ident(
  int_ref x "L2.ml" 47 1368 1388 "L2.ml" 47 1368 1389
)
"L2.ml" 47 1368 1396 "L2.ml" 47 1368 1399
type(
  't L1.Resolve.env
)
ident(
  int_ref env "L2.ml" 37 1095 1105 "L2.ml" 37 1095 1108
)
"L2.ml" 47 1368 1396 "L2.ml" 47 1368 1405
call(
  stack
)
type(
  unit -> < getName : String.t -> String.t >
)
"L2.ml" 47 1368 1406 "L2.ml" 47 1368 1408
type(
  unit
)
"L2.ml" 47 1368 1396 "L2.ml" 47 1368 1408
type(
  < getName : String.t -> String.t >
)
"L2.ml" 47 1368 1393 "L2.ml" 47 1368 1408
type(
  ('h *
   ((String.t * 'p) list * (string * 'q) list * (string list * 'q) list) *
   'r list) *
  < getName : String.t -> String.t >
)
"L2.ml" 47 1368 1383 "L2.ml" 47 1368 1409
type(
  'h *
  ((String.t * 'p) list * (string * 'q) list * (string list * 'q) list) *
  'r list ->
  ('h *
   ((String.t * 'p) list * (string * 'q) list * (string list * 'q) list) *
   'r list) *
  < getName : String.t -> String.t >
)
"L2.ml" 38 1122 1128 "L2.ml" 47 1368 1409
call(
  tail
)
type(
  (('h *
    ((String.t * 'p) list * (string * 'q) list * (string list * 'q) list) *
    'r list) *
   < getName : String.t -> String.t >, Ostap.Msg.t)
  Checked.t
)
type(
  ('h *
   ((String.t * 'p) list * (string * 'q) list * (string list * 'q) list) *
   'r list, Ostap.Msg.t)
  Checked.t ->
  ('h *
   ((String.t * 'p) list * (string * 'q) list * (string list * 'q) list) *
   'r list ->
   ('h *
    ((String.t * 'p) list * (string * 'q) list * (string list * 'q) list) *
    'r list) *
   < getName : String.t -> String.t >) ->
  (('h *
    ((String.t * 'p) list * (string * 'q) list * (string list * 'q) list) *
    'r list) *
   < getName : String.t -> String.t >, Ostap.Msg.t)
  Checked.t
)
ident(
  ext_ref Checked.( -?-> )
)
"L2.ml" 37 1095 1101 "L2.ml" 47 1368 1409
type(
  (('h *
    ((String.t * 'p) list * (string * 'q) list * (string list * 'q) list) *
    'r list) *
   < getName : String.t -> String.t >, Ostap.Msg.t)
  Checked.t
)
"L2.ml" 36 1075 1091 "L2.ml" 47 1368 1409
type(
  'h *
  ((String.t * 'i) list * (String.t * 'k) list * (String.t list * 'k) list) *
  'l list ->
  (('h *
    ((String.t * 'p) list * (string * 'q) list * (string list * 'q) list) *
    'r list) *
   < getName : String.t -> String.t >, Ostap.Msg.t)
  Checked.t
)
"L2.ml" 55 1557 1569 "L2.ml" 55 1557 1578
type(
  < equal : ([> `Bool | `Int ] as 'a) -> 'a -> bool; primitive : 'a -> bool;
    string : 'a -> string; .. > ->
  ('b -> ('c * 'a) Monad.Checked.t) ->
  ((([> `Assign of 'b * 'b
      | `Case of
          'b *
          ([< `Atom of 'b | `Interval of 'b * 'b ] list * 'd list) list *
          'd list
      | `For of 'b * 'b * 'b * 'b option * 'd list
      | `If of ('b * 'd list) list * 'd list
      | `While of 'b * 'd list ]
     as 'd) ->
    ([> `Assign of ('c * 'a) * ('c * 'a)
      | `Case of
          ('c * 'a) *
          ([ `Atom of 'c * 'a | `Interval of ('c * 'a) * ('c * 'a) ] list *
           'e list)
          list * 'e list
      | `For of
          ('c * 'a) * ('c * 'a) * ('c * 'a) * ('c * 'a) option * 'e list
      | `If of (('c * 'a) * 'e list) list * 'e list
      | `While of ('c * 'a) * 'e list ]
     as 'e)
    Monad.Checked.t) ->
   'd -> 'e Monad.Checked.t) ->
  'd -> 'e Monad.Checked.t
)
ident(
  def statement "L2.ml" 55 1557 1561 "L2.ml" 57 1702 1707
)
"L2.ml" 55 1557 1579 "L2.ml" 55 1557 1581
type(
  < equal : 'a -> 'a -> bool; primitive : 'a -> bool; string : 'a -> string;
    .. >
  as 'f
)
ident(
  def ts "L2.ml" 55 1557 1582 "L2.ml" 55 1557 1661
)
"L2.ml" 55 1557 1582 "L2.ml" 55 1557 1586
type(
  'b -> ('c * 'a) Monad.Checked.t
)
ident(
  def expr "L2.ml" 55 1557 1589 "L2.ml" 55 1557 1661
)
"L2.ml" 55 1557 1589 "L2.ml" 55 1557 1614
type(
  'f ->
  ('b -> ('c * 'a) Monad.Checked.t) ->
  (('d -> 'e Monad.Checked.t) -> 'd -> 'e Monad.Checked.t) ->
  'd -> 'e Monad.Checked.t
)
ident(
  ext_ref SimpleStatement.typecheck
)
"L2.ml" 55 1557 1615 "L2.ml" 55 1557 1617
type(
  'f
)
ident(
  int_ref ts "L2.ml" 55 1557 1579 "L2.ml" 55 1557 1581
)
"L2.ml" 55 1557 1618 "L2.ml" 55 1557 1622
type(
  'b -> ('c * 'a) Monad.Checked.t
)
ident(
  int_ref expr "L2.ml" 55 1557 1582 "L2.ml" 55 1557 1586
)
"L2.ml" 55 1557 1589 "L2.ml" 55 1557 1622
call(
  stack
)
type(
  (('d -> 'e Monad.Checked.t) -> 'd -> 'e Monad.Checked.t) ->
  'd -> 'e Monad.Checked.t
)
"L2.ml" 55 1557 1626 "L2.ml" 55 1557 1653
type(
  'f ->
  ('b -> ('c * 'a) Monad.Checked.t) ->
  (('d -> 'e Monad.Checked.t) -> 'd -> 'e Monad.Checked.t) ->
  'd -> 'e Monad.Checked.t
)
ident(
  ext_ref ExtendedStatement.typecheck
)
"L2.ml" 55 1557 1654 "L2.ml" 55 1557 1656
type(
  'f
)
ident(
  int_ref ts "L2.ml" 55 1557 1579 "L2.ml" 55 1557 1581
)
"L2.ml" 55 1557 1657 "L2.ml" 55 1557 1661
type(
  'b -> ('c * 'a) Monad.Checked.t
)
ident(
  int_ref expr "L2.ml" 55 1557 1582 "L2.ml" 55 1557 1586
)
"L2.ml" 55 1557 1626 "L2.ml" 55 1557 1661
call(
  stack
)
type(
  (('d -> 'e Monad.Checked.t) -> 'd -> 'e Monad.Checked.t) ->
  'd -> 'e Monad.Checked.t
)
"L2.ml" 55 1557 1589 "L2.ml" 55 1557 1661
call(
  tail
)
type(
  (('d -> 'e Monad.Checked.t) -> 'd -> 'e Monad.Checked.t) ->
  'd -> 'e Monad.Checked.t
)
type(
  ((('d -> 'e Monad.Checked.t) -> 'd -> 'e Monad.Checked.t) ->
   'd -> 'e Monad.Checked.t) ->
  ((('d -> 'e Monad.Checked.t) -> 'd -> 'e Monad.Checked.t) ->
   'd -> 'e Monad.Checked.t) ->
  (('d -> 'e Monad.Checked.t) -> 'd -> 'e Monad.Checked.t) ->
  'd -> 'e Monad.Checked.t
)
ident(
  ext_ref Common.( ++ )
)
"L2.ml" 55 1557 1582 "L2.ml" 55 1557 1661
type(
  ('b -> ('c * 'a) Monad.Checked.t) ->
  (('d -> 'e Monad.Checked.t) -> 'd -> 'e Monad.Checked.t) ->
  'd -> 'e Monad.Checked.t
)
"L2.ml" 55 1557 1579 "L2.ml" 55 1557 1661
type(
  'f ->
  ('b -> ('c * 'a) Monad.Checked.t) ->
  (('d -> 'e Monad.Checked.t) -> 'd -> 'e Monad.Checked.t) ->
  'd -> 'e Monad.Checked.t
)
"L2.ml" 56 1662 1670 "L2.ml" 56 1662 1677
type(
  'g *
  (('h *
    ([> `Binop of
          [> `And | `Eq | `Ge | `Gt | `Le | `Lt | `Ne | `Or ] * 'i * 'i
      | `Const of [< `False | `Literal of 'j | `True ]
      | `Ident of
          'k *
          [> `Const of [> `Literal of 'l ]
           | `Var of 'm * ([> `Bool | `Int | `User of 'o * 'p * 'n ] as 'n) ]
      | `Unop of [< `Neg | `Not ] * 'i ]
     as 'i))
   list * 'q * 'r) *
  ([> `Assign of
        ([> `Binop of
              ([> `And | `Eq | `Ge | `Gt | `Le | `Lt | `Ne | `Or ] as 'u) *
              't * 't
          | `Const of [< `False | `Literal of 'w | `True ] as 'v
          | `Ident of
              'x *
              [> `Const of [> `Literal of 'z ] as 'y
               | `Var of
                   'a1 *
                   ([ `Bool | `Int | `User of string * 'c1 * 'b1 ] as 'b1) ]
          | `Unop of [< `Neg | `Not ] * 't ]
         as 't) *
        't
    | `Case of
        't * ([< `Atom of 't | `Interval of 't * 't ] list * 's list) list *
        's list
    | `For of 't * 't * 't * 't option * 's list
    | `If of ('t * 's list) list * 's list
    | `While of 't * 's list ]
   as 's)
  list ->
  ('g * (('h * 'i) list * 'q * 'r) *
   ([> `Assign of
         (([> `Binop of 'u * ('e1 * 'b1) * ('e1 * 'b1)
            | `Const of 'v
            | `Ident of 'x * [> `Const of 'y | `Var of 'a1 * 'b1 ]
            | `Unop of [> `Neg | `Not ] * ('e1 * 'b1) ]
           as 'e1) *
          'b1) *
         ('e1 * 'b1)
     | `Case of
         ('e1 * 'b1) *
         ([ `Atom of 'e1 * 'b1 | `Interval of ('e1 * 'b1) * ('e1 * 'b1) ]
          list * 'd1 list)
         list * 'd1 list
     | `For of
         ('e1 * 'b1) * ('e1 * 'b1) * ('e1 * 'b1) * ('e1 * 'b1) option *
         'd1 list
     | `If of (('e1 * 'b1) * 'd1 list) list * 'd1 list
     | `While of ('e1 * 'b1) * 'd1 list ]
    as 'd1)
   list, Ostap.Msg.t)
  Checked.t
)
ident(
  def program "L2.ml" 56 1662 1701 "L2.ml" 57 1702 1707
)
"L2.ml" 56 1662 1678 "L2.ml" 56 1662 1679
type(
  'g * (('h * 'i) list * 'q * 'r) * 's list
)
ident(
  def m "L2.ml" 56 1662 1682 "L2.ml" 56 1662 1701
)
"L2.ml" 56 1662 1682 "L2.ml" 56 1662 1689
type(
  (< equal : 'b1 -> 'b1 -> bool; primitive : 'b1 -> bool;
     string : 'b1 -> string > ->
   ('t -> ('e1 * 'b1) Monad.Checked.t) ->
   (('s -> 'd1 Monad.Checked.t) -> 's -> 'd1 Monad.Checked.t) ->
   's -> 'd1 Monad.Checked.t) ->
  'g * (('h * 'i) list * 'q * 'r) * 's list ->
  ('g * (('h * 'i) list * 'q * 'r) * 'd1 list, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref L1.Typecheck.program
)
"L2.ml" 56 1662 1690 "L2.ml" 56 1662 1699
type(
  < equal : 'b1 -> 'b1 -> bool; primitive : 'b1 -> bool;
    string : 'b1 -> string > ->
  ('t -> ('e1 * 'b1) Monad.Checked.t) ->
  (('s -> 'd1 Monad.Checked.t) -> 's -> 'd1 Monad.Checked.t) ->
  's -> 'd1 Monad.Checked.t
)
ident(
  int_ref statement "L2.ml" 55 1557 1569 "L2.ml" 55 1557 1578
)
"L2.ml" 56 1662 1700 "L2.ml" 56 1662 1701
type(
  'g * (('h * 'i) list * 'q * 'r) * 's list
)
ident(
  int_ref m "L2.ml" 56 1662 1678 "L2.ml" 56 1662 1679
)
"L2.ml" 56 1662 1682 "L2.ml" 56 1662 1701
call(
  tail
)
type(
  ('g * (('h * 'i) list * 'q * 'r) * 'd1 list, Ostap.Msg.t) Checked.t
)
"L2.ml" 56 1662 1678 "L2.ml" 56 1662 1701
type(
  'g * (('h * 'i) list * 'q * 'r) * 's list ->
  ('g * (('h * 'i) list * 'q * 'r) * 'd1 list, Ostap.Msg.t) Checked.t
)
"L2.ml" 61 1799 1803 "L2.ml" 61 1799 1806
type(
  string ->
  < generate : unit -> (string * string, Ostap.Msg.t) Checked.t;
    parse : unit -> (unit, Ostap.Msg.t) Checked.t;
    print : unit -> (string, Ostap.Msg.t) Checked.t;
    resolve : unit -> (unit, Ostap.Msg.t) Checked.t;
    typecheck : unit -> ('a -> unit, Ostap.Msg.t) Checked.t >
)
ident(
  def top "L2.ml" 61 1799 1902 "L2.ml" 1 0 -1
)
"L2.ml" 61 1799 1807 "L2.ml" 61 1799 1813
type(
  string
)
ident(
  def source "L2.ml" 61 1799 1816 "L2.ml" 61 1799 1902
)
"L2.ml" 61 1799 1816 "L2.ml" 61 1799 1828
type(
  (Lexer.t ->
   (Lexer.t,
    string *
    ((String.t *
      (_[> `Binop of
             [ `Add
             | `And
             | `Div
             | `Eq
             | `Ge
             | `Gt
             | `Le
             | `Lt
             | `Mod
             | `Mul
             | `Ne
             | `Or
             | `Sub ] * 'b * 'b
         | `Const of
             [ `False | `Literal of int Monad.Id.t Monad.Id.t | `True ]
         | `Ident of String.t
         | `Unop of [ `Neg | `Not ] * 'b ]
       as 'b))
     list *
     (String.t * (_[< `Bool | `Int | `User of String.t > `User ] as 'c)) list *
     (String.t list * 'c) list) *
    (_[> `Assign of
           (_[> `Binop of
                  [ `Add
                  | `And
                  | `Div
                  | `Eq
                  | `Ge
                  | `Gt
                  | `Le
                  | `Lt
                  | `Mod
                  | `Mul
                  | `Ne
                  | `Or
                  | `Sub ] * 'e * 'e
              | `Const of
                  [ `False | `Literal of int Monad.Id.t Monad.Id.t | `True ]
              | `Ident of String.t
              | `Unop of [ `Neg | `Not ] * 'e ]
            as 'e) *
           'e
       | `Case of
           'e *
           ([ `Atom of 'e | `Interval of 'e * 'e ] list * 'd list) list *
           'd list
       | `For of 'e * 'e * 'e * 'e option * 'd list
       | `If of ('e * 'd list) list * 'd list
       | `While of 'e * 'd list ]
     as 'd)
    list, Ostap.Reason.t)
   Ostap.Combinators.result) *
  (string *
   ((String.t * 'b) list * (String.t * 'c) list * (String.t list * 'c) list) *
   'd list -> Ostap.Pretty.printer) *
  (string *
   ((String.t * 'b) list * (String.t * 'c) list * (String.t list * 'c) list) *
   'd list ->
   ((string *
     ((String.t *
       (_[> `Binop of
              [ `Add
              | `And
              | `Div
              | `Eq
              | `Ge
              | `Gt
              | `Le
              | `Lt
              | `Mod
              | `Mul
              | `Ne
              | `Or
              | `Sub ] * 'f * 'f
          | `Const of
              [ `False | `Literal of int Monad.Id.t Monad.Id.t | `True ]
          | `Ident of
              string *
              _[> `Const of 'f
                | `Type of
                    string *
                    ([ `Bool | `Int | `User of String.t * string * 'g ] as 'g)
                | `Var of string * 'g ]
          | `Literal of '_h
          | `Unop of [ `Neg | `Not ] * 'f ]
        as 'f))
      list * (string * 'g) list * (string list * 'g) list) *
     (_[> `Assign of 'f * 'f
        | `Case of
            'f *
            ([ `Atom of 'f | `Interval of 'f * 'f ] list * 'i list) list *
            'i list
        | `For of 'f * 'f * 'f * 'f option * 'i list
        | `If of ('f * 'i list) list * 'i list
        | `While of 'f * 'i list ]
      as 'i)
     list) *
    < getName : String.t -> String.t >, Ostap.Msg.t)
   Checked.t) *
  (string *
   ((String.t * 'f) list * (string * 'g) list * (string list * 'g) list) *
   'i list ->
   (string *
    ((String.t * 'f) list * (string * 'g) list * (string list * 'g) list) *
    (_[> `Assign of
           ((_[> `Binop of
                   [ `Add
                   | `And
                   | `Div
                   | `Eq
                   | `Ge
                   | `Gt
                   | `Le
                   | `Lt
                   | `Mod
                   | `Mul
                   | `Ne
                   | `Or
                   | `Sub ] * ('k * 'g) * ('k * 'g)
               | `Const of
                   [ `False | `Literal of int Monad.Id.t Monad.Id.t | `True ]
               | `Ident of string * _[> `Const of 'f | `Var of string * 'g ]
               | `Unop of _[> `Neg | `Not ] * ('k * 'g) ]
             as 'k) *
            'g) *
           ('k * 'g)
       | `Case of
           ('k * 'g) *
           ([ `Atom of 'k * 'g | `Interval of ('k * 'g) * ('k * 'g) ] list *
            'j list)
           list * 'j list
       | `For of
           ('k * 'g) * ('k * 'g) * ('k * 'g) * ('k * 'g) option * 'j list
       | `If of (('k * 'g) * 'j list) list * 'j list
       | `While of ('k * 'g) * 'j list ]
     as 'j)
    list, Ostap.Msg.t)
   Checked.t) ->
  string ->
  < generate : unit -> (string * string, Ostap.Msg.t) Checked.t;
    parse : unit -> (unit, Ostap.Msg.t) Checked.t;
    print : unit -> (string, Ostap.Msg.t) Checked.t;
    resolve : unit -> (unit, Ostap.Msg.t) Checked.t;
    typecheck : unit -> ('a -> unit, Ostap.Msg.t) Checked.t >
)
ident(
  ext_ref L1.toplevel0
)
"L2.ml" 61 1799 1830 "L2.ml" 61 1799 1843
type(
  Lexer.t ->
  (Lexer.t,
   string *
   ((String.t * 'b) list * (String.t * 'c) list * (String.t list * 'c) list) *
   'd list, Ostap.Reason.t)
  Ostap.Combinators.result
)
ident(
  int_ref Parse.program "L2.ml" 11 187 193 "L2.ml" 15 406 476
)
"L2.ml" 61 1799 1845 "L2.ml" 61 1799 1858
type(
  string *
  ((String.t * 'b) list * (String.t * 'c) list * (String.t list * 'c) list) *
  'd list -> Ostap.Pretty.printer
)
ident(
  int_ref Print.program "L2.ml" 25 694 702 "L2.ml" 25 694 709
)
"L2.ml" 61 1799 1860 "L2.ml" 61 1799 1875
type(
  string *
  ((String.t * 'b) list * (String.t * 'c) list * (String.t list * 'c) list) *
  'd list ->
  ((string *
    ((String.t * 'f) list * (string * 'g) list * (string list * 'g) list) *
    'i list) *
   < getName : String.t -> String.t >, Ostap.Msg.t)
  Checked.t
)
ident(
  int_ref Resolve.program "L2.ml" 36 1075 1083 "L2.ml" 36 1075 1090
)
"L2.ml" 61 1799 1877 "L2.ml" 61 1799 1894
type(
  string *
  ((String.t * 'f) list * (string * 'g) list * (string list * 'g) list) *
  'i list ->
  (string *
   ((String.t * 'f) list * (string * 'g) list * (string list * 'g) list) *
   'j list, Ostap.Msg.t)
  Checked.t
)
ident(
  int_ref Typecheck.program "L2.ml" 56 1662 1670 "L2.ml" 56 1662 1677
)
"L2.ml" 61 1799 1829 "L2.ml" 61 1799 1895
type(
  (Lexer.t ->
   (Lexer.t,
    string *
    ((String.t * 'b) list * (String.t * 'c) list * (String.t list * 'c) list) *
    'd list, Ostap.Reason.t)
   Ostap.Combinators.result) *
  (string *
   ((String.t * 'b) list * (String.t * 'c) list * (String.t list * 'c) list) *
   'd list -> Ostap.Pretty.printer) *
  (string *
   ((String.t * 'b) list * (String.t * 'c) list * (String.t list * 'c) list) *
   'd list ->
   ((string *
     ((String.t * 'f) list * (string * 'g) list * (string list * 'g) list) *
     'i list) *
    < getName : String.t -> String.t >, Ostap.Msg.t)
   Checked.t) *
  (string *
   ((String.t * 'f) list * (string * 'g) list * (string list * 'g) list) *
   'i list ->
   (string *
    ((String.t * 'f) list * (string * 'g) list * (string list * 'g) list) *
    'j list, Ostap.Msg.t)
   Checked.t)
)
"L2.ml" 61 1799 1896 "L2.ml" 61 1799 1902
type(
  string
)
ident(
  int_ref source "L2.ml" 61 1799 1807 "L2.ml" 61 1799 1813
)
"L2.ml" 61 1799 1816 "L2.ml" 61 1799 1902
call(
  tail
)
type(
  < generate : unit -> (string * string, Ostap.Msg.t) Checked.t;
    parse : unit -> (unit, Ostap.Msg.t) Checked.t;
    print : unit -> (string, Ostap.Msg.t) Checked.t;
    resolve : unit -> (unit, Ostap.Msg.t) Checked.t;
    typecheck : unit -> ('a -> unit, Ostap.Msg.t) Checked.t >
)
"L2.ml" 61 1799 1807 "L2.ml" 61 1799 1902
type(
  string ->
  < generate : unit -> (string * string, Ostap.Msg.t) Checked.t;
    parse : unit -> (unit, Ostap.Msg.t) Checked.t;
    print : unit -> (string, Ostap.Msg.t) Checked.t;
    resolve : unit -> (unit, Ostap.Msg.t) Checked.t;
    typecheck : unit -> ('a -> unit, Ostap.Msg.t) Checked.t >
)
