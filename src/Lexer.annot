"Lexer.ml" 7 64 68 "Lexer.ml" 7 64 79
type(
  string
)
ident(
  def identRegexp "Lexer.ml" 9 114 114 "Lexer.ml" 1 0 -1
)
"Lexer.ml" 7 64 82 "Lexer.ml" 7 64 111
type(
  string
)
"Lexer.ml" 9 114 122 "Lexer.ml" 9 114 123
type(
  string
)
"Lexer.ml" 10 127 133 "Lexer.ml" 10 127 137
type(
  string ->
  int ->
  Ostap.Msg.Coord.t ->
  [ `Failed of Ostap.Msg.t | `Skipped of int * Ostap.Msg.Coord.t ]
)
"Lexer.ml" 10 127 143 "Lexer.ml" 10 127 154
type(
  Ostap.Matcher.Skip.t list ->
  string ->
  int ->
  Ostap.Msg.Coord.t ->
  [ `Failed of Ostap.Msg.t | `Skipped of int * Ostap.Msg.Coord.t ]
)
ident(
  ext_ref Ostap.Matcher.Skip.create
)
"Lexer.ml" 10 127 156 "Lexer.ml" 10 127 172
type(
  string -> Ostap.Matcher.Skip.t
)
ident(
  ext_ref Ostap.Matcher.Skip.whitespaces
)
"Lexer.ml" 10 127 173 "Lexer.ml" 10 127 182
type(
  string
)
"Lexer.ml" 10 127 156 "Lexer.ml" 10 127 182
call(
  stack
)
type(
  Ostap.Matcher.Skip.t
)
"Lexer.ml" 10 127 184 "Lexer.ml" 10 127 202
type(
  string -> string -> Ostap.Matcher.Skip.t
)
ident(
  ext_ref Ostap.Matcher.Skip.nestedComment
)
"Lexer.ml" 10 127 203 "Lexer.ml" 10 127 207
type(
  string
)
"Lexer.ml" 10 127 208 "Lexer.ml" 10 127 212
type(
  string
)
"Lexer.ml" 10 127 184 "Lexer.ml" 10 127 212
call(
  stack
)
type(
  Ostap.Matcher.Skip.t
)
"Lexer.ml" 10 127 155 "Lexer.ml" 10 127 213
type(
  Ostap.Matcher.Skip.t list
)
type(
  Ostap.Matcher.Skip.t list
)
type(
  Ostap.Matcher.Skip.t list
)
"Lexer.ml" 10 127 143 "Lexer.ml" 10 127 213
call(
  stack
)
type(
  string ->
  int ->
  Ostap.Msg.Coord.t ->
  [ `Failed of Ostap.Msg.t | `Skipped of int * Ostap.Msg.Coord.t ]
)
"Lexer.ml" 11 217 223 "Lexer.ml" 11 217 228
type(
  Str.regexp
)
"Lexer.ml" 11 217 233 "Lexer.ml" 11 217 239
type(
  string -> Str.regexp
)
ident(
  ext_ref Str.regexp
)
"Lexer.ml" 11 217 240 "Lexer.ml" 11 217 251
type(
  string
)
ident(
  int_ref identRegexp "Lexer.ml" 7 64 68 "Lexer.ml" 7 64 79
)
"Lexer.ml" 11 217 233 "Lexer.ml" 11 217 251
call(
  stack
)
type(
  Str.regexp
)
"Lexer.ml" 12 256 262 "Lexer.ml" 12 256 269
type(
  Str.regexp
)
"Lexer.ml" 12 256 272 "Lexer.ml" 12 256 278
type(
  string -> Str.regexp
)
ident(
  ext_ref Str.regexp
)
"Lexer.ml" 12 256 279 "Lexer.ml" 12 256 287
type(
  string
)
"Lexer.ml" 12 256 272 "Lexer.ml" 12 256 287
call(
  stack
)
type(
  Str.regexp
)
"Lexer.ml" 13 291 301 "Lexer.ml" 13 291 305
type(
  < col : int; coord : Ostap.Msg.Coord.t;
    get : string ->
          Str.regexp ->
          ('a, Ostap.Matcher.Token.t, Ostap.Reason.t)
          Ostap.Combinators.result;
    getEOF : ('a, Ostap.Matcher.Token.t, Ostap.Reason.t)
             Ostap.Combinators.result;
    getIDENT : ('a, Ostap.Matcher.Token.t, Ostap.Reason.t)
               Ostap.Combinators.result;
    getLITERAL : ('a, Ostap.Matcher.Token.t, Ostap.Reason.t)
                 Ostap.Combinators.result;
    line : int; loc : Ostap.Msg.Locator.t;
    look : string ->
           ('a, Ostap.Matcher.Token.t, Ostap.Reason.t)
           Ostap.Combinators.result;
    pos : int; prefix : int -> string;
    regexp : string ->
             string ->
             ('a, Ostap.Matcher.Token.t, Ostap.Reason.t)
             Ostap.Combinators.result;
    skip : int ->
           Ostap.Msg.Coord.t ->
           [ `Failed of Ostap.Msg.t | `Skipped of int * Ostap.Msg.Coord.t ];
    .. >
  as 'a
)
"Lexer.ml" 14 307 329 "Lexer.ml" 14 307 330
type(
  string
)
ident(
  int_ref s "Lexer.ml" 9 114 122 "Lexer.ml" 9 114 123
)
"Lexer.ml" 15 332 348 "Lexer.ml" 15 332 349
type(
  int
)
ident(
  def p "Lexer.ml" 15 332 350 "Lexer.ml" 15 332 372
)
"Lexer.ml" 15 332 350 "Lexer.ml" 15 332 355
type(
  Ostap.Msg.Coord.t
)
ident(
  def coord "Lexer.ml" 15 332 358 "Lexer.ml" 15 332 372
)
"Lexer.ml" 15 332 358 "Lexer.ml" 15 332 362
type(
  string ->
  int ->
  Ostap.Msg.Coord.t ->
  [ `Failed of Ostap.Msg.t | `Skipped of int * Ostap.Msg.Coord.t ]
)
ident(
  int_ref skip "Lexer.ml" 10 127 133 "Lexer.ml" 10 127 137
)
"Lexer.ml" 15 332 363 "Lexer.ml" 15 332 364
type(
  string
)
ident(
  int_ref s "Lexer.ml" 9 114 122 "Lexer.ml" 9 114 123
)
"Lexer.ml" 15 332 365 "Lexer.ml" 15 332 366
type(
  int
)
ident(
  int_ref p "Lexer.ml" 15 332 348 "Lexer.ml" 15 332 349
)
"Lexer.ml" 15 332 367 "Lexer.ml" 15 332 372
type(
  Ostap.Msg.Coord.t
)
ident(
  int_ref coord "Lexer.ml" 15 332 350 "Lexer.ml" 15 332 355
)
"Lexer.ml" 15 332 358 "Lexer.ml" 15 332 372
call(
  tail
)
type(
  [ `Failed of Ostap.Msg.t | `Skipped of int * Ostap.Msg.Coord.t ]
)
"Lexer.ml" 15 332 350 "Lexer.ml" 15 332 372
type(
  Ostap.Msg.Coord.t ->
  [ `Failed of Ostap.Msg.t | `Skipped of int * Ostap.Msg.Coord.t ]
)
"Lexer.ml" 15 332 348 "Lexer.ml" 15 332 372
type(
  int ->
  Ostap.Msg.Coord.t ->
  [ `Failed of Ostap.Msg.t | `Skipped of int * Ostap.Msg.Coord.t ]
)
type(
  int ->
  Ostap.Msg.Coord.t ->
  [ `Failed of Ostap.Msg.t | `Skipped of int * Ostap.Msg.Coord.t ]
)
"Lexer.ml" 15 332 336 "Lexer.ml" 15 332 372
type(
  'a ->
  int ->
  Ostap.Msg.Coord.t ->
  [ `Failed of Ostap.Msg.t | `Skipped of int * Ostap.Msg.Coord.t ]
)
"Lexer.ml" 16 373 399 "Lexer.ml" 16 373 403
type(
  'a
)
ident(
  int_ref self "Lexer.ml" 13 291 301 "Lexer.ml" 13 291 305
)
"Lexer.ml" 16 373 399 "Lexer.ml" 16 373 407
call(
  tail
)
type(
  string ->
  Str.regexp ->
  ('a, Ostap.Matcher.Token.t, Ostap.Reason.t) Ostap.Combinators.result
)
"Lexer.ml" 16 373 408 "Lexer.ml" 16 373 420
type(
  string
)
"Lexer.ml" 16 373 421 "Lexer.ml" 16 373 426
type(
  Str.regexp
)
ident(
  int_ref ident "Lexer.ml" 11 217 223 "Lexer.ml" 11 217 228
)
"Lexer.ml" 16 373 399 "Lexer.ml" 16 373 426
type(
  ('a, Ostap.Matcher.Token.t, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, Ostap.Matcher.Token.t, Ostap.Reason.t) Ostap.Combinators.result
)
"Lexer.ml" 16 373 377 "Lexer.ml" 16 373 426
type(
  'a -> ('a, Ostap.Matcher.Token.t, Ostap.Reason.t) Ostap.Combinators.result
)
"Lexer.ml" 17 427 453 "Lexer.ml" 17 427 457
type(
  'a
)
ident(
  int_ref self "Lexer.ml" 13 291 301 "Lexer.ml" 13 291 305
)
"Lexer.ml" 17 427 453 "Lexer.ml" 17 427 461
call(
  tail
)
type(
  string ->
  Str.regexp ->
  ('a, Ostap.Matcher.Token.t, Ostap.Reason.t) Ostap.Combinators.result
)
"Lexer.ml" 17 427 462 "Lexer.ml" 17 427 471
type(
  string
)
"Lexer.ml" 17 427 475 "Lexer.ml" 17 427 482
type(
  Str.regexp
)
ident(
  int_ref literal "Lexer.ml" 12 256 262 "Lexer.ml" 12 256 269
)
"Lexer.ml" 17 427 453 "Lexer.ml" 17 427 482
type(
  ('a, Ostap.Matcher.Token.t, Ostap.Reason.t) Ostap.Combinators.result
)
type(
  ('a, Ostap.Matcher.Token.t, Ostap.Reason.t) Ostap.Combinators.result
)
"Lexer.ml" 17 427 431 "Lexer.ml" 17 427 482
type(
  'a -> ('a, Ostap.Matcher.Token.t, Ostap.Reason.t) Ostap.Combinators.result
)
