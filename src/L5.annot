"L5.ml" 10 177 190 "L5.ml" 10 177 194
type(
  < compositeType : ([> `Bool | `Int | `User of string * string * 'a ] as 'a) ->
                    bool;
    down : string -> unit;
    extractInternal : [ `Const of 'b
                      | `Param of string * 'c
                      | `Proc of
                          string *
                          (([> `Val | `Var ] as 'd) * string *
                           ([> `Int ] as 'e))
                          list
                      | `Type of string * ([> `Bool | `Int ] as 'f)
                      | `VParam of string * 'g
                      | `Var of string * 'h ] -> string;
    getInternal : String.t -> string;
    lookup : String.t ->
             ([ `Const of 'b
              | `Param of string * 'c
              | `Proc of string * ('d * string * 'e) list
              | `Type of string * 'f
              | `VParam of string * 'g
              | `Var of string * 'h ], Ostap.Msg.t)
             Checked.t;
    lookupConst : String.t ->
                  ([ `Const of 'b
                   | `Param of string * 'c
                   | `Proc of string * ('d * string * 'e) list
                   | `Type of string * 'f
                   | `VParam of string * 'g
                   | `Var of string * 'h ], Ostap.Msg.t)
                  Checked.t;
    lookupProc : String.t ->
                 ([ `Const of 'b
                  | `Param of string * 'c
                  | `Proc of string * ('d * string * 'e) list
                  | `Type of string * 'f
                  | `VParam of string * 'g
                  | `Var of string * 'h ], Ostap.Msg.t)
                 Checked.t;
    lookupVar : String.t ->
                ([ `Const of 'b
                 | `Param of string * 'c
                 | `Proc of string * ('d * string * 'e) list
                 | `Type of string * 'f
                 | `VParam of string * 'g
                 | `Var of string * 'h ], Ostap.Msg.t)
                Checked.t;
    namer : unit -> < getName : String.t -> String.t >; up : unit -> unit;
    update : String.t ->
             [ `Const of 'b
             | `Param of string * 'c
             | `Proc of string * ('d * string * 'e) list
             | `Type of string * 'f
             | `VParam of string * 'g
             | `Var of string * 'h ] -> (unit, Ostap.Msg.t) Checked.t;
    updateConst : String.t -> 'b -> (unit, Ostap.Msg.t) Checked.t;
    updateVars : String.t list -> 'h -> (unit, Ostap.Msg.t) Checked.t; .. >
)
"L5.ml" 12 236 258 "L5.ml" 12 236 262
type(
  String.t
)
ident(
  def name "L5.ml" 12 236 265 "L5.ml" 12 236 307
)
"L5.ml" 12 236 266 "L5.ml" 12 236 272
type(
  < down : string -> unit; downGlobal : string -> unit;
    genericDown : string -> bool -> unit; getInternal : String.t -> string;
    lookup : String.t ->
             ([ `Const of 'b
              | `Param of string * 'c
              | `Proc of string * ('d * string * 'e) list
              | `Type of string * 'f
              | `VParam of string * 'g
              | `Var of string * 'h ], Ostap.Msg.t)
             Checked.t;
    lookupShallow : String.t ->
                    ([ `Const of 'b
                     | `Param of string * 'c
                     | `Proc of string * ('d * string * 'e) list
                     | `Type of string * 'f
                     | `VParam of string * 'g
                     | `Var of string * 'h ], Ostap.Msg.t)
                    Checked.t;
    name : String.t; namer : unit -> < getName : String.t -> String.t >;
    up : unit -> unit;
    update : String.t ->
             [ `Const of 'b
             | `Param of string * 'c
             | `Proc of string * ('d * string * 'e) list
             | `Type of string * 'f
             | `VParam of string * 'g
             | `Var of string * 'h ] -> (unit, Ostap.Msg.t) Checked.t;
    updateList : (String.t *
                  [ `Const of 'b
                  | `Param of string * 'c
                  | `Proc of string * ('d * string * 'e) list
                  | `Type of string * 'f
                  | `VParam of string * 'g
                  | `Var of string * 'h ])
                 list -> (unit, Ostap.Msg.t) Checked.t >
)
ident(
  ext_ref idents
)
"L5.ml" 12 236 266 "L5.ml" 12 236 279
call(
  tail
)
type(
  String.t ->
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
"L5.ml" 12 236 280 "L5.ml" 12 236 284
type(
  String.t
)
ident(
  int_ref name "L5.ml" 12 236 258 "L5.ml" 12 236 262
)
"L5.ml" 12 236 266 "L5.ml" 12 236 284
type(
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
type(
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
"L5.ml" 12 236 258 "L5.ml" 12 236 307
type(
  String.t ->
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
type(
  String.t ->
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
"L5.ml" 12 236 244 "L5.ml" 12 236 307
type(
  (< compositeType : 'a -> bool; down : string -> unit;
     extractInternal : [ `Const of 'b
                       | `Param of string * 'c
                       | `Proc of string * ('d * string * 'e) list
                       | `Type of string * 'f
                       | `VParam of string * 'g
                       | `Var of string * 'h ] -> string;
     getInternal : String.t -> string;
     lookup : String.t ->
              ([ `Const of 'b
               | `Param of string * 'c
               | `Proc of string * ('d * string * 'e) list
               | `Type of string * 'f
               | `VParam of string * 'g
               | `Var of string * 'h ], Ostap.Msg.t)
              Checked.t;
     lookupConst : String.t ->
                   ([ `Const of 'b
                    | `Param of string * 'c
                    | `Proc of string * ('d * string * 'e) list
                    | `Type of string * 'f
                    | `VParam of string * 'g
                    | `Var of string * 'h ], Ostap.Msg.t)
                   Checked.t;
     lookupProc : String.t ->
                  ([ `Const of 'b
                   | `Param of string * 'c
                   | `Proc of string * ('d * string * 'e) list
                   | `Type of string * 'f
                   | `VParam of string * 'g
                   | `Var of string * 'h ], Ostap.Msg.t)
                  Checked.t;
     lookupVar : String.t ->
                 ([ `Const of 'b
                  | `Param of string * 'c
                  | `Proc of string * ('d * string * 'e) list
                  | `Type of string * 'f
                  | `VParam of string * 'g
                  | `Var of string * 'h ], Ostap.Msg.t)
                 Checked.t;
     namer : unit -> < getName : String.t -> String.t >; up : unit -> unit;
     update : String.t ->
              [ `Const of 'b
              | `Param of string * 'c
              | `Proc of string * ('d * string * 'e) list
              | `Type of string * 'f
              | `VParam of string * 'g
              | `Var of string * 'h ] -> (unit, Ostap.Msg.t) Checked.t;
     updateConst : String.t -> 'b -> (unit, Ostap.Msg.t) Checked.t;
     updateVars : String.t list -> 'h -> (unit, Ostap.Msg.t) Checked.t; .. >
   as 'i) ->
  String.t ->
  ([ `Const of 'b
   | `Param of string * 'c
   | `Proc of string * ('d * string * 'e) list
   | `Type of string * 'f
   | `VParam of string * 'g
   | `Var of string * 'h ], Ostap.Msg.t)
  Checked.t
)
"L5.ml" 21 440 448 "L5.ml" 21 440 454
type(
  < getName : string -> 'a; .. > ->
  'b *
  (('c * ('a * ([> `Bool | `Int | `User of 'a * 'a * 'd ] as 'd)) list *
    (String.t list * 'd) list) *
   (String.t * (([> `Var ] as 'f) * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'e list) *
    ([> `Assign of
          ([> `Binop of 'i * 'h * 'h
            | `Const of 'j
            | `Field of 'h * 'k
            | `Ident of String.t * ([> `VParam of String.t * 'd ] as 'l)
            | `Index of 'h * 'h
            | `Unop of 'm * 'h ]
           as 'h) *
          ([> `Binop of 'o * 'n * 'n
            | `Const of 'p
            | `Field of 'n * 'q
            | `Ident of String.t * ([> `VParam of String.t * 'd ] as 'r)
            | `Index of 'n * 'n
            | `Unop of 's * 'n ]
           as 'n)
      | `Call of
          String.t *
          ([> `Binop of 'u * 't * 't
            | `Const of 'v
            | `Field of 't * 'w
            | `Ident of
                String.t *
                ([> `VParam of String.t * 'd | `Var of String.t * 'd ] as 'x)
            | `Index of 't * 't
            | `Unop of 'y * 't ]
           as 't)
          list * [> `Proc of 'z * (([> `Var ] as 'a1) * String.t * 'd) list ]
      | `Case of
          ([> `Binop of 'c1 * 'b1 * 'b1
            | `Const of 'd1
            | `Field of 'b1 * 'e1
            | `Ident of String.t * ([> `VParam of String.t * 'd ] as 'f1)
            | `Index of 'b1 * 'b1
            | `Unop of 'g1 * 'b1 ]
           as 'b1) *
          ([< `Atom of
                [> `Binop of 'i1 * 'h1 * 'h1
                 | `Const of 'j1
                 | `Field of 'h1 * 'k1
                 | `Ident of
                     String.t * ([> `VParam of String.t * 'd ] as 'l1)
                 | `Index of 'h1 * 'h1
                 | `Unop of 'm1 * 'h1 ]
                as 'h1
            | `Interval of 'h1 * 'h1 ]
           list * 'g list)
          list * 'g list
      | `For of
          ([> `Binop of 'c1 * 'n1 * 'n1
            | `Const of 'd1
            | `Field of 'n1 * 'e1
            | `Ident of String.t * 'f1
            | `Index of 'n1 * 'n1
            | `Unop of 'g1 * 'n1 ]
           as 'n1) *
          'b1 * 'b1 * 'h1 option * 'g list
      | `If of ('n * 'g list) list * 'g list
      | `While of 'n * 'g list ]
     as 'g)
    list as 'e)
   list) *
  'o1 ->
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) *
    (([> `Assign of
           (([> `Binop of 'i * 't1 * 't1
              | `Const of 'j
              | `Field of 's1 * 'k
              | `Ident of String.t * 'l
              | `Index of 's1 * 's1
              | `Unop of 'm * 't1 ]
             as 't1)
            Monad.Id.t as 's1) *
           (([> `Binop of 'o * 'v1 * 'v1
              | `Const of 'p
              | `Field of 'u1 * 'q
              | `Ident of String.t * 'r
              | `Index of 'u1 * 'u1
              | `Unop of 's * 'v1 ]
             as 'v1)
            Monad.Id.t as 'u1)
       | `Call of
           String.t *
           (([> `Binop of 'u * 'x1 * 'x1
              | `Const of 'v
              | `Field of 'w1 * 'w
              | `Ident of String.t * 'x
              | `Index of 'w1 * 'w1
              | `Unop of 'y * 'x1 ]
             as 'x1)
            Monad.Id.t as 'w1)
           list * [> `Proc of 'z * ('a1 * String.t * 'd) list ]
       | `Case of
           (([> `Binop of 'c1 * 'z1 * 'z1
              | `Const of 'd1
              | `Field of 'y1 * 'e1
              | `Ident of String.t * 'f1
              | `Index of 'y1 * 'y1
              | `Unop of 'g1 * 'z1 ]
             as 'z1)
            Monad.Id.t as 'y1) *
           ([> `Atom of
                 ([> `Binop of 'i1 * 'b2 * 'b2
                   | `Const of 'j1
                   | `Field of 'a2 * 'k1
                   | `Ident of String.t * 'l1
                   | `Index of 'a2 * 'a2
                   | `Unop of 'm1 * 'b2 ]
                  as 'b2)
                 Monad.Id.t as 'a2
             | `Interval of 'a2 * 'a2 ]
            list * 'q1 list)
           list * 'q1 list
       | `For of 'y1 * 'y1 * 'y1 * 'a2 option * 'q1 list
       | `If of ('u1 * 'r1 list) list * 'r1 list
       | `While of 'u1 * 'r1 list ]
      as 'r1)
     Monad.Id.t as 'q1)
    list)
   list) *
  'o1
)
ident(
  def lambda "L5.ml" 144 6751 6822 "L5.ml" 145 6823 6828
)
"L5.ml" 21 440 455 "L5.ml" 21 440 460
type(
  < getName : string -> 'a; .. > as 'c2
)
ident(
  def namer "L5.ml" 21 440 461 "L5.ml" 144 6751 6822
)
"L5.ml" 21 440 462 "L5.ml" 21 440 466
type(
  'b
)
ident(
  def name "L5.ml" 22 494 500 "L5.ml" 144 6751 6822
)
"L5.ml" 21 440 470 "L5.ml" 21 440 471
type(
  'c
)
ident(
  def c "L5.ml" 22 494 500 "L5.ml" 144 6751 6822
)
"L5.ml" 21 440 473 "L5.ml" 21 440 474
type(
  ('a * 'd) list
)
ident(
  def t "L5.ml" 22 494 500 "L5.ml" 144 6751 6822
)
"L5.ml" 21 440 476 "L5.ml" 21 440 477
type(
  (String.t list * 'd) list
)
ident(
  def v "L5.ml" 22 494 500 "L5.ml" 144 6751 6822
)
"L5.ml" 21 440 470 "L5.ml" 21 440 477
type(
  'c * ('a * 'd) list * (String.t list * 'd) list
)
"L5.ml" 21 440 480 "L5.ml" 21 440 481
type(
  'e list
)
ident(
  def p "L5.ml" 22 494 500 "L5.ml" 144 6751 6822
)
"L5.ml" 21 440 469 "L5.ml" 21 440 481
type(
  ('c * ('a * 'd) list * (String.t list * 'd) list) * 'e list
)
"L5.ml" 21 440 484 "L5.ml" 21 440 489
type(
  'o1
)
ident(
  def stmts "L5.ml" 22 494 500 "L5.ml" 144 6751 6822
)
"L5.ml" 21 440 462 "L5.ml" 21 440 489
type(
  'b * (('c * ('a * 'd) list * (String.t list * 'd) list) * 'e list) * 'o1
)
"L5.ml" 22 494 515 "L5.ml" 22 494 532
call(
  stack
)
"L5.ml" 23 536 557 "L5.ml" 23 536 574
call(
  stack
)
"L5.ml" 24 584 594 "L5.ml" 24 584 599
type(
  'd M.t ref
)
ident(
  def types "L5.ml" 25 620 626 "L5.ml" 144 6751 6822
)
"L5.ml" 24 584 605 "L5.ml" 24 584 608
type(
  'd M.t -> 'd M.t ref
)
ident(
  ext_ref Pervasives.ref
)
"L5.ml" 24 584 609 "L5.ml" 24 584 616
type(
  'd M.t
)
ident(
  ext_ref M.empty
)
"L5.ml" 24 584 605 "L5.ml" 24 584 616
type(
  'd M.t ref
)
"L5.ml" 25 620 630 "L5.ml" 25 620 636
type(
  S.t M.t ref
)
ident(
  def locals "L5.ml" 26 656 662 "L5.ml" 144 6751 6822
)
"L5.ml" 25 620 641 "L5.ml" 25 620 644
type(
  S.t M.t -> S.t M.t ref
)
ident(
  ext_ref Pervasives.ref
)
"L5.ml" 25 620 645 "L5.ml" 25 620 652
type(
  S.t M.t
)
ident(
  ext_ref M.empty
)
"L5.ml" 25 620 641 "L5.ml" 25 620 652
type(
  S.t M.t ref
)
"L5.ml" 26 656 666 "L5.ml" 26 656 675
type(
  M.key -> S.t -> unit
)
ident(
  def addLocals "L5.ml" 27 723 729 "L5.ml" 144 6751 6822
)
"L5.ml" 26 656 676 "L5.ml" 26 656 680
type(
  M.key
)
ident(
  def name "L5.ml" 26 656 681 "L5.ml" 26 656 716
)
"L5.ml" 26 656 681 "L5.ml" 26 656 682
type(
  S.t
)
ident(
  def l "L5.ml" 26 656 686 "L5.ml" 26 656 716
)
"L5.ml" 26 656 686 "L5.ml" 26 656 692
type(
  S.t M.t ref
)
ident(
  int_ref locals "L5.ml" 25 620 630 "L5.ml" 25 620 636
)
"L5.ml" 26 656 696 "L5.ml" 26 656 701
type(
  M.key -> S.t -> S.t M.t -> S.t M.t
)
ident(
  ext_ref M.add
)
"L5.ml" 26 656 702 "L5.ml" 26 656 706
type(
  M.key
)
ident(
  int_ref name "L5.ml" 26 656 676 "L5.ml" 26 656 680
)
"L5.ml" 26 656 707 "L5.ml" 26 656 708
type(
  S.t
)
ident(
  int_ref l "L5.ml" 26 656 681 "L5.ml" 26 656 682
)
"L5.ml" 26 656 710 "L5.ml" 26 656 716
type(
  S.t M.t ref
)
ident(
  int_ref locals "L5.ml" 25 620 630 "L5.ml" 25 620 636
)
"L5.ml" 26 656 709 "L5.ml" 26 656 716
type(
  S.t M.t
)
type(
  S.t M.t ref -> S.t M.t
)
ident(
  ext_ref Pervasives.( ! )
)
"L5.ml" 26 656 696 "L5.ml" 26 656 716
call(
  stack
)
type(
  S.t M.t
)
"L5.ml" 26 656 686 "L5.ml" 26 656 716
type(
  unit
)
type(
  S.t M.t ref -> S.t M.t -> unit
)
ident(
  ext_ref Pervasives.( := )
)
"L5.ml" 26 656 681 "L5.ml" 26 656 716
type(
  S.t -> unit
)
"L5.ml" 26 656 676 "L5.ml" 26 656 716
type(
  M.key -> S.t -> unit
)
"L5.ml" 27 723 733 "L5.ml" 27 723 740
type(
  M.key -> 'd -> unit
)
ident(
  def addType "L5.ml" 28 787 793 "L5.ml" 144 6751 6822
)
"L5.ml" 27 723 741 "L5.ml" 27 723 745
type(
  M.key
)
ident(
  def name "L5.ml" 27 723 746 "L5.ml" 27 723 783
)
"L5.ml" 27 723 746 "L5.ml" 27 723 749
type(
  'd
)
ident(
  def typ "L5.ml" 27 723 753 "L5.ml" 27 723 783
)
"L5.ml" 27 723 753 "L5.ml" 27 723 758
type(
  'd M.t ref
)
ident(
  int_ref types "L5.ml" 24 584 594 "L5.ml" 24 584 599
)
"L5.ml" 27 723 762 "L5.ml" 27 723 767
type(
  M.key -> 'd -> 'd M.t -> 'd M.t
)
ident(
  ext_ref M.add
)
"L5.ml" 27 723 768 "L5.ml" 27 723 772
type(
  M.key
)
ident(
  int_ref name "L5.ml" 27 723 741 "L5.ml" 27 723 745
)
"L5.ml" 27 723 773 "L5.ml" 27 723 776
type(
  'd
)
ident(
  int_ref typ "L5.ml" 27 723 746 "L5.ml" 27 723 749
)
"L5.ml" 27 723 778 "L5.ml" 27 723 783
type(
  'd M.t ref
)
ident(
  int_ref types "L5.ml" 24 584 594 "L5.ml" 24 584 599
)
"L5.ml" 27 723 777 "L5.ml" 27 723 783
type(
  'd M.t
)
type(
  'd M.t ref -> 'd M.t
)
ident(
  ext_ref Pervasives.( ! )
)
"L5.ml" 27 723 762 "L5.ml" 27 723 783
call(
  stack
)
type(
  'd M.t
)
"L5.ml" 27 723 753 "L5.ml" 27 723 783
type(
  unit
)
type(
  'd M.t ref -> 'd M.t -> unit
)
ident(
  ext_ref Pervasives.( := )
)
"L5.ml" 27 723 746 "L5.ml" 27 723 783
type(
  'd -> unit
)
"L5.ml" 27 723 741 "L5.ml" 27 723 783
type(
  M.key -> 'd -> unit
)
"L5.ml" 28 787 797 "L5.ml" 28 787 803
type(
  M.key -> 'd
)
ident(
  def typeOf "L5.ml" 29 839 845 "L5.ml" 144 6751 6822
)
"L5.ml" 28 787 805 "L5.ml" 28 787 809
type(
  M.key
)
ident(
  def name "L5.ml" 28 787 817 "L5.ml" 28 787 835
)
"L5.ml" 28 787 817 "L5.ml" 28 787 823
type(
  M.key -> 'd M.t -> 'd
)
ident(
  ext_ref M.find
)
"L5.ml" 28 787 824 "L5.ml" 28 787 828
type(
  M.key
)
ident(
  int_ref name "L5.ml" 28 787 805 "L5.ml" 28 787 809
)
"L5.ml" 28 787 830 "L5.ml" 28 787 835
type(
  'd M.t ref
)
ident(
  int_ref types "L5.ml" 24 584 594 "L5.ml" 24 584 599
)
"L5.ml" 28 787 829 "L5.ml" 28 787 835
type(
  'd M.t
)
type(
  'd M.t ref -> 'd M.t
)
ident(
  ext_ref Pervasives.( ! )
)
"L5.ml" 28 787 817 "L5.ml" 28 787 835
call(
  tail
)
type(
  'd
)
"L5.ml" 28 787 805 "L5.ml" 28 787 835
type(
  M.key -> 'd
)
"L5.ml" 29 839 849 "L5.ml" 29 839 856
type(
  S.elt -> M.key -> bool
)
ident(
  def localOf "L5.ml" 30 933 939 "L5.ml" 144 6751 6822
)
"L5.ml" 29 839 857 "L5.ml" 29 839 861
type(
  S.elt
)
ident(
  def name "L5.ml" 29 839 862 "L5.ml" 29 839 929
)
"L5.ml" 29 839 862 "L5.ml" 29 839 866
type(
  M.key
)
ident(
  def proc "L5.ml" 29 839 869 "L5.ml" 29 839 929
)
"L5.ml" 29 839 873 "L5.ml" 29 839 878
type(
  S.elt -> S.t -> bool
)
ident(
  ext_ref S.mem
)
"L5.ml" 29 839 879 "L5.ml" 29 839 883
type(
  S.elt
)
ident(
  int_ref name "L5.ml" 29 839 857 "L5.ml" 29 839 861
)
"L5.ml" 29 839 885 "L5.ml" 29 839 891
type(
  M.key -> S.t M.t -> S.t
)
ident(
  ext_ref M.find
)
"L5.ml" 29 839 892 "L5.ml" 29 839 896
type(
  M.key
)
ident(
  int_ref proc "L5.ml" 29 839 862 "L5.ml" 29 839 866
)
"L5.ml" 29 839 898 "L5.ml" 29 839 904
type(
  S.t M.t ref
)
ident(
  int_ref locals "L5.ml" 25 620 630 "L5.ml" 25 620 636
)
"L5.ml" 29 839 897 "L5.ml" 29 839 904
type(
  S.t M.t
)
type(
  S.t M.t ref -> S.t M.t
)
ident(
  ext_ref Pervasives.( ! )
)
"L5.ml" 29 839 884 "L5.ml" 29 839 905
call(
  stack
)
type(
  S.t
)
"L5.ml" 29 839 873 "L5.ml" 29 839 905
call(
  stack
)
type(
  bool
)
"L5.ml" 29 839 911 "L5.ml" 29 839 920
type(
  exn
)
"L5.ml" 29 839 924 "L5.ml" 29 839 929
type(
  bool
)
"L5.ml" 29 839 869 "L5.ml" 29 839 929
type(
  bool
)
"L5.ml" 29 839 862 "L5.ml" 29 839 929
type(
  M.key -> bool
)
"L5.ml" 29 839 857 "L5.ml" 29 839 929
type(
  S.elt -> M.key -> bool
)
"L5.ml" 30 933 943 "L5.ml" 30 933 950
type(
  ('d2 * M.key * 'd) list -> (M.key list * 'd) list -> S.t
)
ident(
  def getVars "L5.ml" 38 1226 1232 "L5.ml" 144 6751 6822
)
"L5.ml" 30 933 951 "L5.ml" 30 933 955
type(
  ('d2 * M.key * 'd) list
)
ident(
  def args "L5.ml" 30 933 956 "L5.ml" 36 1201 1212
)
"L5.ml" 30 933 956 "L5.ml" 30 933 957
type(
  (M.key list * 'd) list
)
ident(
  def v "L5.ml" 31 960 968 "L5.ml" 36 1201 1212
)
"L5.ml" 31 960 968 "L5.ml" 31 960 977
type(
  (S.t -> M.key list * 'd -> S.t) -> S.t -> (M.key list * 'd) list -> S.t
)
ident(
  ext_ref List.fold_left
)
"L5.ml" 32 979 994 "L5.ml" 32 979 997
type(
  S.t
)
ident(
  def acc "L5.ml" 32 979 998 "L5.ml" 33 1013 1095
)
"L5.ml" 32 979 999 "L5.ml" 32 979 1004
type(
  M.key list
)
ident(
  def names "L5.ml" 33 1013 1026 "L5.ml" 33 1013 1095
)
"L5.ml" 32 979 1006 "L5.ml" 32 979 1007
type(
  'd
)
ident(
  def t "L5.ml" 33 1013 1026 "L5.ml" 33 1013 1095
)
"L5.ml" 32 979 999 "L5.ml" 32 979 1007
type(
  M.key list * 'd
)
"L5.ml" 33 1013 1026 "L5.ml" 33 1013 1036
type(
  (M.key -> S.t -> S.t) -> M.key list -> S.t -> S.t
)
ident(
  ext_ref List.fold_right
)
"L5.ml" 33 1013 1042 "L5.ml" 33 1013 1046
type(
  M.key
)
ident(
  def name "L5.ml" 33 1013 1047 "L5.ml" 33 1013 1084
)
"L5.ml" 33 1013 1047 "L5.ml" 33 1013 1050
type(
  S.t
)
ident(
  def acc "L5.ml" 33 1013 1054 "L5.ml" 33 1013 1084
)
"L5.ml" 33 1013 1054 "L5.ml" 33 1013 1061
type(
  M.key -> 'd -> unit
)
ident(
  int_ref addType "L5.ml" 27 723 733 "L5.ml" 27 723 740
)
"L5.ml" 33 1013 1062 "L5.ml" 33 1013 1066
type(
  M.key
)
ident(
  int_ref name "L5.ml" 33 1013 1042 "L5.ml" 33 1013 1046
)
"L5.ml" 33 1013 1067 "L5.ml" 33 1013 1068
type(
  'd
)
ident(
  int_ref t "L5.ml" 32 979 1006 "L5.ml" 32 979 1007
)
"L5.ml" 33 1013 1054 "L5.ml" 33 1013 1068
call(
  stack
)
type(
  unit
)
"L5.ml" 33 1013 1070 "L5.ml" 33 1013 1075
type(
  S.elt -> S.t -> S.t
)
ident(
  ext_ref S.add
)
"L5.ml" 33 1013 1076 "L5.ml" 33 1013 1080
type(
  M.key
)
ident(
  int_ref name "L5.ml" 33 1013 1042 "L5.ml" 33 1013 1046
)
"L5.ml" 33 1013 1081 "L5.ml" 33 1013 1084
type(
  S.t
)
ident(
  int_ref acc "L5.ml" 33 1013 1047 "L5.ml" 33 1013 1050
)
"L5.ml" 33 1013 1070 "L5.ml" 33 1013 1084
call(
  tail
)
type(
  S.t
)
"L5.ml" 33 1013 1054 "L5.ml" 33 1013 1084
type(
  S.t
)
"L5.ml" 33 1013 1047 "L5.ml" 33 1013 1084
type(
  S.t -> S.t
)
"L5.ml" 33 1013 1037 "L5.ml" 33 1013 1085
type(
  M.key -> S.t -> S.t
)
"L5.ml" 33 1013 1086 "L5.ml" 33 1013 1091
type(
  M.key list
)
ident(
  int_ref names "L5.ml" 32 979 999 "L5.ml" 32 979 1004
)
"L5.ml" 33 1013 1092 "L5.ml" 33 1013 1095
type(
  S.t
)
ident(
  int_ref acc "L5.ml" 32 979 994 "L5.ml" 32 979 997
)
"L5.ml" 33 1013 1026 "L5.ml" 33 1013 1095
call(
  tail
)
type(
  S.t
)
"L5.ml" 32 979 998 "L5.ml" 33 1013 1095
type(
  M.key list * 'd -> S.t
)
"L5.ml" 32 979 989 "L5.ml" 34 1096 1107
type(
  S.t -> M.key list * 'd -> S.t
)
"L5.ml" 35 1109 1120 "L5.ml" 35 1109 1129
type(
  (S.t -> 'd2 * M.key * 'd -> S.t) -> S.t -> ('d2 * M.key * 'd) list -> S.t
)
ident(
  ext_ref List.fold_left
)
"L5.ml" 35 1109 1135 "L5.ml" 35 1109 1138
type(
  S.t
)
ident(
  def acc "L5.ml" 35 1109 1139 "L5.ml" 35 1109 1185
)
"L5.ml" 35 1109 1140 "L5.ml" 35 1109 1141
type(
  'd2
)
"L5.ml" 35 1109 1143 "L5.ml" 35 1109 1147
type(
  M.key
)
ident(
  def name "L5.ml" 35 1109 1155 "L5.ml" 35 1109 1185
)
"L5.ml" 35 1109 1149 "L5.ml" 35 1109 1150
type(
  'd
)
ident(
  def t "L5.ml" 35 1109 1155 "L5.ml" 35 1109 1185
)
"L5.ml" 35 1109 1140 "L5.ml" 35 1109 1150
type(
  'd2 * M.key * 'd
)
"L5.ml" 35 1109 1155 "L5.ml" 35 1109 1162
type(
  M.key -> 'd -> unit
)
ident(
  int_ref addType "L5.ml" 27 723 733 "L5.ml" 27 723 740
)
"L5.ml" 35 1109 1163 "L5.ml" 35 1109 1167
type(
  M.key
)
ident(
  int_ref name "L5.ml" 35 1109 1143 "L5.ml" 35 1109 1147
)
"L5.ml" 35 1109 1168 "L5.ml" 35 1109 1169
type(
  'd
)
ident(
  int_ref t "L5.ml" 35 1109 1149 "L5.ml" 35 1109 1150
)
"L5.ml" 35 1109 1155 "L5.ml" 35 1109 1169
call(
  stack
)
type(
  unit
)
"L5.ml" 35 1109 1171 "L5.ml" 35 1109 1176
type(
  S.elt -> S.t -> S.t
)
ident(
  ext_ref S.add
)
"L5.ml" 35 1109 1177 "L5.ml" 35 1109 1181
type(
  M.key
)
ident(
  int_ref name "L5.ml" 35 1109 1143 "L5.ml" 35 1109 1147
)
"L5.ml" 35 1109 1182 "L5.ml" 35 1109 1185
type(
  S.t
)
ident(
  int_ref acc "L5.ml" 35 1109 1135 "L5.ml" 35 1109 1138
)
"L5.ml" 35 1109 1171 "L5.ml" 35 1109 1185
call(
  tail
)
type(
  S.t
)
"L5.ml" 35 1109 1155 "L5.ml" 35 1109 1185
type(
  S.t
)
"L5.ml" 35 1109 1139 "L5.ml" 35 1109 1185
type(
  'd2 * M.key * 'd -> S.t
)
"L5.ml" 35 1109 1130 "L5.ml" 35 1109 1186
type(
  S.t -> 'd2 * M.key * 'd -> S.t
)
"L5.ml" 35 1109 1187 "L5.ml" 35 1109 1194
type(
  S.t
)
ident(
  ext_ref S.empty
)
"L5.ml" 35 1109 1195 "L5.ml" 35 1109 1199
type(
  ('d2 * M.key * 'd) list
)
ident(
  int_ref args "L5.ml" 30 933 951 "L5.ml" 30 933 955
)
"L5.ml" 35 1109 1119 "L5.ml" 35 1109 1200
call(
  stack
)
type(
  S.t
)
"L5.ml" 36 1201 1211 "L5.ml" 36 1201 1212
type(
  (M.key list * 'd) list
)
ident(
  int_ref v "L5.ml" 30 933 956 "L5.ml" 30 933 957
)
"L5.ml" 31 960 968 "L5.ml" 36 1201 1212
call(
  tail
)
type(
  S.t
)
"L5.ml" 30 933 956 "L5.ml" 36 1201 1212
type(
  (M.key list * 'd) list -> S.t
)
"L5.ml" 30 933 951 "L5.ml" 36 1201 1212
type(
  ('d2 * M.key * 'd) list -> (M.key list * 'd) list -> S.t
)
"L5.ml" 38 1226 1236 "L5.ml" 38 1226 1244
type(
  S.t -> S.elt -> bool
)
ident(
  def testVars "L5.ml" 39 1291 1297 "L5.ml" 144 6751 6822
)
"L5.ml" 38 1226 1245 "L5.ml" 38 1226 1249
type(
  S.t
)
ident(
  def vars "L5.ml" 38 1226 1252 "L5.ml" 38 1226 1287
)
"L5.ml" 38 1226 1257 "L5.ml" 38 1226 1261
type(
  S.elt
)
ident(
  def name "L5.ml" 38 1226 1265 "L5.ml" 38 1226 1286
)
"L5.ml" 38 1226 1265 "L5.ml" 38 1226 1268
type(
  bool -> bool
)
ident(
  ext_ref Pervasives.not
)
"L5.ml" 38 1226 1270 "L5.ml" 38 1226 1275
type(
  S.elt -> S.t -> bool
)
ident(
  ext_ref S.mem
)
"L5.ml" 38 1226 1276 "L5.ml" 38 1226 1280
type(
  S.elt
)
ident(
  int_ref name "L5.ml" 38 1226 1257 "L5.ml" 38 1226 1261
)
"L5.ml" 38 1226 1281 "L5.ml" 38 1226 1285
type(
  S.t
)
ident(
  int_ref vars "L5.ml" 38 1226 1245 "L5.ml" 38 1226 1249
)
"L5.ml" 38 1226 1269 "L5.ml" 38 1226 1286
call(
  stack
)
type(
  bool
)
"L5.ml" 38 1226 1265 "L5.ml" 38 1226 1286
type(
  bool
)
"L5.ml" 38 1226 1252 "L5.ml" 38 1226 1287
type(
  S.elt -> bool
)
"L5.ml" 38 1226 1245 "L5.ml" 38 1226 1287
type(
  S.t -> S.elt -> bool
)
"L5.ml" 39 1291 1305 "L5.ml" 39 1291 1319
type(
  (S.elt -> bool) ->
  S.t M.t * S.t M.t ->
  (M.key * ('f2 * M.key * 'd) list *
   (('g2 * 'h2 * (M.key list * 'd) list) * 'e2 list) *
   ([> `Assign of
         ([> `Binop of 'k2 * 'j2 * 'j2
           | `Const of 'l2
           | `Field of 'j2 * 'm2
           | `Ident of S.elt * 'n2
           | `Index of 'j2 * 'j2
           | `Unop of 'o2 * 'j2 ]
          as 'j2) *
         ([> `Binop of 'q2 * 'p2 * 'p2
           | `Const of 'r2
           | `Field of 'p2 * 's2
           | `Ident of S.elt * 't2
           | `Index of 'p2 * 'p2
           | `Unop of 'u2 * 'p2 ]
          as 'p2)
     | `Call of
         S.elt *
         ([> `Binop of 'w2 * 'v2 * 'v2
           | `Const of 'x2
           | `Field of 'v2 * 'y2
           | `Ident of S.elt * 'z2
           | `Index of 'v2 * 'v2
           | `Unop of 'a3 * 'v2 ]
          as 'v2)
         list * 'b3
     | `Case of
         ([> `Binop of 'd3 * 'c3 * 'c3
           | `Const of 'e3
           | `Field of 'c3 * 'f3
           | `Ident of S.elt * 'g3
           | `Index of 'c3 * 'c3
           | `Unop of 'h3 * 'c3 ]
          as 'c3) *
         ([< `Atom of
               [> `Binop of 'j3 * 'i3 * 'i3
                | `Const of 'k3
                | `Field of 'i3 * 'l3
                | `Ident of S.elt * 'm3
                | `Index of 'i3 * 'i3
                | `Unop of 'n3 * 'i3 ]
               as 'i3
           | `Interval of 'i3 * 'i3 ]
          list * 'i2 list)
         list * 'i2 list
     | `For of
         ([> `Binop of 'p3 * 'o3 * 'o3
           | `Const of 'q3
           | `Field of 'o3 * 'r3
           | `Ident of S.elt * 's3
           | `Index of 'o3 * 'o3
           | `Unop of 't3 * 'o3 ]
          as 'o3) *
         'c3 * 'c3 * 'i3 option * 'i2 list
     | `If of ('p2 * 'i2 list) list * 'i2 list
     | `While of 'p2 * 'i2 list ]
    as 'i2)
   list as 'e2) ->
  S.t M.t * S.t M.t
)
ident(
  def updateProcInfo "L5.ml" 39 1291 1297 "L5.ml" 144 6751 6822
)
"L5.ml" 39 1291 1320 "L5.ml" 39 1291 1329
type(
  S.elt -> bool
)
ident(
  def notGlobal "L5.ml" 39 1291 1330 "L5.ml" 67 2713 2809
)
"L5.ml" 39 1291 1331 "L5.ml" 39 1291 1336
type(
  S.t M.t
)
ident(
  def calls "L5.ml" 39 1291 1344 "L5.ml" 67 2713 2809
)
"L5.ml" 39 1291 1338 "L5.ml" 39 1291 1342
type(
  S.t M.t
)
ident(
  def uses "L5.ml" 39 1291 1344 "L5.ml" 67 2713 2809
)
"L5.ml" 39 1291 1331 "L5.ml" 39 1291 1342
type(
  S.t M.t * S.t M.t
)
"L5.ml" 39 1291 1345 "L5.ml" 39 1291 1349
type(
  M.key
)
ident(
  def name "L5.ml" 40 1390 1398 "L5.ml" 67 2713 2809
)
"L5.ml" 39 1291 1351 "L5.ml" 39 1291 1355
type(
  ('f2 * M.key * 'd) list
)
ident(
  def args "L5.ml" 40 1390 1398 "L5.ml" 67 2713 2809
)
"L5.ml" 39 1291 1359 "L5.ml" 39 1291 1360
type(
  'g2
)
"L5.ml" 39 1291 1362 "L5.ml" 39 1291 1363
type(
  'h2
)
"L5.ml" 39 1291 1365 "L5.ml" 39 1291 1366
type(
  (M.key list * 'd) list
)
ident(
  def v "L5.ml" 40 1390 1398 "L5.ml" 67 2713 2809
)
"L5.ml" 39 1291 1359 "L5.ml" 39 1291 1366
type(
  'g2 * 'h2 * (M.key list * 'd) list
)
"L5.ml" 39 1291 1369 "L5.ml" 39 1291 1370
type(
  'e2 list as 'u3
)
ident(
  def p "L5.ml" 40 1390 1398 "L5.ml" 67 2713 2809
)
"L5.ml" 39 1291 1358 "L5.ml" 39 1291 1370
type(
  ('g2 * 'h2 * (M.key list * 'd) list) * 'u3 as 'v3
)
"L5.ml" 39 1291 1373 "L5.ml" 39 1291 1378
type(
  'i2 list
)
ident(
  def stmts "L5.ml" 40 1390 1398 "L5.ml" 67 2713 2809
)
"L5.ml" 39 1291 1345 "L5.ml" 39 1291 1378
type(
  'e2
)
"L5.ml" 40 1390 1402 "L5.ml" 40 1390 1406
type(
  S.t
)
ident(
  def vars "L5.ml" 41 1427 1435 "L5.ml" 67 2713 2809
)
"L5.ml" 40 1390 1409 "L5.ml" 40 1390 1416
type(
  ('f2 * M.key * 'd) list -> (M.key list * 'd) list -> S.t
)
ident(
  int_ref getVars "L5.ml" 30 933 943 "L5.ml" 30 933 950
)
"L5.ml" 40 1390 1417 "L5.ml" 40 1390 1421
type(
  ('f2 * M.key * 'd) list
)
ident(
  int_ref args "L5.ml" 39 1291 1351 "L5.ml" 39 1291 1355
)
"L5.ml" 40 1390 1422 "L5.ml" 40 1390 1423
type(
  (M.key list * 'd) list
)
ident(
  int_ref v "L5.ml" 39 1291 1365 "L5.ml" 39 1291 1366
)
"L5.ml" 40 1390 1409 "L5.ml" 40 1390 1423
call(
  stack
)
type(
  S.t
)
"L5.ml" 41 1427 1435 "L5.ml" 41 1427 1444
type(
  M.key -> S.t -> unit
)
ident(
  int_ref addLocals "L5.ml" 26 656 666 "L5.ml" 26 656 675
)
"L5.ml" 41 1427 1445 "L5.ml" 41 1427 1449
type(
  M.key
)
ident(
  int_ref name "L5.ml" 39 1291 1345 "L5.ml" 39 1291 1349
)
"L5.ml" 41 1427 1450 "L5.ml" 41 1427 1454
type(
  S.t
)
ident(
  int_ref vars "L5.ml" 40 1390 1402 "L5.ml" 40 1390 1406
)
"L5.ml" 41 1427 1435 "L5.ml" 41 1427 1454
call(
  stack
)
type(
  unit
)
"L5.ml" 42 1456 1468 "L5.ml" 42 1456 1476
type(
  S.elt -> bool
)
ident(
  def notLocal "L5.ml" 43 1496 1504 "L5.ml" 67 2713 2809
)
"L5.ml" 42 1456 1479 "L5.ml" 42 1456 1487
type(
  S.t -> S.elt -> bool
)
ident(
  int_ref testVars "L5.ml" 38 1226 1236 "L5.ml" 38 1226 1244
)
"L5.ml" 42 1456 1488 "L5.ml" 42 1456 1492
type(
  S.t
)
ident(
  int_ref vars "L5.ml" 40 1390 1402 "L5.ml" 40 1390 1406
)
"L5.ml" 42 1456 1479 "L5.ml" 42 1456 1492
call(
  stack
)
type(
  S.elt -> bool
)
"L5.ml" 43 1496 1508 "L5.ml" 43 1496 1514
type(
  S.t ref
)
ident(
  def called "L5.ml" 44 1551 1559 "L5.ml" 67 2713 2809
)
"L5.ml" 43 1496 1516 "L5.ml" 43 1496 1520
type(
  S.t ref
)
ident(
  def used "L5.ml" 44 1551 1559 "L5.ml" 67 2713 2809
)
"L5.ml" 43 1496 1508 "L5.ml" 43 1496 1520
type(
  S.t ref * S.t ref
)
"L5.ml" 43 1496 1523 "L5.ml" 43 1496 1526
type(
  S.t -> S.t ref
)
ident(
  ext_ref Pervasives.ref
)
"L5.ml" 43 1496 1527 "L5.ml" 43 1496 1534
type(
  S.t
)
ident(
  ext_ref S.empty
)
"L5.ml" 43 1496 1523 "L5.ml" 43 1496 1534
type(
  S.t ref
)
"L5.ml" 43 1496 1536 "L5.ml" 43 1496 1539
type(
  S.t -> S.t ref
)
ident(
  ext_ref Pervasives.ref
)
"L5.ml" 43 1496 1540 "L5.ml" 43 1496 1547
type(
  S.t
)
ident(
  ext_ref S.empty
)
"L5.ml" 43 1496 1536 "L5.ml" 43 1496 1547
type(
  S.t ref
)
"L5.ml" 43 1496 1523 "L5.ml" 43 1496 1547
type(
  S.t ref * S.t ref
)
"L5.ml" 44 1551 1563 "L5.ml" 44 1551 1566
type(
  S.elt -> unit
)
ident(
  def var "L5.ml" 45 1643 1651 "L5.ml" 67 2713 2809
)
"L5.ml" 44 1551 1568 "L5.ml" 44 1551 1572
type(
  S.elt
)
ident(
  def name "L5.ml" 44 1551 1575 "L5.ml" 44 1551 1639
)
"L5.ml" 44 1551 1578 "L5.ml" 44 1551 1586
type(
  S.elt -> bool
)
ident(
  int_ref notLocal "L5.ml" 42 1456 1468 "L5.ml" 42 1456 1476
)
"L5.ml" 44 1551 1587 "L5.ml" 44 1551 1591
type(
  S.elt
)
ident(
  int_ref name "L5.ml" 44 1551 1568 "L5.ml" 44 1551 1572
)
"L5.ml" 44 1551 1578 "L5.ml" 44 1551 1591
call(
  stack
)
type(
  bool
)
"L5.ml" 44 1551 1595 "L5.ml" 44 1551 1604
type(
  S.elt -> bool
)
ident(
  int_ref notGlobal "L5.ml" 39 1291 1320 "L5.ml" 39 1291 1329
)
"L5.ml" 44 1551 1605 "L5.ml" 44 1551 1609
type(
  S.elt
)
ident(
  int_ref name "L5.ml" 44 1551 1568 "L5.ml" 44 1551 1572
)
"L5.ml" 44 1551 1595 "L5.ml" 44 1551 1609
call(
  stack
)
type(
  bool
)
"L5.ml" 44 1551 1578 "L5.ml" 44 1551 1609
type(
  bool
)
type(
  bool -> bool -> bool
)
ident(
  ext_ref Pervasives.( && )
)
"L5.ml" 44 1551 1615 "L5.ml" 44 1551 1619
type(
  S.t ref
)
ident(
  int_ref used "L5.ml" 43 1496 1516 "L5.ml" 43 1496 1520
)
"L5.ml" 44 1551 1623 "L5.ml" 44 1551 1628
type(
  S.elt -> S.t -> S.t
)
ident(
  ext_ref S.add
)
"L5.ml" 44 1551 1629 "L5.ml" 44 1551 1633
type(
  S.elt
)
ident(
  int_ref name "L5.ml" 44 1551 1568 "L5.ml" 44 1551 1572
)
"L5.ml" 44 1551 1635 "L5.ml" 44 1551 1639
type(
  S.t ref
)
ident(
  int_ref used "L5.ml" 43 1496 1516 "L5.ml" 43 1496 1520
)
"L5.ml" 44 1551 1634 "L5.ml" 44 1551 1639
type(
  S.t
)
type(
  S.t ref -> S.t
)
ident(
  ext_ref Pervasives.( ! )
)
"L5.ml" 44 1551 1623 "L5.ml" 44 1551 1639
call(
  stack
)
type(
  S.t
)
"L5.ml" 44 1551 1615 "L5.ml" 44 1551 1639
type(
  unit
)
type(
  S.t ref -> S.t -> unit
)
ident(
  ext_ref Pervasives.( := )
)
"L5.ml" 44 1551 1575 "L5.ml" 44 1551 1639
type(
  unit
)
"L5.ml" 44 1551 1568 "L5.ml" 44 1551 1639
type(
  S.elt -> unit
)
"L5.ml" 45 1643 1655 "L5.ml" 45 1643 1659
type(
  S.elt -> unit
)
ident(
  def proc "L5.ml" 46 1707 1715 "L5.ml" 67 2713 2809
)
"L5.ml" 45 1643 1660 "L5.ml" 45 1643 1664
type(
  S.elt
)
ident(
  def name "L5.ml" 45 1643 1667 "L5.ml" 45 1643 1695
)
"L5.ml" 45 1643 1667 "L5.ml" 45 1643 1673
type(
  S.t ref
)
ident(
  int_ref called "L5.ml" 43 1496 1508 "L5.ml" 43 1496 1514
)
"L5.ml" 45 1643 1677 "L5.ml" 45 1643 1682
type(
  S.elt -> S.t -> S.t
)
ident(
  ext_ref S.add
)
"L5.ml" 45 1643 1683 "L5.ml" 45 1643 1687
type(
  S.elt
)
ident(
  int_ref name "L5.ml" 45 1643 1660 "L5.ml" 45 1643 1664
)
"L5.ml" 45 1643 1689 "L5.ml" 45 1643 1695
type(
  S.t ref
)
ident(
  int_ref called "L5.ml" 43 1496 1508 "L5.ml" 43 1496 1514
)
"L5.ml" 45 1643 1688 "L5.ml" 45 1643 1695
type(
  S.t
)
type(
  S.t ref -> S.t
)
ident(
  ext_ref Pervasives.( ! )
)
"L5.ml" 45 1643 1677 "L5.ml" 45 1643 1695
call(
  stack
)
type(
  S.t
)
"L5.ml" 45 1643 1667 "L5.ml" 45 1643 1695
type(
  unit
)
type(
  S.t ref -> S.t -> unit
)
ident(
  ext_ref Pervasives.( := )
)
"L5.ml" 45 1643 1660 "L5.ml" 45 1643 1695
type(
  S.elt -> unit
)
"L5.ml" 46 1707 1715 "L5.ml" 46 1707 1719
type(
  ('i2 -> unit Monad.Id.t Monad.Id.t) -> 'i2 list -> unit
)
ident(
  ext_ref List.iter
)
"L5.ml" 46 1707 1725 "L5.ml" 46 1707 1729
type(
  'i2
)
ident(
  def stmt "L5.ml" 47 1734 1750 "L5.ml" 65 2670 2690
)
"L5.ml" 47 1734 1758 "L5.ml" 47 1734 1762
type(
  ([> `Binop of 'x3 * 'w3 * 'w3
    | `Const of 'y3
    | `Field of 'w3 * 'z3
    | `Ident of S.elt * 'a4
    | `Index of 'w3 * 'w3
    | `Unop of 'b4 * 'w3 ]
   as 'w3) ->
  unit Monad.Id.t
)
ident(
  def expr "L5.ml" 47 1734 1750 "L5.ml" 65 2670 2690
)
"L5.ml" 47 1734 1763 "L5.ml" 47 1734 1764
type(
  'w3
)
ident(
  def e "L5.ml" 47 1734 1767 "L5.ml" 55 2173 2198
)
"L5.ml" 48 1770 1788 "L5.ml" 48 1770 1809
type(
  < binop : 'w3 -> 'x3 -> unit -> unit -> unit Monad.Id.t;
    const : 'w3 -> 'y3 -> unit Monad.Id.t;
    unop : 'w3 -> 'b4 -> unit -> unit Monad.Id.t > ->
  (('w3 -> unit Monad.Id.t) -> 'w3 -> unit Monad.Id.t) ->
  'w3 -> unit Monad.Id.t
)
ident(
  ext_ref SimpleExpression.imap
)
"L5.ml" 48 1770 1811 "L5.ml" 48 1770 1832
type(
  ('w3 ->
   _[> `Binop of 'x3 * unit * unit | `Const of 'y3 | `Unop of 'b4 * unit ] ->
   unit) ->
  < binop : 'w3 -> 'x3 -> unit -> unit -> unit Monad.Id.t;
    const : 'w3 -> 'y3 -> unit Monad.Id.t;
    unop : 'w3 -> 'b4 -> unit -> unit Monad.Id.t >
)
ident(
  ext_ref SimpleExpression.mapT
)
"L5.ml" 48 1770 1838 "L5.ml" 48 1770 1839
type(
  'w3
)
"L5.ml" 48 1770 1840 "L5.ml" 48 1770 1841
type(
  _[> `Binop of 'x3 * unit * unit | `Const of 'y3 | `Unop of 'b4 * unit ]
  as 'c4
)
"L5.ml" 48 1770 1845 "L5.ml" 48 1770 1847
type(
  unit
)
"L5.ml" 48 1770 1840 "L5.ml" 48 1770 1847
type(
  'c4 -> unit
)
"L5.ml" 48 1770 1833 "L5.ml" 48 1770 1848
type(
  'w3 -> 'c4 -> unit
)
"L5.ml" 48 1770 1810 "L5.ml" 48 1770 1849
call(
  stack
)
type(
  < binop : 'w3 -> 'x3 -> unit -> unit -> unit Monad.Id.t;
    const : 'w3 -> 'y3 -> unit Monad.Id.t;
    unop : 'w3 -> 'b4 -> unit -> unit Monad.Id.t >
)
"L5.ml" 48 1770 1788 "L5.ml" 48 1770 1849
call(
  stack
)
type(
  (('w3 -> unit Monad.Id.t) -> 'w3 -> unit Monad.Id.t) ->
  'w3 -> unit Monad.Id.t
)
"L5.ml" 49 1853 1876 "L5.ml" 49 1853 1879
type(
  ('w3 -> unit Monad.Id.t) -> 'w3 -> unit Monad.Id.t
)
ident(
  def ext "L5.ml" 49 1853 1883 "L5.ml" 53 2052 2088
)
"L5.ml" 50 1892 1921 "L5.ml" 50 1892 1922
type(
  'w3
)
ident(
  def x "L5.ml" 50 1892 1930 "L5.ml" 50 1892 1952
)
"L5.ml" 50 1892 1924 "L5.ml" 50 1892 1925
type(
  'w3
)
ident(
  def i "L5.ml" 50 1892 1930 "L5.ml" 50 1892 1952
)
"L5.ml" 50 1892 1921 "L5.ml" 50 1892 1925
type(
  'w3 * 'w3
)
"L5.ml" 50 1892 1913 "L5.ml" 50 1892 1926
type(
  'w3
)
"L5.ml" 50 1892 1930 "L5.ml" 50 1892 1933
type(
  ('w3 -> unit Monad.Id.t) -> 'w3 -> unit Monad.Id.t
)
ident(
  int_ref ext "L5.ml" 49 1853 1876 "L5.ml" 49 1853 1879
)
"L5.ml" 50 1892 1934 "L5.ml" 50 1892 1938
type(
  'w3 -> unit Monad.Id.t
)
ident(
  int_ref expr "L5.ml" 47 1734 1758 "L5.ml" 47 1734 1762
)
"L5.ml" 50 1892 1939 "L5.ml" 50 1892 1940
type(
  'w3
)
ident(
  int_ref x "L5.ml" 50 1892 1921 "L5.ml" 50 1892 1922
)
"L5.ml" 50 1892 1930 "L5.ml" 50 1892 1940
call(
  stack
)
type(
  unit Monad.Id.t
)
"L5.ml" 50 1892 1942 "L5.ml" 50 1892 1945
type(
  ('w3 -> unit Monad.Id.t) -> 'w3 -> unit Monad.Id.t
)
ident(
  int_ref ext "L5.ml" 49 1853 1876 "L5.ml" 49 1853 1879
)
"L5.ml" 50 1892 1946 "L5.ml" 50 1892 1950
type(
  'w3 -> unit Monad.Id.t
)
ident(
  int_ref expr "L5.ml" 47 1734 1758 "L5.ml" 47 1734 1762
)
"L5.ml" 50 1892 1951 "L5.ml" 50 1892 1952
type(
  'w3
)
ident(
  int_ref i "L5.ml" 50 1892 1924 "L5.ml" 50 1892 1925
)
"L5.ml" 50 1892 1942 "L5.ml" 50 1892 1952
call(
  tail
)
type(
  unit Monad.Id.t
)
"L5.ml" 50 1892 1930 "L5.ml" 50 1892 1952
type(
  unit Monad.Id.t
)
"L5.ml" 51 1953 1982 "L5.ml" 51 1953 1983
type(
  'w3
)
ident(
  def x "L5.ml" 51 1953 1991 "L5.ml" 51 1953 2001
)
"L5.ml" 51 1953 1985 "L5.ml" 51 1953 1986
type(
  'z3
)
"L5.ml" 51 1953 1982 "L5.ml" 51 1953 1986
type(
  'w3 * 'z3
)
"L5.ml" 51 1953 1974 "L5.ml" 51 1953 1987
type(
  'w3
)
"L5.ml" 51 1953 1991 "L5.ml" 51 1953 1994
type(
  ('w3 -> unit Monad.Id.t) -> 'w3 -> unit Monad.Id.t
)
ident(
  int_ref ext "L5.ml" 49 1853 1876 "L5.ml" 49 1853 1879
)
"L5.ml" 51 1953 1995 "L5.ml" 51 1953 1999
type(
  'w3 -> unit Monad.Id.t
)
ident(
  int_ref expr "L5.ml" 47 1734 1758 "L5.ml" 47 1734 1762
)
"L5.ml" 51 1953 2000 "L5.ml" 51 1953 2001
type(
  'w3
)
ident(
  int_ref x "L5.ml" 51 1953 1982 "L5.ml" 51 1953 1983
)
"L5.ml" 51 1953 1991 "L5.ml" 51 1953 2001
call(
  tail
)
type(
  unit Monad.Id.t
)
"L5.ml" 52 2002 2031 "L5.ml" 52 2002 2035
type(
  S.elt
)
ident(
  def name "L5.ml" 52 2002 2043 "L5.ml" 52 2002 2051
)
"L5.ml" 52 2002 2037 "L5.ml" 52 2002 2038
type(
  'a4
)
"L5.ml" 52 2002 2031 "L5.ml" 52 2002 2038
type(
  S.elt * 'a4
)
"L5.ml" 52 2002 2023 "L5.ml" 52 2002 2039
type(
  'w3
)
"L5.ml" 52 2002 2043 "L5.ml" 52 2002 2046
type(
  S.elt -> unit Monad.Id.t
)
ident(
  int_ref var "L5.ml" 44 1551 1563 "L5.ml" 44 1551 1566
)
"L5.ml" 52 2002 2047 "L5.ml" 52 2002 2051
type(
  S.elt
)
ident(
  int_ref name "L5.ml" 52 2002 2031 "L5.ml" 52 2002 2035
)
"L5.ml" 52 2002 2043 "L5.ml" 52 2002 2051
call(
  tail
)
type(
  unit Monad.Id.t
)
"L5.ml" 53 2052 2073 "L5.ml" 53 2052 2074
type(
  'w3
)
ident(
  def x "L5.ml" 53 2052 2078 "L5.ml" 53 2052 2088
)
"L5.ml" 53 2052 2078 "L5.ml" 53 2052 2081
type(
  ('w3 -> unit Monad.Id.t) -> 'w3 -> unit Monad.Id.t
)
ident(
  int_ref ext "L5.ml" 49 1853 1876 "L5.ml" 49 1853 1879
)
"L5.ml" 53 2052 2082 "L5.ml" 53 2052 2086
type(
  'w3 -> unit Monad.Id.t
)
ident(
  int_ref expr "L5.ml" 47 1734 1758 "L5.ml" 47 1734 1762
)
"L5.ml" 53 2052 2087 "L5.ml" 53 2052 2088
type(
  'w3
)
ident(
  int_ref x "L5.ml" 53 2052 2073 "L5.ml" 53 2052 2074
)
"L5.ml" 53 2052 2078 "L5.ml" 53 2052 2088
call(
  tail
)
type(
  unit Monad.Id.t
)
"L5.ml" 49 1853 1883 "L5.ml" 53 2052 2088
type(
  'w3 -> unit Monad.Id.t
)
"L5.ml" 49 1853 1871 "L5.ml" 54 2132 2151
type(
  (('w3 -> unit Monad.Id.t) -> 'w3 -> unit Monad.Id.t) ->
  'w3 -> unit Monad.Id.t
)
"L5.ml" 48 1770 1788 "L5.ml" 54 2132 2151
type(
  ((('w3 -> unit Monad.Id.t) -> 'w3 -> unit Monad.Id.t) ->
   'w3 -> unit Monad.Id.t) ->
  ((('w3 -> unit Monad.Id.t) -> 'w3 -> unit Monad.Id.t) ->
   'w3 -> unit Monad.Id.t) ->
  (('w3 -> unit Monad.Id.t) -> 'w3 -> unit Monad.Id.t) ->
  'w3 -> unit Monad.Id.t
)
ident(
  ext_ref Common.( ++ )
)
"L5.ml" 55 2173 2191 "L5.ml" 55 2173 2196
type(
  ('w3 -> unit Monad.Id.t) -> 'w3 -> unit Monad.Id.t
)
ident(
  ext_ref Common.apply
)
"L5.ml" 55 2173 2197 "L5.ml" 55 2173 2198
type(
  'w3
)
ident(
  int_ref e "L5.ml" 47 1734 1763 "L5.ml" 47 1734 1764
)
"L5.ml" 47 1734 1767 "L5.ml" 55 2173 2198
call(
  tail
)
type(
  unit Monad.Id.t
)
"L5.ml" 47 1734 1763 "L5.ml" 55 2173 2198
type(
  'w3 -> unit Monad.Id.t
)
"L5.ml" 57 2234 2250 "L5.ml" 57 2234 2270
type(
  < assign : 'i2 ->
             unit Monad.Id.t -> unit Monad.Id.t -> unit Monad.Id.t Monad.Id.t;
    ifc : 'i2 ->
          (unit Monad.Id.t * unit Monad.Id.t list) list ->
          unit Monad.Id.t list -> unit Monad.Id.t Monad.Id.t;
    whilec : 'i2 ->
             unit Monad.Id.t ->
             unit Monad.Id.t list -> unit Monad.Id.t Monad.Id.t > ->
  ('j2 -> unit Monad.Id.t Monad.Id.t) ->
  ('p2 -> unit Monad.Id.t Monad.Id.t) ->
  (('i2 -> unit Monad.Id.t Monad.Id.t) -> 'i2 -> unit Monad.Id.t Monad.Id.t) ->
  'i2 -> unit Monad.Id.t Monad.Id.t
)
ident(
  ext_ref SimpleStatement.imap
)
"L5.ml" 57 2234 2272 "L5.ml" 57 2234 2292
type(
  ('i2 ->
   _[> `Assign of unit Monad.Id.t * unit Monad.Id.t
     | `If of
         (unit Monad.Id.t * unit Monad.Id.t list) list * unit Monad.Id.t list
     | `While of unit Monad.Id.t * unit Monad.Id.t list ] ->
   unit Monad.Id.t) ->
  < assign : 'i2 ->
             unit Monad.Id.t -> unit Monad.Id.t -> unit Monad.Id.t Monad.Id.t;
    ifc : 'i2 ->
          (unit Monad.Id.t * unit Monad.Id.t list) list ->
          unit Monad.Id.t list -> unit Monad.Id.t Monad.Id.t;
    whilec : 'i2 ->
             unit Monad.Id.t ->
             unit Monad.Id.t list -> unit Monad.Id.t Monad.Id.t >
)
ident(
  ext_ref SimpleStatement.mapT
)
"L5.ml" 57 2234 2298 "L5.ml" 57 2234 2299
type(
  'i2
)
"L5.ml" 57 2234 2300 "L5.ml" 57 2234 2301
type(
  _[> `Assign of unit Monad.Id.t * unit Monad.Id.t
    | `If of
        (unit Monad.Id.t * unit Monad.Id.t list) list * unit Monad.Id.t list
    | `While of unit Monad.Id.t * unit Monad.Id.t list ]
  as 'd4
)
"L5.ml" 57 2234 2305 "L5.ml" 57 2234 2307
type(
  unit Monad.Id.t
)
"L5.ml" 57 2234 2300 "L5.ml" 57 2234 2307
type(
  'd4 -> unit Monad.Id.t
)
"L5.ml" 57 2234 2293 "L5.ml" 57 2234 2308
type(
  'i2 -> 'd4 -> unit Monad.Id.t
)
"L5.ml" 57 2234 2271 "L5.ml" 57 2234 2309
call(
  stack
)
type(
  < assign : 'i2 ->
             unit Monad.Id.t -> unit Monad.Id.t -> unit Monad.Id.t Monad.Id.t;
    ifc : 'i2 ->
          (unit Monad.Id.t * unit Monad.Id.t list) list ->
          unit Monad.Id.t list -> unit Monad.Id.t Monad.Id.t;
    whilec : 'i2 ->
             unit Monad.Id.t ->
             unit Monad.Id.t list -> unit Monad.Id.t Monad.Id.t >
)
"L5.ml" 57 2234 2310 "L5.ml" 57 2234 2314
type(
  'j2 -> unit Monad.Id.t Monad.Id.t
)
ident(
  int_ref expr "L5.ml" 47 1734 1758 "L5.ml" 47 1734 1762
)
"L5.ml" 57 2234 2315 "L5.ml" 57 2234 2319
type(
  'p2 -> unit Monad.Id.t Monad.Id.t
)
ident(
  int_ref expr "L5.ml" 47 1734 1758 "L5.ml" 47 1734 1762
)
"L5.ml" 58 2321 2342 "L5.ml" 58 2321 2346
type(
  'i2 -> unit Monad.Id.t Monad.Id.t
)
ident(
  def self "L5.ml" 58 2321 2347 "L5.ml" 63 2626 2651
)
"L5.ml" 58 2321 2347 "L5.ml" 58 2321 2351
type(
  'i2
)
ident(
  def stmt "L5.ml" 59 2355 2374 "L5.ml" 63 2626 2651
)
"L5.ml" 59 2355 2374 "L5.ml" 59 2355 2396
type(
  < case : 'i2 ->
           unit Monad.Id.t ->
           (_[> `Atom of unit Monad.Id.t
              | `Interval of unit Monad.Id.t * unit Monad.Id.t ]
            list * unit list)
           list -> unit list -> unit Monad.Id.t;
    forc : 'i2 ->
           unit Monad.Id.t ->
           unit Monad.Id.t ->
           unit Monad.Id.t ->
           unit Monad.Id.t option -> unit list -> unit Monad.Id.t > ->
  ('o3 -> unit Monad.Id.t Monad.Id.t) ->
  ('i3 -> unit Monad.Id.t Monad.Id.t) ->
  ('c3 -> unit Monad.Id.t Monad.Id.t) ->
  (('i2 -> unit Monad.Id.t) -> 'i2 -> unit Monad.Id.t) ->
  'i2 -> unit Monad.Id.t
)
ident(
  ext_ref ExtendedStatement.imap
)
"L5.ml" 60 2421 2443 "L5.ml" 60 2421 2465
type(
  ('i2 ->
   _[> `Case of
         unit Monad.Id.t *
         ((_[> `Atom of unit Monad.Id.t
             | `Interval of unit Monad.Id.t * unit Monad.Id.t ]
           as 'e4)
          list * unit list)
         list * unit list
     | `For of
         unit Monad.Id.t * unit Monad.Id.t * unit Monad.Id.t *
         unit Monad.Id.t option * unit list ] ->
   unit) ->
  < case : 'i2 ->
           unit Monad.Id.t ->
           ('e4 list * unit list) list -> unit list -> unit Monad.Id.t;
    forc : 'i2 ->
           unit Monad.Id.t ->
           unit Monad.Id.t ->
           unit Monad.Id.t ->
           unit Monad.Id.t option -> unit list -> unit Monad.Id.t >
)
ident(
  ext_ref ExtendedStatement.mapT
)
"L5.ml" 60 2421 2471 "L5.ml" 60 2421 2472
type(
  'i2
)
"L5.ml" 60 2421 2473 "L5.ml" 60 2421 2474
type(
  _[> `Case of unit Monad.Id.t * ('e4 list * unit list) list * unit list
    | `For of
        unit Monad.Id.t * unit Monad.Id.t * unit Monad.Id.t *
        unit Monad.Id.t option * unit list ]
  as 'f4
)
"L5.ml" 60 2421 2478 "L5.ml" 60 2421 2480
type(
  unit
)
"L5.ml" 60 2421 2473 "L5.ml" 60 2421 2480
type(
  'f4 -> unit
)
"L5.ml" 60 2421 2466 "L5.ml" 60 2421 2481
type(
  'i2 -> 'f4 -> unit
)
"L5.ml" 60 2421 2442 "L5.ml" 60 2421 2482
call(
  stack
)
type(
  < case : 'i2 ->
           unit Monad.Id.t ->
           ('e4 list * unit list) list -> unit list -> unit Monad.Id.t;
    forc : 'i2 ->
           unit Monad.Id.t ->
           unit Monad.Id.t ->
           unit Monad.Id.t ->
           unit Monad.Id.t option -> unit list -> unit Monad.Id.t >
)
"L5.ml" 61 2483 2504 "L5.ml" 61 2483 2508
type(
  'o3 -> unit Monad.Id.t Monad.Id.t
)
ident(
  int_ref expr "L5.ml" 47 1734 1758 "L5.ml" 47 1734 1762
)
"L5.ml" 61 2483 2509 "L5.ml" 61 2483 2513
type(
  'i3 -> unit Monad.Id.t Monad.Id.t
)
ident(
  int_ref expr "L5.ml" 47 1734 1758 "L5.ml" 47 1734 1762
)
"L5.ml" 61 2483 2514 "L5.ml" 61 2483 2518
type(
  'c3 -> unit Monad.Id.t Monad.Id.t
)
ident(
  int_ref expr "L5.ml" 47 1734 1758 "L5.ml" 47 1734 1762
)
"L5.ml" 62 2520 2546 "L5.ml" 62 2520 2547
type(
  'i2 -> unit Monad.Id.t
)
"L5.ml" 62 2520 2567 "L5.ml" 62 2520 2571
type(
  S.elt
)
ident(
  def name "L5.ml" 62 2520 2585 "L5.ml" 62 2520 2609
)
"L5.ml" 62 2520 2573 "L5.ml" 62 2520 2577
type(
  'v2 list
)
ident(
  def args "L5.ml" 62 2520 2585 "L5.ml" 62 2520 2609
)
"L5.ml" 62 2520 2579 "L5.ml" 62 2520 2580
type(
  'b3
)
"L5.ml" 62 2520 2567 "L5.ml" 62 2520 2580
type(
  S.elt * 'v2 list * 'b3
)
"L5.ml" 62 2520 2560 "L5.ml" 62 2520 2581
type(
  'i2
)
"L5.ml" 62 2520 2585 "L5.ml" 62 2520 2588
type(
  ('v2 -> unit Monad.Id.t) -> 'v2 list -> unit Monad.Id.t list
)
ident(
  ext_ref List.map
)
"L5.ml" 62 2520 2589 "L5.ml" 62 2520 2593
type(
  'v2 -> unit Monad.Id.t
)
ident(
  int_ref expr "L5.ml" 47 1734 1758 "L5.ml" 47 1734 1762
)
"L5.ml" 62 2520 2594 "L5.ml" 62 2520 2598
type(
  'v2 list
)
ident(
  int_ref args "L5.ml" 62 2520 2573 "L5.ml" 62 2520 2577
)
"L5.ml" 62 2520 2585 "L5.ml" 62 2520 2598
call(
  stack
)
type(
  unit Monad.Id.t list
)
"L5.ml" 62 2520 2600 "L5.ml" 62 2520 2604
type(
  S.elt -> unit Monad.Id.t
)
ident(
  int_ref proc "L5.ml" 45 1643 1655 "L5.ml" 45 1643 1659
)
"L5.ml" 62 2520 2605 "L5.ml" 62 2520 2609
type(
  S.elt
)
ident(
  int_ref name "L5.ml" 62 2520 2567 "L5.ml" 62 2520 2571
)
"L5.ml" 62 2520 2600 "L5.ml" 62 2520 2609
call(
  tail
)
type(
  unit Monad.Id.t
)
"L5.ml" 62 2520 2585 "L5.ml" 62 2520 2609
type(
  unit Monad.Id.t
)
"L5.ml" 62 2520 2612 "L5.ml" 62 2520 2613
type(
  'i2
)
ident(
  def x "L5.ml" 62 2520 2617 "L5.ml" 62 2520 2623
)
"L5.ml" 62 2520 2617 "L5.ml" 62 2520 2621
type(
  'i2 -> unit Monad.Id.t Monad.Id.t
)
ident(
  int_ref self "L5.ml" 58 2321 2342 "L5.ml" 58 2321 2346
)
"L5.ml" 62 2520 2622 "L5.ml" 62 2520 2623
type(
  'i2
)
ident(
  int_ref x "L5.ml" 62 2520 2612 "L5.ml" 62 2520 2613
)
"L5.ml" 62 2520 2617 "L5.ml" 62 2520 2623
call(
  tail
)
type(
  unit Monad.Id.t Monad.Id.t
)
"L5.ml" 62 2520 2551 "L5.ml" 62 2520 2623
type(
  'i2 -> unit Monad.Id.t
)
"L5.ml" 62 2520 2541 "L5.ml" 62 2520 2624
type(
  ('i2 -> unit Monad.Id.t) -> 'i2 -> unit Monad.Id.t
)
"L5.ml" 63 2626 2647 "L5.ml" 63 2626 2651
type(
  'i2
)
ident(
  int_ref stmt "L5.ml" 58 2321 2347 "L5.ml" 58 2321 2351
)
"L5.ml" 59 2355 2374 "L5.ml" 63 2626 2651
call(
  tail
)
type(
  unit Monad.Id.t
)
"L5.ml" 58 2321 2347 "L5.ml" 63 2626 2651
type(
  'i2 -> unit Monad.Id.t Monad.Id.t
)
"L5.ml" 58 2321 2337 "L5.ml" 64 2652 2669
type(
  ('i2 -> unit Monad.Id.t Monad.Id.t) -> 'i2 -> unit Monad.Id.t Monad.Id.t
)
"L5.ml" 65 2670 2686 "L5.ml" 65 2670 2690
type(
  'i2
)
ident(
  int_ref stmt "L5.ml" 46 1707 1725 "L5.ml" 46 1707 1729
)
"L5.ml" 57 2234 2250 "L5.ml" 65 2670 2690
call(
  tail
)
type(
  unit Monad.Id.t Monad.Id.t
)
"L5.ml" 47 1734 1750 "L5.ml" 65 2670 2690
type(
  unit Monad.Id.t Monad.Id.t
)
"L5.ml" 46 1707 1720 "L5.ml" 66 2691 2705
type(
  'i2 -> unit Monad.Id.t Monad.Id.t
)
"L5.ml" 66 2691 2706 "L5.ml" 66 2691 2711
type(
  'i2 list
)
ident(
  int_ref stmts "L5.ml" 39 1291 1373 "L5.ml" 39 1291 1378
)
"L5.ml" 46 1707 1715 "L5.ml" 66 2691 2711
call(
  stack
)
type(
  unit
)
"L5.ml" 67 2713 2721 "L5.ml" 67 2713 2730
type(
  (S.t M.t * S.t M.t -> 'e2 -> S.t M.t * S.t M.t) ->
  S.t M.t * S.t M.t -> 'u3 -> S.t M.t * S.t M.t
)
ident(
  ext_ref List.fold_left
)
"L5.ml" 67 2713 2732 "L5.ml" 67 2713 2746
type(
  (S.elt -> bool) -> S.t M.t * S.t M.t -> 'e2 -> S.t M.t * S.t M.t
)
ident(
  int_ref updateProcInfo "L5.ml" 39 1291 1305 "L5.ml" 39 1291 1319
)
"L5.ml" 67 2713 2747 "L5.ml" 67 2713 2756
type(
  S.elt -> bool
)
ident(
  int_ref notGlobal "L5.ml" 39 1291 1320 "L5.ml" 39 1291 1329
)
"L5.ml" 67 2713 2731 "L5.ml" 67 2713 2757
call(
  stack
)
type(
  S.t M.t * S.t M.t -> 'e2 -> S.t M.t * S.t M.t
)
"L5.ml" 67 2713 2759 "L5.ml" 67 2713 2764
type(
  M.key -> S.t -> S.t M.t -> S.t M.t
)
ident(
  ext_ref M.add
)
"L5.ml" 67 2713 2765 "L5.ml" 67 2713 2769
type(
  M.key
)
ident(
  int_ref name "L5.ml" 39 1291 1345 "L5.ml" 39 1291 1349
)
"L5.ml" 67 2713 2771 "L5.ml" 67 2713 2777
type(
  S.t ref
)
ident(
  int_ref called "L5.ml" 43 1496 1508 "L5.ml" 43 1496 1514
)
"L5.ml" 67 2713 2770 "L5.ml" 67 2713 2777
type(
  S.t
)
type(
  S.t ref -> S.t
)
ident(
  ext_ref Pervasives.( ! )
)
"L5.ml" 67 2713 2778 "L5.ml" 67 2713 2783
type(
  S.t M.t
)
ident(
  int_ref calls "L5.ml" 39 1291 1331 "L5.ml" 39 1291 1336
)
"L5.ml" 67 2713 2759 "L5.ml" 67 2713 2783
call(
  stack
)
type(
  S.t M.t
)
"L5.ml" 67 2713 2785 "L5.ml" 67 2713 2790
type(
  M.key -> S.t -> S.t M.t -> S.t M.t
)
ident(
  ext_ref M.add
)
"L5.ml" 67 2713 2791 "L5.ml" 67 2713 2795
type(
  M.key
)
ident(
  int_ref name "L5.ml" 39 1291 1345 "L5.ml" 39 1291 1349
)
"L5.ml" 67 2713 2797 "L5.ml" 67 2713 2801
type(
  S.t ref
)
ident(
  int_ref used "L5.ml" 43 1496 1516 "L5.ml" 43 1496 1520
)
"L5.ml" 67 2713 2796 "L5.ml" 67 2713 2801
type(
  S.t
)
type(
  S.t ref -> S.t
)
ident(
  ext_ref Pervasives.( ! )
)
"L5.ml" 67 2713 2802 "L5.ml" 67 2713 2806
type(
  S.t M.t
)
ident(
  int_ref uses "L5.ml" 39 1291 1338 "L5.ml" 39 1291 1342
)
"L5.ml" 67 2713 2785 "L5.ml" 67 2713 2806
call(
  stack
)
type(
  S.t M.t
)
"L5.ml" 67 2713 2758 "L5.ml" 67 2713 2807
type(
  S.t M.t * S.t M.t
)
"L5.ml" 67 2713 2808 "L5.ml" 67 2713 2809
type(
  'u3
)
ident(
  int_ref p "L5.ml" 39 1291 1369 "L5.ml" 39 1291 1370
)
"L5.ml" 67 2713 2721 "L5.ml" 67 2713 2809
call(
  tail
)
type(
  S.t M.t * S.t M.t
)
"L5.ml" 46 1707 1715 "L5.ml" 67 2713 2809
type(
  S.t M.t * S.t M.t
)
"L5.ml" 45 1643 1651 "L5.ml" 67 2713 2809
type(
  S.t M.t * S.t M.t
)
"L5.ml" 44 1551 1559 "L5.ml" 67 2713 2809
type(
  S.t M.t * S.t M.t
)
"L5.ml" 43 1496 1504 "L5.ml" 67 2713 2809
type(
  S.t M.t * S.t M.t
)
"L5.ml" 42 1456 1464 "L5.ml" 67 2713 2809
type(
  S.t M.t * S.t M.t
)
"L5.ml" 41 1427 1435 "L5.ml" 67 2713 2809
type(
  S.t M.t * S.t M.t
)
"L5.ml" 40 1390 1398 "L5.ml" 67 2713 2809
type(
  S.t M.t * S.t M.t
)
"L5.ml" 39 1291 1344 "L5.ml" 67 2713 2809
type(
  'e2 -> S.t M.t * S.t M.t
)
"L5.ml" 39 1291 1330 "L5.ml" 67 2713 2809
type(
  S.t M.t * S.t M.t -> 'e2 -> S.t M.t * S.t M.t
)
"L5.ml" 39 1291 1320 "L5.ml" 67 2713 2809
type(
  (S.elt -> bool) -> S.t M.t * S.t M.t -> 'e2 -> S.t M.t * S.t M.t
)
"L5.ml" 69 2819 2829 "L5.ml" 69 2819 2838
type(
  String.t -> bool
)
ident(
  def notGlobal "L5.ml" 70 2868 2874 "L5.ml" 144 6751 6822
)
"L5.ml" 69 2819 2841 "L5.ml" 69 2819 2849
type(
  S.t -> String.t -> bool
)
ident(
  int_ref testVars "L5.ml" 38 1226 1236 "L5.ml" 38 1226 1244
)
"L5.ml" 69 2819 2851 "L5.ml" 69 2819 2858
type(
  ('_g4 * M.key * 'd) list -> (String.t list * 'd) list -> S.t
)
ident(
  int_ref getVars "L5.ml" 30 933 943 "L5.ml" 30 933 950
)
"L5.ml" 69 2819 2859 "L5.ml" 69 2819 2861
type(
  ('_g4 * M.key * 'd) list
)
"L5.ml" 69 2819 2862 "L5.ml" 69 2819 2863
type(
  (String.t list * 'd) list
)
ident(
  int_ref v "L5.ml" 21 440 476 "L5.ml" 21 440 477
)
"L5.ml" 69 2819 2850 "L5.ml" 69 2819 2864
call(
  stack
)
type(
  S.t
)
"L5.ml" 69 2819 2841 "L5.ml" 69 2819 2864
call(
  stack
)
type(
  String.t -> bool
)
"L5.ml" 70 2868 2878 "L5.ml" 70 2868 2883
type(
  S.t M.t
)
ident(
  def calls "L5.ml" 71 2953 2959 "L5.ml" 144 6751 6822
)
"L5.ml" 70 2868 2885 "L5.ml" 70 2868 2889
type(
  S.t M.t
)
ident(
  def uses "L5.ml" 71 2953 2959 "L5.ml" 144 6751 6822
)
"L5.ml" 70 2868 2878 "L5.ml" 70 2868 2889
type(
  S.t M.t * S.t M.t
)
"L5.ml" 70 2868 2892 "L5.ml" 70 2868 2901
type(
  (S.t M.t * S.t M.t -> 'e -> S.t M.t * S.t M.t) ->
  S.t M.t * S.t M.t -> 'e list -> S.t M.t * S.t M.t
)
ident(
  ext_ref List.fold_left
)
"L5.ml" 70 2868 2903 "L5.ml" 70 2868 2917
type(
  (String.t -> bool) -> S.t M.t * S.t M.t -> 'e -> S.t M.t * S.t M.t
)
ident(
  int_ref updateProcInfo "L5.ml" 39 1291 1305 "L5.ml" 39 1291 1319
)
"L5.ml" 70 2868 2918 "L5.ml" 70 2868 2927
type(
  String.t -> bool
)
ident(
  int_ref notGlobal "L5.ml" 69 2819 2829 "L5.ml" 69 2819 2838
)
"L5.ml" 70 2868 2902 "L5.ml" 70 2868 2928
call(
  stack
)
type(
  S.t M.t * S.t M.t -> 'e -> S.t M.t * S.t M.t
)
"L5.ml" 70 2868 2930 "L5.ml" 70 2868 2937
type(
  S.t M.t
)
ident(
  ext_ref M.empty
)
"L5.ml" 70 2868 2939 "L5.ml" 70 2868 2946
type(
  S.t M.t
)
ident(
  ext_ref M.empty
)
"L5.ml" 70 2868 2929 "L5.ml" 70 2868 2947
type(
  S.t M.t * S.t M.t
)
"L5.ml" 70 2868 2948 "L5.ml" 70 2868 2949
type(
  'e list
)
ident(
  int_ref p "L5.ml" 21 440 480 "L5.ml" 21 440 481
)
"L5.ml" 70 2868 2892 "L5.ml" 70 2868 2949
call(
  stack
)
type(
  S.t M.t * S.t M.t
)
"L5.ml" 71 2953 2967 "L5.ml" 71 2953 2974
type(
  S.t M.t -> S.t M.t
)
ident(
  def iterate "L5.ml" 71 2953 2959 "L5.ml" 144 6751 6822
)
"L5.ml" 71 2953 2975 "L5.ml" 71 2953 2979
type(
  S.t M.t
)
ident(
  def uses "L5.ml" 72 2982 2990 "L5.ml" 84 3495 3544
)
"L5.ml" 72 2982 2994 "L5.ml" 72 2982 2998
type(
  bool
)
ident(
  def flag "L5.ml" 84 3495 3503 "L5.ml" 84 3495 3544
)
"L5.ml" 72 2982 3000 "L5.ml" 72 2982 3005
type(
  S.t M.t
)
ident(
  def uses' "L5.ml" 84 3495 3503 "L5.ml" 84 3495 3544
)
"L5.ml" 72 2982 2994 "L5.ml" 72 2982 3005
type(
  bool * S.t M.t
)
"L5.ml" 73 3009 3019 "L5.ml" 73 3009 3025
type(
  (M.key -> S.t -> bool * S.t M.t -> bool * S.t M.t) ->
  S.t M.t -> bool * S.t M.t -> bool * S.t M.t
)
ident(
  ext_ref M.fold
)
"L5.ml" 73 3009 3031 "L5.ml" 73 3009 3032
type(
  M.key
)
ident(
  def p "L5.ml" 73 3009 3033 "L5.ml" 81 3393 3444
)
"L5.ml" 73 3009 3033 "L5.ml" 73 3009 3038
type(
  S.t
)
ident(
  def calls "L5.ml" 73 3009 3039 "L5.ml" 81 3393 3444
)
"L5.ml" 73 3009 3040 "L5.ml" 73 3009 3044
type(
  bool
)
ident(
  def flag "L5.ml" 74 3056 3076 "L5.ml" 81 3393 3444
)
"L5.ml" 73 3009 3046 "L5.ml" 73 3009 3050
type(
  S.t M.t
)
ident(
  def uses "L5.ml" 74 3056 3076 "L5.ml" 81 3393 3444
)
"L5.ml" 73 3009 3040 "L5.ml" 73 3009 3050
type(
  bool * S.t M.t
)
"L5.ml" 74 3056 3080 "L5.ml" 74 3056 3087
type(
  S.t
)
ident(
  def current "L5.ml" 75 3107 3127 "L5.ml" 81 3393 3444
)
"L5.ml" 74 3056 3090 "L5.ml" 74 3056 3096
type(
  M.key -> S.t M.t -> S.t
)
ident(
  ext_ref M.find
)
"L5.ml" 74 3056 3097 "L5.ml" 74 3056 3098
type(
  M.key
)
ident(
  int_ref p "L5.ml" 73 3009 3031 "L5.ml" 73 3009 3032
)
"L5.ml" 74 3056 3099 "L5.ml" 74 3056 3103
type(
  S.t M.t
)
ident(
  int_ref uses "L5.ml" 73 3009 3046 "L5.ml" 73 3009 3050
)
"L5.ml" 74 3056 3090 "L5.ml" 74 3056 3103
call(
  stack
)
type(
  S.t
)
"L5.ml" 75 3107 3131 "L5.ml" 75 3107 3138
type(
  S.t
)
ident(
  def updated "L5.ml" 79 3307 3327 "L5.ml" 81 3393 3444
)
"L5.ml" 76 3142 3164 "L5.ml" 76 3142 3170
type(
  (S.elt -> S.t -> S.t) -> S.t -> S.t -> S.t
)
ident(
  ext_ref S.fold
)
"L5.ml" 76 3142 3176 "L5.ml" 76 3142 3177
type(
  S.elt
)
ident(
  def g "L5.ml" 76 3142 3178 "L5.ml" 76 3142 3242
)
"L5.ml" 76 3142 3178 "L5.ml" 76 3142 3181
type(
  S.t
)
ident(
  def acc "L5.ml" 76 3142 3185 "L5.ml" 76 3142 3242
)
"L5.ml" 76 3142 3185 "L5.ml" 76 3142 3192
type(
  S.t -> S.t -> S.t
)
ident(
  ext_ref S.union
)
"L5.ml" 76 3142 3198 "L5.ml" 76 3142 3204
type(
  M.key -> S.t M.t -> S.t
)
ident(
  ext_ref M.find
)
"L5.ml" 76 3142 3205 "L5.ml" 76 3142 3206
type(
  S.elt
)
ident(
  int_ref g "L5.ml" 76 3142 3176 "L5.ml" 76 3142 3177
)
"L5.ml" 76 3142 3207 "L5.ml" 76 3142 3211
type(
  S.t M.t
)
ident(
  int_ref uses "L5.ml" 73 3009 3046 "L5.ml" 73 3009 3050
)
"L5.ml" 76 3142 3198 "L5.ml" 76 3142 3211
call(
  stack
)
type(
  S.t
)
"L5.ml" 76 3142 3217 "L5.ml" 76 3142 3226
type(
  exn
)
"L5.ml" 76 3142 3230 "L5.ml" 76 3142 3237
type(
  S.t
)
ident(
  ext_ref S.empty
)
"L5.ml" 76 3142 3193 "L5.ml" 76 3142 3238
type(
  S.t
)
"L5.ml" 76 3142 3239 "L5.ml" 76 3142 3242
type(
  S.t
)
ident(
  int_ref acc "L5.ml" 76 3142 3178 "L5.ml" 76 3142 3181
)
"L5.ml" 76 3142 3185 "L5.ml" 76 3142 3242
call(
  tail
)
type(
  S.t
)
"L5.ml" 76 3142 3178 "L5.ml" 76 3142 3242
type(
  S.t -> S.t
)
"L5.ml" 76 3142 3171 "L5.ml" 76 3142 3243
type(
  S.elt -> S.t -> S.t
)
"L5.ml" 77 3245 3269 "L5.ml" 77 3245 3274
type(
  S.t
)
ident(
  int_ref calls "L5.ml" 73 3009 3033 "L5.ml" 73 3009 3038
)
"L5.ml" 77 3245 3275 "L5.ml" 77 3245 3282
type(
  S.t
)
ident(
  ext_ref S.empty
)
"L5.ml" 76 3142 3164 "L5.ml" 77 3245 3282
call(
  stack
)
type(
  S.t
)
"L5.ml" 79 3307 3330 "L5.ml" 79 3307 3338
type(
  S.t -> S.t -> bool
)
ident(
  ext_ref S.subset
)
"L5.ml" 79 3307 3339 "L5.ml" 79 3307 3346
type(
  S.t
)
ident(
  int_ref updated "L5.ml" 75 3107 3131 "L5.ml" 75 3107 3138
)
"L5.ml" 79 3307 3347 "L5.ml" 79 3307 3354
type(
  S.t
)
ident(
  int_ref current "L5.ml" 74 3056 3080 "L5.ml" 74 3056 3087
)
"L5.ml" 79 3307 3330 "L5.ml" 79 3307 3354
call(
  stack
)
type(
  bool
)
"L5.ml" 80 3356 3381 "L5.ml" 80 3356 3385
type(
  bool
)
ident(
  int_ref flag "L5.ml" 73 3009 3040 "L5.ml" 73 3009 3044
)
"L5.ml" 80 3356 3387 "L5.ml" 80 3356 3391
type(
  S.t M.t
)
ident(
  int_ref uses "L5.ml" 73 3009 3046 "L5.ml" 73 3009 3050
)
"L5.ml" 80 3356 3381 "L5.ml" 80 3356 3391
type(
  bool * S.t M.t
)
"L5.ml" 81 3393 3418 "L5.ml" 81 3393 3422
type(
  bool
)
"L5.ml" 81 3393 3424 "L5.ml" 81 3393 3429
type(
  M.key -> S.t -> S.t M.t -> S.t M.t
)
ident(
  ext_ref M.add
)
"L5.ml" 81 3393 3430 "L5.ml" 81 3393 3431
type(
  M.key
)
ident(
  int_ref p "L5.ml" 73 3009 3031 "L5.ml" 73 3009 3032
)
"L5.ml" 81 3393 3432 "L5.ml" 81 3393 3439
type(
  S.t
)
ident(
  int_ref updated "L5.ml" 75 3107 3131 "L5.ml" 75 3107 3138
)
"L5.ml" 81 3393 3440 "L5.ml" 81 3393 3444
type(
  S.t M.t
)
ident(
  int_ref uses "L5.ml" 73 3009 3046 "L5.ml" 73 3009 3050
)
"L5.ml" 81 3393 3424 "L5.ml" 81 3393 3444
call(
  stack
)
type(
  S.t M.t
)
"L5.ml" 81 3393 3418 "L5.ml" 81 3393 3444
type(
  bool * S.t M.t
)
"L5.ml" 79 3307 3327 "L5.ml" 81 3393 3444
type(
  bool * S.t M.t
)
"L5.ml" 75 3107 3127 "L5.ml" 81 3393 3444
type(
  bool * S.t M.t
)
"L5.ml" 74 3056 3076 "L5.ml" 81 3393 3444
type(
  bool * S.t M.t
)
"L5.ml" 73 3009 3039 "L5.ml" 81 3393 3444
type(
  bool * S.t M.t -> bool * S.t M.t
)
"L5.ml" 73 3009 3033 "L5.ml" 81 3393 3444
type(
  S.t -> bool * S.t M.t -> bool * S.t M.t
)
"L5.ml" 73 3009 3026 "L5.ml" 82 3445 3463
type(
  M.key -> S.t -> bool * S.t M.t -> bool * S.t M.t
)
"L5.ml" 82 3445 3464 "L5.ml" 82 3445 3469
type(
  S.t M.t
)
ident(
  int_ref calls "L5.ml" 70 2868 2878 "L5.ml" 70 2868 2883
)
"L5.ml" 82 3445 3471 "L5.ml" 82 3445 3476
type(
  bool
)
"L5.ml" 82 3445 3478 "L5.ml" 82 3445 3482
type(
  S.t M.t
)
ident(
  int_ref uses "L5.ml" 71 2953 2975 "L5.ml" 71 2953 2979
)
"L5.ml" 82 3445 3470 "L5.ml" 82 3445 3483
type(
  bool * S.t M.t
)
"L5.ml" 73 3009 3019 "L5.ml" 82 3445 3483
call(
  stack
)
type(
  bool * S.t M.t
)
"L5.ml" 84 3495 3506 "L5.ml" 84 3495 3509
type(
  bool -> bool
)
ident(
  ext_ref Pervasives.not
)
"L5.ml" 84 3495 3510 "L5.ml" 84 3495 3514
type(
  bool
)
ident(
  int_ref flag "L5.ml" 72 2982 2994 "L5.ml" 72 2982 2998
)
"L5.ml" 84 3495 3506 "L5.ml" 84 3495 3514
type(
  bool
)
"L5.ml" 84 3495 3520 "L5.ml" 84 3495 3525
type(
  S.t M.t
)
ident(
  int_ref uses' "L5.ml" 72 2982 3000 "L5.ml" 72 2982 3005
)
"L5.ml" 84 3495 3531 "L5.ml" 84 3495 3538
type(
  S.t M.t -> S.t M.t
)
ident(
  int_ref iterate "L5.ml" 71 2953 2967 "L5.ml" 71 2953 2974
)
"L5.ml" 84 3495 3539 "L5.ml" 84 3495 3544
type(
  S.t M.t
)
ident(
  int_ref uses' "L5.ml" 72 2982 3000 "L5.ml" 72 2982 3005
)
"L5.ml" 84 3495 3531 "L5.ml" 84 3495 3544
call(
  tail
)
type(
  S.t M.t
)
"L5.ml" 84 3495 3503 "L5.ml" 84 3495 3544
type(
  S.t M.t
)
"L5.ml" 72 2982 2990 "L5.ml" 84 3495 3544
type(
  S.t M.t
)
"L5.ml" 71 2953 2975 "L5.ml" 84 3495 3544
type(
  S.t M.t -> S.t M.t
)
"L5.ml" 86 3554 3564 "L5.ml" 86 3554 3568
type(
  S.t M.t
)
ident(
  def uses "L5.ml" 87 3593 3599 "L5.ml" 144 6751 6822
)
"L5.ml" 86 3554 3571 "L5.ml" 86 3554 3578
type(
  S.t M.t -> S.t M.t
)
ident(
  int_ref iterate "L5.ml" 71 2953 2967 "L5.ml" 71 2953 2974
)
"L5.ml" 86 3554 3579 "L5.ml" 86 3554 3583
type(
  S.t M.t
)
ident(
  int_ref uses "L5.ml" 70 2868 2885 "L5.ml" 70 2868 2889
)
"L5.ml" 86 3554 3571 "L5.ml" 86 3554 3583
call(
  stack
)
type(
  S.t M.t
)
"L5.ml" 87 3593 3603 "L5.ml" 87 3593 3609
type(
  ('a * 'd) list
)
ident(
  def tdecls "L5.ml" 95 4000 4006 "L5.ml" 144 6751 6822
)
"L5.ml" 87 3593 3612 "L5.ml" 87 3593 3622
type(
  (M.key * 'd -> ('a * 'd) list -> ('a * 'd) list) ->
  (M.key * 'd) list -> ('a * 'd) list -> ('a * 'd) list
)
ident(
  ext_ref List.fold_right
)
"L5.ml" 87 3593 3629 "L5.ml" 87 3593 3633
type(
  M.key
)
ident(
  def name "L5.ml" 87 3593 3640 "L5.ml" 92 3896 3946
)
"L5.ml" 87 3593 3635 "L5.ml" 87 3593 3638
type(
  'd
)
ident(
  def typ "L5.ml" 87 3593 3640 "L5.ml" 92 3896 3946
)
"L5.ml" 87 3593 3629 "L5.ml" 87 3593 3638
type(
  M.key * 'd
)
"L5.ml" 87 3593 3640 "L5.ml" 87 3593 3646
type(
  ('a * 'd) list
)
ident(
  def tdecls "L5.ml" 88 3650 3671 "L5.ml" 92 3896 3946
)
"L5.ml" 88 3650 3677 "L5.ml" 88 3650 3680
type(
  'd
)
ident(
  int_ref typ "L5.ml" 87 3593 3635 "L5.ml" 87 3593 3638
)
"L5.ml" 89 3687 3716 "L5.ml" 89 3687 3717
type(
  'a * 'a * 'd
)
"L5.ml" 89 3687 3710 "L5.ml" 89 3687 3717
type(
  'd
)
"L5.ml" 89 3687 3720 "L5.ml" 89 3687 3725
type(
  'd
)
"L5.ml" 89 3687 3710 "L5.ml" 89 3687 3725
type(
  'd
)
"L5.ml" 89 3687 3728 "L5.ml" 89 3687 3732
type(
  'd
)
"L5.ml" 89 3687 3710 "L5.ml" 89 3687 3732
type(
  'd
)
"L5.ml" 89 3687 3736 "L5.ml" 89 3687 3742
type(
  ('a * 'd) list
)
ident(
  int_ref tdecls "L5.ml" 87 3593 3640 "L5.ml" 87 3593 3646
)
"L5.ml" 90 3743 3766 "L5.ml" 90 3743 3767
type(
  'd
)
"L5.ml" 90 3743 3775 "L5.ml" 90 3743 3780
type(
  'a
)
ident(
  def tname "L5.ml" 91 3811 3839 "L5.ml" 92 3896 3946
)
"L5.ml" 90 3743 3783 "L5.ml" 90 3743 3788
type(
  'c2
)
ident(
  int_ref namer "L5.ml" 21 440 455 "L5.ml" 21 440 460
)
"L5.ml" 90 3743 3783 "L5.ml" 90 3743 3796
call(
  stack
)
type(
  string -> 'a
)
"L5.ml" 90 3743 3797 "L5.ml" 90 3743 3807
type(
  string
)
"L5.ml" 90 3743 3783 "L5.ml" 90 3743 3807
type(
  'a
)
"L5.ml" 91 3811 3839 "L5.ml" 91 3811 3844
type(
  'd M.t ref
)
ident(
  int_ref types "L5.ml" 24 584 594 "L5.ml" 24 584 599
)
"L5.ml" 91 3811 3848 "L5.ml" 91 3811 3853
type(
  M.key -> 'd -> 'd M.t -> 'd M.t
)
ident(
  ext_ref M.add
)
"L5.ml" 91 3811 3854 "L5.ml" 91 3811 3858
type(
  M.key
)
ident(
  int_ref name "L5.ml" 87 3593 3629 "L5.ml" 87 3593 3633
)
"L5.ml" 91 3811 3867 "L5.ml" 91 3811 3872
type(
  'a
)
ident(
  int_ref tname "L5.ml" 90 3743 3775 "L5.ml" 90 3743 3780
)
"L5.ml" 91 3811 3874 "L5.ml" 91 3811 3879
type(
  'a
)
ident(
  int_ref tname "L5.ml" 90 3743 3775 "L5.ml" 90 3743 3780
)
"L5.ml" 91 3811 3881 "L5.ml" 91 3811 3884
type(
  'd
)
ident(
  int_ref typ "L5.ml" 87 3593 3635 "L5.ml" 87 3593 3638
)
"L5.ml" 91 3811 3866 "L5.ml" 91 3811 3885
type(
  'a * 'a * 'd
)
"L5.ml" 91 3811 3859 "L5.ml" 91 3811 3886
type(
  'd
)
"L5.ml" 91 3811 3888 "L5.ml" 91 3811 3893
type(
  'd M.t ref
)
ident(
  int_ref types "L5.ml" 24 584 594 "L5.ml" 24 584 599
)
"L5.ml" 91 3811 3887 "L5.ml" 91 3811 3893
type(
  'd M.t
)
type(
  'd M.t ref -> 'd M.t
)
ident(
  ext_ref Pervasives.( ! )
)
"L5.ml" 91 3811 3848 "L5.ml" 91 3811 3893
call(
  stack
)
type(
  'd M.t
)
"L5.ml" 91 3811 3839 "L5.ml" 91 3811 3893
type(
  unit
)
type(
  'd M.t ref -> 'd M.t -> unit
)
ident(
  ext_ref Pervasives.( := )
)
"L5.ml" 92 3896 3925 "L5.ml" 92 3896 3930
type(
  'a
)
ident(
  int_ref tname "L5.ml" 90 3743 3775 "L5.ml" 90 3743 3780
)
"L5.ml" 92 3896 3932 "L5.ml" 92 3896 3935
type(
  'd
)
ident(
  int_ref typ "L5.ml" 87 3593 3635 "L5.ml" 87 3593 3638
)
"L5.ml" 92 3896 3924 "L5.ml" 92 3896 3936
type(
  'a * 'd
)
"L5.ml" 92 3896 3940 "L5.ml" 92 3896 3946
type(
  ('a * 'd) list
)
ident(
  int_ref tdecls "L5.ml" 87 3593 3640 "L5.ml" 87 3593 3646
)
"L5.ml" 92 3896 3924 "L5.ml" 92 3896 3946
type(
  ('a * 'd) list
)
"L5.ml" 91 3811 3839 "L5.ml" 92 3896 3946
type(
  ('a * 'd) list
)
"L5.ml" 90 3743 3771 "L5.ml" 92 3896 3946
type(
  ('a * 'd) list
)
"L5.ml" 88 3650 3671 "L5.ml" 92 3896 3946
type(
  ('a * 'd) list
)
"L5.ml" 87 3593 3640 "L5.ml" 92 3896 3946
type(
  ('a * 'd) list -> ('a * 'd) list
)
"L5.ml" 87 3593 3623 "L5.ml" 93 3947 3967
type(
  M.key * 'd -> ('a * 'd) list -> ('a * 'd) list
)
"L5.ml" 93 3947 3969 "L5.ml" 93 3947 3979
type(
  'd M.t -> (M.key * 'd) list
)
ident(
  ext_ref M.bindings
)
"L5.ml" 93 3947 3981 "L5.ml" 93 3947 3986
type(
  'd M.t ref
)
ident(
  int_ref types "L5.ml" 24 584 594 "L5.ml" 24 584 599
)
"L5.ml" 93 3947 3980 "L5.ml" 93 3947 3986
type(
  'd M.t
)
type(
  'd M.t ref -> 'd M.t
)
ident(
  ext_ref Pervasives.( ! )
)
"L5.ml" 93 3947 3968 "L5.ml" 93 3947 3987
call(
  stack
)
type(
  (M.key * 'd) list
)
"L5.ml" 93 3947 3988 "L5.ml" 93 3947 3990
type(
  ('a * 'd) list
)
"L5.ml" 87 3593 3612 "L5.ml" 93 3947 3990
call(
  stack
)
type(
  ('a * 'd) list
)
"L5.ml" 95 4000 4010 "L5.ml" 95 4000 4017
type(
  ([> `Var ] * M.key * 'd) list M.t
)
ident(
  def formals "L5.ml" 105 4561 4567 "L5.ml" 144 6751 6822
)
"L5.ml" 95 4000 4019 "L5.ml" 95 4000 4026
type(
  (String.t ->
   [> `Ident of S.elt * [> `VParam of S.elt * 'd | `Var of S.elt * 'd ] ])
  list M.t
)
ident(
  def actuals "L5.ml" 105 4561 4567 "L5.ml" 144 6751 6822
)
"L5.ml" 95 4000 4010 "L5.ml" 95 4000 4026
type(
  (([> `Var ] as 'h4) * M.key * 'd) list M.t *
  (String.t ->
   ([> `Ident of S.elt * [> `VParam of S.elt * 'd | `Var of S.elt * 'd ] ]
    as 'i4))
  list M.t
)
"L5.ml" 96 4030 4038 "L5.ml" 96 4030 4044
type(
  (M.key ->
   S.t ->
   ('h4 * M.key * 'd) list M.t * (String.t -> 'i4) list M.t ->
   ('h4 * M.key * 'd) list M.t * (String.t -> 'i4) list M.t) ->
  S.t M.t ->
  ('h4 * M.key * 'd) list M.t * (String.t -> 'i4) list M.t ->
  ('h4 * M.key * 'd) list M.t * (String.t -> 'i4) list M.t
)
ident(
  ext_ref M.fold
)
"L5.ml" 96 4030 4050 "L5.ml" 96 4030 4051
type(
  M.key
)
ident(
  def p "L5.ml" 96 4030 4052 "L5.ml" 102 4480 4509
)
"L5.ml" 96 4030 4052 "L5.ml" 96 4030 4057
type(
  S.t
)
ident(
  def names "L5.ml" 96 4030 4058 "L5.ml" 102 4480 4509
)
"L5.ml" 96 4030 4059 "L5.ml" 96 4030 4060
type(
  ('h4 * M.key * 'd) list M.t
)
ident(
  def f "L5.ml" 97 4069 4087 "L5.ml" 102 4480 4509
)
"L5.ml" 96 4030 4062 "L5.ml" 96 4030 4063
type(
  (String.t -> 'i4) list M.t
)
ident(
  def a "L5.ml" 97 4069 4087 "L5.ml" 102 4480 4509
)
"L5.ml" 96 4030 4059 "L5.ml" 96 4030 4063
type(
  ('h4 * M.key * 'd) list M.t * (String.t -> 'i4) list M.t
)
"L5.ml" 97 4069 4091 "L5.ml" 97 4069 4096
type(
  S.elt list
)
ident(
  def names "L5.ml" 98 4162 4180 "L5.ml" 102 4480 4509
)
"L5.ml" 97 4069 4099 "L5.ml" 97 4069 4103
type(
  (S.elt -> S.elt -> int) -> S.elt list -> S.elt list
)
ident(
  ext_ref List.sort
)
"L5.ml" 97 4069 4104 "L5.ml" 97 4069 4111
type(
  S.elt -> S.elt -> int
)
ident(
  ext_ref Pervasives.compare
)
"L5.ml" 97 4069 4113 "L5.ml" 97 4069 4123
type(
  S.t -> S.elt list
)
ident(
  ext_ref S.elements
)
"L5.ml" 97 4069 4125 "L5.ml" 97 4069 4131
type(
  S.t -> S.t -> S.t
)
ident(
  ext_ref S.diff
)
"L5.ml" 97 4069 4132 "L5.ml" 97 4069 4137
type(
  S.t
)
ident(
  int_ref names "L5.ml" 96 4030 4052 "L5.ml" 96 4030 4057
)
"L5.ml" 97 4069 4139 "L5.ml" 97 4069 4145
type(
  M.key -> S.t M.t -> S.t
)
ident(
  ext_ref M.find
)
"L5.ml" 97 4069 4146 "L5.ml" 97 4069 4147
type(
  M.key
)
ident(
  int_ref p "L5.ml" 96 4030 4050 "L5.ml" 96 4030 4051
)
"L5.ml" 97 4069 4149 "L5.ml" 97 4069 4155
type(
  S.t M.t ref
)
ident(
  int_ref locals "L5.ml" 25 620 630 "L5.ml" 25 620 636
)
"L5.ml" 97 4069 4148 "L5.ml" 97 4069 4155
type(
  S.t M.t
)
type(
  S.t M.t ref -> S.t M.t
)
ident(
  ext_ref Pervasives.( ! )
)
"L5.ml" 97 4069 4138 "L5.ml" 97 4069 4156
call(
  stack
)
type(
  S.t
)
"L5.ml" 97 4069 4124 "L5.ml" 97 4069 4157
call(
  stack
)
type(
  S.t
)
"L5.ml" 97 4069 4112 "L5.ml" 97 4069 4158
call(
  stack
)
type(
  S.elt list
)
"L5.ml" 97 4069 4099 "L5.ml" 97 4069 4158
call(
  stack
)
type(
  S.elt list
)
"L5.ml" 98 4162 4180 "L5.ml" 98 4162 4185
type(
  M.key ->
  ('h4 * M.key * 'd) list ->
  ('h4 * M.key * 'd) list M.t -> ('h4 * M.key * 'd) list M.t
)
ident(
  ext_ref M.add
)
"L5.ml" 98 4162 4186 "L5.ml" 98 4162 4187
type(
  M.key
)
ident(
  int_ref p "L5.ml" 96 4030 4050 "L5.ml" 96 4030 4051
)
"L5.ml" 98 4162 4189 "L5.ml" 98 4162 4192
type(
  (M.key -> 'h4 * M.key * 'd) -> M.key list -> ('h4 * M.key * 'd) list
)
ident(
  ext_ref List.map
)
"L5.ml" 98 4162 4198 "L5.ml" 98 4162 4199
type(
  M.key
)
ident(
  def n "L5.ml" 98 4162 4203 "L5.ml" 98 4162 4222
)
"L5.ml" 98 4162 4204 "L5.ml" 98 4162 4208
type(
  'h4
)
"L5.ml" 98 4162 4210 "L5.ml" 98 4162 4211
type(
  M.key
)
ident(
  int_ref n "L5.ml" 98 4162 4198 "L5.ml" 98 4162 4199
)
"L5.ml" 98 4162 4213 "L5.ml" 98 4162 4219
type(
  M.key -> 'd
)
ident(
  int_ref typeOf "L5.ml" 28 787 797 "L5.ml" 28 787 803
)
"L5.ml" 98 4162 4220 "L5.ml" 98 4162 4221
type(
  M.key
)
ident(
  int_ref n "L5.ml" 98 4162 4198 "L5.ml" 98 4162 4199
)
"L5.ml" 98 4162 4213 "L5.ml" 98 4162 4221
call(
  stack
)
type(
  'd
)
"L5.ml" 98 4162 4203 "L5.ml" 98 4162 4222
type(
  'h4 * M.key * 'd
)
"L5.ml" 98 4162 4193 "L5.ml" 98 4162 4223
type(
  M.key -> 'h4 * M.key * 'd
)
"L5.ml" 98 4162 4224 "L5.ml" 98 4162 4229
type(
  M.key list
)
ident(
  int_ref names "L5.ml" 97 4069 4091 "L5.ml" 97 4069 4096
)
"L5.ml" 98 4162 4188 "L5.ml" 98 4162 4230
call(
  stack
)
type(
  ('h4 * M.key * 'd) list
)
"L5.ml" 98 4162 4231 "L5.ml" 98 4162 4232
type(
  ('h4 * M.key * 'd) list M.t
)
ident(
  int_ref f "L5.ml" 96 4030 4059 "L5.ml" 96 4030 4060
)
"L5.ml" 98 4162 4180 "L5.ml" 98 4162 4232
call(
  stack
)
type(
  ('h4 * M.key * 'd) list M.t
)
"L5.ml" 99 4235 4253 "L5.ml" 99 4235 4258
type(
  M.key ->
  (String.t -> 'i4) list ->
  (String.t -> 'i4) list M.t -> (String.t -> 'i4) list M.t
)
ident(
  ext_ref M.add
)
"L5.ml" 99 4235 4259 "L5.ml" 99 4235 4260
type(
  M.key
)
ident(
  int_ref p "L5.ml" 96 4030 4050 "L5.ml" 96 4030 4051
)
"L5.ml" 99 4235 4262 "L5.ml" 99 4235 4265
type(
  (S.elt -> String.t -> 'i4) -> S.elt list -> (String.t -> 'i4) list
)
ident(
  ext_ref List.map
)
"L5.ml" 99 4235 4271 "L5.ml" 99 4235 4272
type(
  S.elt
)
ident(
  def n "L5.ml" 99 4235 4276 "L5.ml" 100 4337 4440
)
"L5.ml" 99 4235 4280 "L5.ml" 99 4235 4281
type(
  String.t
)
ident(
  def p "L5.ml" 99 4235 4285 "L5.ml" 100 4337 4440
)
"L5.ml" 99 4235 4288 "L5.ml" 99 4235 4295
type(
  S.elt -> String.t -> bool
)
ident(
  int_ref localOf "L5.ml" 29 839 849 "L5.ml" 29 839 856
)
"L5.ml" 99 4235 4296 "L5.ml" 99 4235 4297
type(
  S.elt
)
ident(
  int_ref n "L5.ml" 99 4235 4271 "L5.ml" 99 4235 4272
)
"L5.ml" 99 4235 4298 "L5.ml" 99 4235 4299
type(
  String.t
)
ident(
  int_ref p "L5.ml" 99 4235 4280 "L5.ml" 99 4235 4281
)
"L5.ml" 99 4235 4288 "L5.ml" 99 4235 4299
call(
  stack
)
type(
  bool
)
"L5.ml" 99 4235 4313 "L5.ml" 99 4235 4314
type(
  S.elt
)
ident(
  int_ref n "L5.ml" 99 4235 4271 "L5.ml" 99 4235 4272
)
"L5.ml" 99 4235 4322 "L5.ml" 99 4235 4323
type(
  S.elt
)
ident(
  int_ref n "L5.ml" 99 4235 4271 "L5.ml" 99 4235 4272
)
"L5.ml" 99 4235 4325 "L5.ml" 99 4235 4331
type(
  String.t -> 'd
)
ident(
  int_ref typeOf "L5.ml" 28 787 797 "L5.ml" 28 787 803
)
"L5.ml" 99 4235 4332 "L5.ml" 99 4235 4333
type(
  S.elt
)
ident(
  int_ref n "L5.ml" 99 4235 4271 "L5.ml" 99 4235 4272
)
"L5.ml" 99 4235 4325 "L5.ml" 99 4235 4333
call(
  stack
)
type(
  'd
)
"L5.ml" 99 4235 4321 "L5.ml" 99 4235 4334
type(
  S.elt * 'd
)
"L5.ml" 99 4235 4316 "L5.ml" 99 4235 4334
type(
  [> `VParam of S.elt * 'd | `Var of S.elt * 'd ] as 'j4
)
"L5.ml" 99 4235 4312 "L5.ml" 99 4235 4335
type(
  S.elt * 'j4
)
"L5.ml" 99 4235 4305 "L5.ml" 99 4235 4335
type(
  'i4
)
"L5.ml" 100 4337 4415 "L5.ml" 100 4337 4416
type(
  S.elt
)
ident(
  int_ref n "L5.ml" 99 4235 4271 "L5.ml" 99 4235 4272
)
"L5.ml" 100 4337 4427 "L5.ml" 100 4337 4428
type(
  S.elt
)
ident(
  int_ref n "L5.ml" 99 4235 4271 "L5.ml" 99 4235 4272
)
"L5.ml" 100 4337 4430 "L5.ml" 100 4337 4436
type(
  String.t -> 'd
)
ident(
  int_ref typeOf "L5.ml" 28 787 797 "L5.ml" 28 787 803
)
"L5.ml" 100 4337 4437 "L5.ml" 100 4337 4438
type(
  S.elt
)
ident(
  int_ref n "L5.ml" 99 4235 4271 "L5.ml" 99 4235 4272
)
"L5.ml" 100 4337 4430 "L5.ml" 100 4337 4438
call(
  stack
)
type(
  'd
)
"L5.ml" 100 4337 4426 "L5.ml" 100 4337 4439
type(
  S.elt * 'd
)
"L5.ml" 100 4337 4418 "L5.ml" 100 4337 4439
type(
  'j4
)
"L5.ml" 100 4337 4414 "L5.ml" 100 4337 4440
type(
  S.elt * 'j4
)
"L5.ml" 100 4337 4407 "L5.ml" 100 4337 4440
type(
  'i4
)
"L5.ml" 99 4235 4285 "L5.ml" 100 4337 4440
type(
  'i4
)
"L5.ml" 99 4235 4276 "L5.ml" 100 4337 4440
type(
  String.t -> 'i4
)
"L5.ml" 99 4235 4266 "L5.ml" 101 4441 4473
type(
  S.elt -> String.t -> 'i4
)
"L5.ml" 101 4441 4474 "L5.ml" 101 4441 4479
type(
  S.elt list
)
ident(
  int_ref names "L5.ml" 97 4069 4091 "L5.ml" 97 4069 4096
)
"L5.ml" 99 4235 4261 "L5.ml" 102 4480 4507
call(
  stack
)
type(
  (String.t -> 'i4) list
)
"L5.ml" 102 4480 4508 "L5.ml" 102 4480 4509
type(
  (String.t -> 'i4) list M.t
)
ident(
  int_ref a "L5.ml" 96 4030 4062 "L5.ml" 96 4030 4063
)
"L5.ml" 99 4235 4253 "L5.ml" 102 4480 4509
call(
  stack
)
type(
  (String.t -> 'i4) list M.t
)
"L5.ml" 98 4162 4180 "L5.ml" 102 4480 4509
type(
  ('h4 * M.key * 'd) list M.t * (String.t -> 'i4) list M.t
)
"L5.ml" 97 4069 4087 "L5.ml" 102 4480 4509
type(
  ('h4 * M.key * 'd) list M.t * (String.t -> 'i4) list M.t
)
"L5.ml" 96 4030 4058 "L5.ml" 102 4480 4509
type(
  ('h4 * M.key * 'd) list M.t * (String.t -> 'i4) list M.t ->
  ('h4 * M.key * 'd) list M.t * (String.t -> 'i4) list M.t
)
"L5.ml" 96 4030 4052 "L5.ml" 102 4480 4509
type(
  S.t ->
  ('h4 * M.key * 'd) list M.t * (String.t -> 'i4) list M.t ->
  ('h4 * M.key * 'd) list M.t * (String.t -> 'i4) list M.t
)
"L5.ml" 96 4030 4045 "L5.ml" 103 4510 4526
type(
  M.key ->
  S.t ->
  ('h4 * M.key * 'd) list M.t * (String.t -> 'i4) list M.t ->
  ('h4 * M.key * 'd) list M.t * (String.t -> 'i4) list M.t
)
"L5.ml" 103 4510 4527 "L5.ml" 103 4510 4531
type(
  S.t M.t
)
ident(
  int_ref uses "L5.ml" 86 3554 3564 "L5.ml" 86 3554 3568
)
"L5.ml" 103 4510 4533 "L5.ml" 103 4510 4540
type(
  ('h4 * M.key * 'd) list M.t
)
ident(
  ext_ref M.empty
)
"L5.ml" 103 4510 4542 "L5.ml" 103 4510 4549
type(
  (String.t -> 'i4) list M.t
)
ident(
  ext_ref M.empty
)
"L5.ml" 103 4510 4532 "L5.ml" 103 4510 4550
type(
  ('h4 * M.key * 'd) list M.t * (String.t -> 'i4) list M.t
)
"L5.ml" 96 4030 4038 "L5.ml" 103 4510 4550
call(
  stack
)
type(
  ('h4 * M.key * 'd) list M.t * (String.t -> 'i4) list M.t
)
"L5.ml" 105 4561 4575 "L5.ml" 105 4561 4581
type(
  (String.t * (([> `Var ] as 'l4) * String.t * 'd) list *
   (('m4 * 'n4 * (M.key list * 'd) list) * 'k4 list) *
   ([> `Assign of
         ([> `Binop of 'q4 * 'p4 * 'p4
           | `Const of 'r4
           | `Field of 'p4 * 's4
           | `Ident of String.t * ([> `VParam of String.t * 'd ] as 't4)
           | `Index of 'p4 * 'p4
           | `Unop of 'u4 * 'p4 ]
          as 'p4) *
         ([> `Binop of 'w4 * 'v4 * 'v4
           | `Const of 'x4
           | `Field of 'v4 * 'y4
           | `Ident of String.t * ([> `VParam of String.t * 'd ] as 'z4)
           | `Index of 'v4 * 'v4
           | `Unop of 'a5 * 'v4 ]
          as 'v4)
     | `Call of
         M.key *
         ([> `Binop of 'c5 * 'b5 * 'b5
           | `Const of 'd5
           | `Field of 'b5 * 'e5
           | `Ident of
               String.t *
               ([> `VParam of String.t * 'd | `Var of String.t * 'd ] as 'f5)
           | `Index of 'b5 * 'b5
           | `Unop of 'g5 * 'b5 ]
          as 'b5)
         list * [> `Proc of 'h5 * (([> `Var ] as 'i5) * M.key * 'd) list ]
     | `Case of
         ([> `Binop of 'k5 * 'j5 * 'j5
           | `Const of 'l5
           | `Field of 'j5 * 'm5
           | `Ident of String.t * ([> `VParam of String.t * 'd ] as 'n5)
           | `Index of 'j5 * 'j5
           | `Unop of 'o5 * 'j5 ]
          as 'j5) *
         ([< `Atom of
               [> `Binop of 'q5 * 'p5 * 'p5
                | `Const of 'r5
                | `Field of 'p5 * 's5
                | `Ident of String.t * ([> `VParam of String.t * 'd ] as 't5)
                | `Index of 'p5 * 'p5
                | `Unop of 'u5 * 'p5 ]
               as 'p5
           | `Interval of 'p5 * 'p5 ]
          list * 'o4 list)
         list * 'o4 list
     | `For of
         ([> `Binop of 'k5 * 'v5 * 'v5
           | `Const of 'l5
           | `Field of 'v5 * 'm5
           | `Ident of String.t * 'n5
           | `Index of 'v5 * 'v5
           | `Unop of 'o5 * 'v5 ]
          as 'v5) *
         'j5 * 'j5 * 'p5 option * 'o4 list
     | `If of ('v4 * 'o4 list) list * 'o4 list
     | `While of 'v4 * 'o4 list ]
    as 'o4)
   list as 'k4) ->
  (String.t * ('l4 * String.t * 'd) list *
   (('m4 * 'n4 * (M.key list * 'd) list) * 'w5 list) *
   (([> `Assign of
          (([> `Binop of 'q4 * 'a6 * 'a6
             | `Const of 'r4
             | `Field of 'z5 * 's4
             | `Ident of String.t * 't4
             | `Index of 'z5 * 'z5
             | `Unop of 'u4 * 'a6 ]
            as 'a6)
           Monad.Id.t as 'z5) *
          (([> `Binop of 'w4 * 'c6 * 'c6
             | `Const of 'x4
             | `Field of 'b6 * 'y4
             | `Ident of String.t * 'z4
             | `Index of 'b6 * 'b6
             | `Unop of 'a5 * 'c6 ]
            as 'c6)
           Monad.Id.t as 'b6)
      | `Call of
          M.key *
          (([> `Binop of 'c5 * 'e6 * 'e6
             | `Const of 'd5
             | `Field of 'd6 * 'e5
             | `Ident of String.t * 'f5
             | `Index of 'd6 * 'd6
             | `Unop of 'g5 * 'e6 ]
            as 'e6)
           Monad.Id.t as 'd6)
          list * [> `Proc of 'h5 * ('i5 * M.key * 'd) list ]
      | `Case of
          (([> `Binop of 'k5 * 'g6 * 'g6
             | `Const of 'l5
             | `Field of 'f6 * 'm5
             | `Ident of String.t * 'n5
             | `Index of 'f6 * 'f6
             | `Unop of 'o5 * 'g6 ]
            as 'g6)
           Monad.Id.t as 'f6) *
          ([> `Atom of
                ([> `Binop of 'q5 * 'i6 * 'i6
                  | `Const of 'r5
                  | `Field of 'h6 * 's5
                  | `Ident of String.t * 't5
                  | `Index of 'h6 * 'h6
                  | `Unop of 'u5 * 'i6 ]
                 as 'i6)
                Monad.Id.t as 'h6
            | `Interval of 'h6 * 'h6 ]
           list * 'x5 list)
          list * 'x5 list
      | `For of 'f6 * 'f6 * 'f6 * 'h6 option * 'x5 list
      | `If of ('b6 * 'y5 list) list * 'y5 list
      | `While of 'b6 * 'y5 list ]
     as 'y5)
    Monad.Id.t as 'x5)
   list as 'w5)
)
ident(
  def modify "L5.ml" 105 4561 4567 "L5.ml" 144 6751 6822
)
"L5.ml" 105 4561 4583 "L5.ml" 105 4561 4587
type(
  String.t
)
ident(
  def name "L5.ml" 106 4620 4628 "L5.ml" 142 6688 6741
)
"L5.ml" 105 4561 4589 "L5.ml" 105 4561 4593
type(
  ('l4 * String.t * 'd) list
)
ident(
  def args "L5.ml" 106 4620 4628 "L5.ml" 142 6688 6741
)
"L5.ml" 105 4561 4597 "L5.ml" 105 4561 4598
type(
  'm4
)
ident(
  def c "L5.ml" 106 4620 4628 "L5.ml" 142 6688 6741
)
"L5.ml" 105 4561 4600 "L5.ml" 105 4561 4601
type(
  'n4
)
ident(
  def t "L5.ml" 106 4620 4628 "L5.ml" 142 6688 6741
)
"L5.ml" 105 4561 4603 "L5.ml" 105 4561 4604
type(
  (M.key list * 'd) list
)
ident(
  def v "L5.ml" 106 4620 4628 "L5.ml" 142 6688 6741
)
"L5.ml" 105 4561 4597 "L5.ml" 105 4561 4604
type(
  'm4 * 'n4 * (M.key list * 'd) list
)
"L5.ml" 105 4561 4607 "L5.ml" 105 4561 4608
type(
  'k4 list as 'j6
)
ident(
  def p "L5.ml" 106 4620 4628 "L5.ml" 142 6688 6741
)
"L5.ml" 105 4561 4596 "L5.ml" 105 4561 4608
type(
  ('m4 * 'n4 * (M.key list * 'd) list) * 'j6 as 'k6
)
"L5.ml" 105 4561 4611 "L5.ml" 105 4561 4616
type(
  'o4 list
)
ident(
  def stmts "L5.ml" 106 4620 4628 "L5.ml" 142 6688 6741
)
"L5.ml" 105 4561 4583 "L5.ml" 105 4561 4616
type(
  'k4
)
"L5.ml" 106 4620 4632 "L5.ml" 106 4620 4636
type(
  ('l4 * String.t * 'd) list
)
ident(
  def args "L5.ml" 107 4697 4705 "L5.ml" 142 6688 6741
)
"L5.ml" 106 4620 4644 "L5.ml" 106 4620 4648
type(
  ('l4 * String.t * 'd) list
)
ident(
  int_ref args "L5.ml" 105 4561 4589 "L5.ml" 105 4561 4593
)
"L5.ml" 106 4620 4651 "L5.ml" 106 4620 4657
type(
  String.t -> ('l4 * String.t * 'd) list M.t -> ('l4 * String.t * 'd) list
)
ident(
  ext_ref M.find
)
"L5.ml" 106 4620 4658 "L5.ml" 106 4620 4662
type(
  String.t
)
ident(
  int_ref name "L5.ml" 105 4561 4583 "L5.ml" 105 4561 4587
)
"L5.ml" 106 4620 4663 "L5.ml" 106 4620 4670
type(
  ('l4 * String.t * 'd) list M.t
)
ident(
  int_ref formals "L5.ml" 95 4000 4010 "L5.ml" 95 4000 4017
)
"L5.ml" 106 4620 4651 "L5.ml" 106 4620 4670
call(
  stack
)
type(
  ('l4 * String.t * 'd) list
)
"L5.ml" 106 4620 4644 "L5.ml" 106 4620 4670
call(
  stack
)
type(
  ('l4 * String.t * 'd) list
)
type(
  ('l4 * String.t * 'd) list ->
  ('l4 * String.t * 'd) list -> ('l4 * String.t * 'd) list
)
ident(
  ext_ref Pervasives.( @ )
)
"L5.ml" 106 4620 4676 "L5.ml" 106 4620 4685
type(
  exn
)
"L5.ml" 106 4620 4689 "L5.ml" 106 4620 4693
type(
  ('l4 * String.t * 'd) list
)
ident(
  int_ref args "L5.ml" 105 4561 4589 "L5.ml" 105 4561 4593
)
"L5.ml" 106 4620 4640 "L5.ml" 106 4620 4693
type(
  ('l4 * String.t * 'd) list
)
"L5.ml" 107 4697 4709 "L5.ml" 107 4697 4714
type(
  (([> `Assign of
         (([> `Binop of 'q4 * 'o6 * 'o6
            | `Const of 'r4
            | `Field of 'n6 * 's4
            | `Ident of String.t * 't4
            | `Index of 'n6 * 'n6
            | `Unop of 'u4 * 'o6 ]
           as 'o6)
          Monad.Id.t as 'n6) *
         (([> `Binop of 'w4 * 'q6 * 'q6
            | `Const of 'x4
            | `Field of 'p6 * 'y4
            | `Ident of String.t * 'z4
            | `Index of 'p6 * 'p6
            | `Unop of 'a5 * 'q6 ]
           as 'q6)
          Monad.Id.t as 'p6)
     | `Call of
         M.key *
         (([> `Binop of 'c5 * 's6 * 's6
            | `Const of 'd5
            | `Field of 'r6 * 'e5
            | `Ident of String.t * 'f5
            | `Index of 'r6 * 'r6
            | `Unop of 'g5 * 's6 ]
           as 's6)
          Monad.Id.t as 'r6)
         list * [> `Proc of 'h5 * ('i5 * M.key * 'd) list ]
     | `Case of
         (([> `Binop of 'k5 * 'u6 * 'u6
            | `Const of 'l5
            | `Field of 't6 * 'm5
            | `Ident of String.t * 'n5
            | `Index of 't6 * 't6
            | `Unop of 'o5 * 'u6 ]
           as 'u6)
          Monad.Id.t as 't6) *
         ([> `Atom of
               ([> `Binop of 'q5 * 'w6 * 'w6
                 | `Const of 'r5
                 | `Field of 'v6 * 's5
                 | `Ident of String.t * 't5
                 | `Index of 'v6 * 'v6
                 | `Unop of 'u5 * 'w6 ]
                as 'w6)
               Monad.Id.t as 'v6
           | `Interval of 'v6 * 'v6 ]
          list * 'l6 list)
         list * 'l6 list
     | `For of 't6 * 't6 * 't6 * 'v6 option * 'l6 list
     | `If of ('p6 * 'm6 list) list * 'm6 list
     | `While of 'p6 * 'm6 list ]
    as 'm6)
   Monad.Id.t as 'l6)
  list
)
ident(
  def stmts "L5.ml" 138 6498 6506 "L5.ml" 142 6688 6741
)
"L5.ml" 107 4697 4717 "L5.ml" 107 4697 4720
type(
  ('o4 -> 'l6) -> 'o4 list -> 'l6 list
)
ident(
  ext_ref List.map
)
"L5.ml" 107 4697 4726 "L5.ml" 107 4697 4730
type(
  'o4
)
ident(
  def stmt "L5.ml" 108 4734 4761 "L5.ml" 135 6423 6454
)
"L5.ml" 108 4734 4769 "L5.ml" 108 4734 4773
type(
  ([> `Binop of 'y6 * 'x6 * 'x6
    | `Const of 'z6
    | `Field of 'x6 * 'a7
    | `Ident of String.t * ([> `VParam of String.t * 'd ] as 'b7)
    | `Index of 'x6 * 'x6
    | `Unop of 'c7 * 'x6 ]
   as 'x6) ->
  (([> `Binop of 'y6 * 'e7 * 'e7
     | `Const of 'z6
     | `Field of 'd7 * 'a7
     | `Ident of String.t * 'b7
     | `Index of 'd7 * 'd7
     | `Unop of 'c7 * 'e7 ]
    as 'e7)
   Monad.Id.t as 'd7)
)
ident(
  def expr "L5.ml" 108 4734 4761 "L5.ml" 135 6423 6454
)
"L5.ml" 108 4734 4774 "L5.ml" 108 4734 4775
type(
  'x6
)
ident(
  def e "L5.ml" 108 4734 4778 "L5.ml" 120 5479 5515
)
"L5.ml" 109 4780 4809 "L5.ml" 109 4780 4830
type(
  < binop : 'x6 -> 'y6 -> 'e7 -> 'e7 -> 'e7 Monad.Id.t;
    const : 'x6 -> 'z6 -> 'd7; unop : 'x6 -> 'c7 -> 'e7 -> 'e7 Monad.Id.t > ->
  (('x6 -> 'd7) -> 'x6 -> 'd7) -> 'x6 -> 'd7
)
ident(
  ext_ref SimpleExpression.imap
)
"L5.ml" 109 4780 4832 "L5.ml" 109 4780 4853
type(
  ('x6 -> 'e7 -> 'e7) ->
  < binop : 'x6 -> 'y6 -> 'e7 -> 'e7 -> 'e7 Monad.Id.t;
    const : 'x6 -> 'z6 -> 'd7; unop : 'x6 -> 'c7 -> 'e7 -> 'e7 Monad.Id.t >
)
ident(
  ext_ref SimpleExpression.mapT
)
"L5.ml" 109 4780 4859 "L5.ml" 109 4780 4860
type(
  'x6
)
"L5.ml" 109 4780 4861 "L5.ml" 109 4780 4862
type(
  'e7
)
ident(
  def x "L5.ml" 109 4780 4866 "L5.ml" 109 4780 4867
)
"L5.ml" 109 4780 4866 "L5.ml" 109 4780 4867
type(
  'e7
)
ident(
  int_ref x "L5.ml" 109 4780 4861 "L5.ml" 109 4780 4862
)
"L5.ml" 109 4780 4861 "L5.ml" 109 4780 4867
type(
  'e7 -> 'e7
)
"L5.ml" 109 4780 4854 "L5.ml" 109 4780 4868
type(
  'x6 -> 'e7 -> 'e7
)
"L5.ml" 109 4780 4831 "L5.ml" 109 4780 4869
call(
  stack
)
type(
  < binop : 'x6 -> 'y6 -> 'e7 -> 'e7 -> 'e7 Monad.Id.t;
    const : 'x6 -> 'z6 -> 'd7; unop : 'x6 -> 'c7 -> 'e7 -> 'e7 Monad.Id.t >
)
"L5.ml" 109 4780 4809 "L5.ml" 109 4780 4869
call(
  stack
)
type(
  (('x6 -> 'd7) -> 'x6 -> 'd7) -> 'x6 -> 'd7
)
"L5.ml" 110 4873 4907 "L5.ml" 110 4873 4910
type(
  ('x6 -> 'd7) -> 'x6 -> 'd7
)
ident(
  def ext "L5.ml" 110 4873 4914 "L5.ml" 118 5398 5446
)
"L5.ml" 111 4923 4964 "L5.ml" 111 4923 4965
type(
  'x6
)
ident(
  def a "L5.ml" 111 4923 4973 "L5.ml" 111 4923 5004
)
"L5.ml" 111 4923 4967 "L5.ml" 111 4923 4968
type(
  'x6
)
ident(
  def i "L5.ml" 111 4923 4973 "L5.ml" 111 4923 5004
)
"L5.ml" 111 4923 4964 "L5.ml" 111 4923 4968
type(
  'x6 * 'x6
)
"L5.ml" 111 4923 4956 "L5.ml" 111 4923 4969
type(
  'x6
)
"L5.ml" 111 4923 4981 "L5.ml" 111 4923 4984
type(
  ('x6 -> 'd7) -> 'x6 -> 'd7
)
ident(
  int_ref ext "L5.ml" 110 4873 4907 "L5.ml" 110 4873 4910
)
"L5.ml" 111 4923 4985 "L5.ml" 111 4923 4989
type(
  'x6 -> 'd7
)
ident(
  int_ref expr "L5.ml" 108 4734 4769 "L5.ml" 108 4734 4773
)
"L5.ml" 111 4923 4990 "L5.ml" 111 4923 4991
type(
  'x6
)
ident(
  int_ref a "L5.ml" 111 4923 4964 "L5.ml" 111 4923 4965
)
"L5.ml" 111 4923 4981 "L5.ml" 111 4923 4991
call(
  stack
)
type(
  'd7
)
"L5.ml" 111 4923 4993 "L5.ml" 111 4923 4996
type(
  ('x6 -> 'd7) -> 'x6 -> 'd7
)
ident(
  int_ref ext "L5.ml" 110 4873 4907 "L5.ml" 110 4873 4910
)
"L5.ml" 111 4923 4997 "L5.ml" 111 4923 5001
type(
  'x6 -> 'd7
)
ident(
  int_ref expr "L5.ml" 108 4734 4769 "L5.ml" 108 4734 4773
)
"L5.ml" 111 4923 5002 "L5.ml" 111 4923 5003
type(
  'x6
)
ident(
  int_ref i "L5.ml" 111 4923 4967 "L5.ml" 111 4923 4968
)
"L5.ml" 111 4923 4993 "L5.ml" 111 4923 5003
call(
  stack
)
type(
  'd7
)
"L5.ml" 111 4923 4980 "L5.ml" 111 4923 5004
type(
  'd7 * 'd7
)
"L5.ml" 111 4923 4973 "L5.ml" 111 4923 5004
type(
  'd7
)
"L5.ml" 112 5005 5046 "L5.ml" 112 5005 5047
type(
  'x6
)
ident(
  def x "L5.ml" 112 5005 5055 "L5.ml" 112 5005 5077
)
"L5.ml" 112 5005 5049 "L5.ml" 112 5005 5050
type(
  'a7
)
ident(
  def f "L5.ml" 112 5005 5055 "L5.ml" 112 5005 5077
)
"L5.ml" 112 5005 5046 "L5.ml" 112 5005 5050
type(
  'x6 * 'a7
)
"L5.ml" 112 5005 5038 "L5.ml" 112 5005 5051
type(
  'x6
)
"L5.ml" 112 5005 5063 "L5.ml" 112 5005 5066
type(
  ('x6 -> 'd7) -> 'x6 -> 'd7
)
ident(
  int_ref ext "L5.ml" 110 4873 4907 "L5.ml" 110 4873 4910
)
"L5.ml" 112 5005 5067 "L5.ml" 112 5005 5071
type(
  'x6 -> 'd7
)
ident(
  int_ref expr "L5.ml" 108 4734 4769 "L5.ml" 108 4734 4773
)
"L5.ml" 112 5005 5072 "L5.ml" 112 5005 5073
type(
  'x6
)
ident(
  int_ref x "L5.ml" 112 5005 5046 "L5.ml" 112 5005 5047
)
"L5.ml" 112 5005 5063 "L5.ml" 112 5005 5073
call(
  stack
)
type(
  'd7
)
"L5.ml" 112 5005 5075 "L5.ml" 112 5005 5076
type(
  'a7
)
ident(
  int_ref f "L5.ml" 112 5005 5049 "L5.ml" 112 5005 5050
)
"L5.ml" 112 5005 5062 "L5.ml" 112 5005 5077
type(
  'd7 * 'a7
)
"L5.ml" 112 5005 5055 "L5.ml" 112 5005 5077
type(
  'd7
)
"L5.ml" 113 5078 5119 "L5.ml" 113 5078 5121
type(
  String.t
)
ident(
  def id "L5.ml" 114 5130 5165 "L5.ml" 117 5354 5397
)
"L5.ml" 113 5078 5123 "L5.ml" 113 5078 5124
type(
  'b7
)
ident(
  def e "L5.ml" 114 5130 5165 "L5.ml" 117 5354 5397
)
"L5.ml" 113 5078 5119 "L5.ml" 113 5078 5124
type(
  String.t * 'b7
)
"L5.ml" 113 5078 5111 "L5.ml" 113 5078 5125
type(
  'x6
)
"L5.ml" 114 5130 5173 "L5.ml" 114 5130 5175
type(
  String.t
)
ident(
  int_ref id "L5.ml" 113 5078 5119 "L5.ml" 113 5078 5121
)
"L5.ml" 114 5130 5181 "L5.ml" 114 5130 5188
type(
  String.t -> String.t -> bool
)
ident(
  int_ref localOf "L5.ml" 29 839 849 "L5.ml" 29 839 856
)
"L5.ml" 114 5130 5189 "L5.ml" 114 5130 5191
type(
  String.t
)
ident(
  int_ref id "L5.ml" 113 5078 5119 "L5.ml" 113 5078 5121
)
"L5.ml" 114 5130 5192 "L5.ml" 114 5130 5196
type(
  String.t
)
ident(
  int_ref name "L5.ml" 105 4561 4583 "L5.ml" 105 4561 4587
)
"L5.ml" 114 5130 5180 "L5.ml" 114 5130 5197
call(
  stack
)
type(
  bool
)
"L5.ml" 114 5130 5202 "L5.ml" 114 5130 5205
type(
  bool -> bool
)
ident(
  ext_ref Pervasives.not
)
"L5.ml" 114 5130 5207 "L5.ml" 114 5130 5216
type(
  String.t -> bool
)
ident(
  int_ref notGlobal "L5.ml" 69 2819 2829 "L5.ml" 69 2819 2838
)
"L5.ml" 114 5130 5217 "L5.ml" 114 5130 5219
type(
  String.t
)
ident(
  int_ref id "L5.ml" 113 5078 5119 "L5.ml" 113 5078 5121
)
"L5.ml" 114 5130 5206 "L5.ml" 114 5130 5220
call(
  stack
)
type(
  bool
)
"L5.ml" 114 5130 5201 "L5.ml" 114 5130 5221
type(
  bool
)
"L5.ml" 114 5130 5180 "L5.ml" 114 5130 5221
type(
  bool
)
type(
  bool -> bool -> bool
)
ident(
  ext_ref Pervasives.( or )
)
"L5.ml" 115 5223 5275 "L5.ml" 115 5223 5276
type(
  'b7
)
ident(
  int_ref e "L5.ml" 113 5078 5123 "L5.ml" 113 5078 5124
)
"L5.ml" 116 5278 5339 "L5.ml" 116 5278 5341
type(
  String.t
)
ident(
  int_ref id "L5.ml" 113 5078 5119 "L5.ml" 113 5078 5121
)
"L5.ml" 116 5278 5343 "L5.ml" 116 5278 5349
type(
  String.t -> 'd
)
ident(
  int_ref typeOf "L5.ml" 28 787 797 "L5.ml" 28 787 803
)
"L5.ml" 116 5278 5350 "L5.ml" 116 5278 5352
type(
  String.t
)
ident(
  int_ref id "L5.ml" 113 5078 5119 "L5.ml" 113 5078 5121
)
"L5.ml" 116 5278 5343 "L5.ml" 116 5278 5352
call(
  stack
)
type(
  'd
)
"L5.ml" 116 5278 5338 "L5.ml" 116 5278 5353
type(
  String.t * 'd
)
"L5.ml" 116 5278 5330 "L5.ml" 116 5278 5353
type(
  'b7
)
"L5.ml" 114 5130 5177 "L5.ml" 116 5278 5353
type(
  'b7
)
"L5.ml" 114 5130 5172 "L5.ml" 117 5354 5397
type(
  String.t * 'b7
)
"L5.ml" 114 5130 5165 "L5.ml" 117 5354 5397
type(
  'd7
)
"L5.ml" 118 5398 5431 "L5.ml" 118 5398 5432
type(
  'x6
)
ident(
  def e "L5.ml" 118 5398 5436 "L5.ml" 118 5398 5446
)
"L5.ml" 118 5398 5436 "L5.ml" 118 5398 5439
type(
  ('x6 -> 'd7) -> 'x6 -> 'd7
)
ident(
  int_ref ext "L5.ml" 110 4873 4907 "L5.ml" 110 4873 4910
)
"L5.ml" 118 5398 5440 "L5.ml" 118 5398 5444
type(
  'x6 -> 'd7
)
ident(
  int_ref expr "L5.ml" 108 4734 4769 "L5.ml" 108 4734 4773
)
"L5.ml" 118 5398 5445 "L5.ml" 118 5398 5446
type(
  'x6
)
ident(
  int_ref e "L5.ml" 118 5398 5431 "L5.ml" 118 5398 5432
)
"L5.ml" 118 5398 5436 "L5.ml" 118 5398 5446
call(
  tail
)
type(
  'd7
)
"L5.ml" 110 4873 4914 "L5.ml" 118 5398 5446
type(
  'x6 -> 'd7
)
"L5.ml" 110 4873 4902 "L5.ml" 119 5447 5477
type(
  (('x6 -> 'd7) -> 'x6 -> 'd7) -> 'x6 -> 'd7
)
"L5.ml" 109 4780 4809 "L5.ml" 119 5447 5477
type(
  ((('x6 -> 'd7) -> 'x6 -> 'd7) -> 'x6 -> 'd7) ->
  ((('x6 -> 'd7) -> 'x6 -> 'd7) -> 'x6 -> 'd7) ->
  (('x6 -> 'd7) -> 'x6 -> 'd7) -> 'x6 -> 'd7
)
ident(
  ext_ref Common.( ++ )
)
"L5.ml" 120 5479 5508 "L5.ml" 120 5479 5513
type(
  ('x6 -> 'd7) -> 'x6 -> 'd7
)
ident(
  ext_ref Common.apply
)
"L5.ml" 120 5479 5514 "L5.ml" 120 5479 5515
type(
  'x6
)
ident(
  int_ref e "L5.ml" 108 4734 4774 "L5.ml" 108 4734 4775
)
"L5.ml" 108 4734 4778 "L5.ml" 120 5479 5515
call(
  tail
)
type(
  'd7
)
"L5.ml" 108 4734 4774 "L5.ml" 120 5479 5515
type(
  'x6 -> 'd7
)
"L5.ml" 122 5547 5554 "L5.ml" 122 5547 5574
type(
  < assign : 'o4 -> 'n6 -> 'p6 -> 'm6 Monad.Id.t;
    ifc : 'o4 -> ('p6 * 'm6 list) list -> 'm6 list -> 'm6 Monad.Id.t;
    whilec : 'o4 -> 'p6 -> 'm6 list -> 'm6 Monad.Id.t > ->
  ('p4 -> 'n6 Monad.Id.t) ->
  ('v4 -> 'p6 Monad.Id.t) -> (('o4 -> 'l6) -> 'o4 -> 'l6) -> 'o4 -> 'l6
)
ident(
  ext_ref SimpleStatement.imap
)
"L5.ml" 122 5547 5576 "L5.ml" 122 5547 5596
type(
  ('o4 -> 'm6 -> 'm6) ->
  < assign : 'o4 -> 'n6 -> 'p6 -> 'm6 Monad.Id.t;
    ifc : 'o4 -> ('p6 * 'm6 list) list -> 'm6 list -> 'm6 Monad.Id.t;
    whilec : 'o4 -> 'p6 -> 'm6 list -> 'm6 Monad.Id.t >
)
ident(
  ext_ref SimpleStatement.mapT
)
"L5.ml" 122 5547 5602 "L5.ml" 122 5547 5603
type(
  'o4
)
"L5.ml" 122 5547 5604 "L5.ml" 122 5547 5605
type(
  'm6
)
ident(
  def x "L5.ml" 122 5547 5609 "L5.ml" 122 5547 5610
)
"L5.ml" 122 5547 5609 "L5.ml" 122 5547 5610
type(
  'm6
)
ident(
  int_ref x "L5.ml" 122 5547 5604 "L5.ml" 122 5547 5605
)
"L5.ml" 122 5547 5604 "L5.ml" 122 5547 5610
type(
  'm6 -> 'm6
)
"L5.ml" 122 5547 5597 "L5.ml" 122 5547 5611
type(
  'o4 -> 'm6 -> 'm6
)
"L5.ml" 122 5547 5575 "L5.ml" 122 5547 5612
call(
  stack
)
type(
  < assign : 'o4 -> 'n6 -> 'p6 -> 'm6 Monad.Id.t;
    ifc : 'o4 -> ('p6 * 'm6 list) list -> 'm6 list -> 'm6 Monad.Id.t;
    whilec : 'o4 -> 'p6 -> 'm6 list -> 'm6 Monad.Id.t >
)
"L5.ml" 122 5547 5613 "L5.ml" 122 5547 5617
type(
  'p4 -> 'n6 Monad.Id.t
)
ident(
  int_ref expr "L5.ml" 108 4734 4769 "L5.ml" 108 4734 4773
)
"L5.ml" 122 5547 5618 "L5.ml" 122 5547 5622
type(
  'v4 -> 'p6 Monad.Id.t
)
ident(
  int_ref expr "L5.ml" 108 4734 4769 "L5.ml" 108 4734 4773
)
"L5.ml" 122 5547 5554 "L5.ml" 122 5547 5622
call(
  stack
)
type(
  (('o4 -> 'l6) -> 'o4 -> 'l6) -> 'o4 -> 'l6
)
"L5.ml" 123 5626 5654 "L5.ml" 123 5626 5676
type(
  < case : 'o4 ->
           't6 ->
           (([> `Atom of 'v6 | `Interval of 'v6 * 'v6 ] as 'f7) list *
            'l6 list)
           list -> 'l6 list -> 'l6 Monad.Id.t;
    forc : 'o4 ->
           't6 -> 't6 -> 't6 -> 'v6 option -> 'l6 list -> 'l6 Monad.Id.t > ->
  ('v5 -> 't6 Monad.Id.t) ->
  ('p5 -> 'v6 Monad.Id.t) ->
  ('j5 -> 't6 Monad.Id.t) ->
  (('o4 -> 'l6 Monad.Id.t) -> 'o4 -> 'l6 Monad.Id.t) -> 'o4 -> 'l6
)
ident(
  ext_ref ExtendedStatement.imap
)
"L5.ml" 123 5626 5678 "L5.ml" 123 5626 5700
type(
  ('o4 -> 'l6 -> 'l6) ->
  < case : 'o4 ->
           't6 -> ('f7 list * 'l6 list) list -> 'l6 list -> 'l6 Monad.Id.t;
    forc : 'o4 ->
           't6 -> 't6 -> 't6 -> 'v6 option -> 'l6 list -> 'l6 Monad.Id.t >
)
ident(
  ext_ref ExtendedStatement.mapT
)
"L5.ml" 123 5626 5706 "L5.ml" 123 5626 5707
type(
  'o4
)
"L5.ml" 123 5626 5708 "L5.ml" 123 5626 5709
type(
  'l6
)
ident(
  def x "L5.ml" 123 5626 5713 "L5.ml" 123 5626 5714
)
"L5.ml" 123 5626 5713 "L5.ml" 123 5626 5714
type(
  'l6
)
ident(
  int_ref x "L5.ml" 123 5626 5708 "L5.ml" 123 5626 5709
)
"L5.ml" 123 5626 5708 "L5.ml" 123 5626 5714
type(
  'l6 -> 'l6
)
"L5.ml" 123 5626 5701 "L5.ml" 123 5626 5715
type(
  'o4 -> 'l6 -> 'l6
)
"L5.ml" 123 5626 5677 "L5.ml" 123 5626 5716
call(
  stack
)
type(
  < case : 'o4 ->
           't6 -> ('f7 list * 'l6 list) list -> 'l6 list -> 'l6 Monad.Id.t;
    forc : 'o4 ->
           't6 -> 't6 -> 't6 -> 'v6 option -> 'l6 list -> 'l6 Monad.Id.t >
)
"L5.ml" 123 5626 5717 "L5.ml" 123 5626 5721
type(
  'v5 -> 't6 Monad.Id.t
)
ident(
  int_ref expr "L5.ml" 108 4734 4769 "L5.ml" 108 4734 4773
)
"L5.ml" 123 5626 5722 "L5.ml" 123 5626 5726
type(
  'p5 -> 'v6 Monad.Id.t
)
ident(
  int_ref expr "L5.ml" 108 4734 4769 "L5.ml" 108 4734 4773
)
"L5.ml" 123 5626 5727 "L5.ml" 123 5626 5731
type(
  'j5 -> 't6 Monad.Id.t
)
ident(
  int_ref expr "L5.ml" 108 4734 4769 "L5.ml" 108 4734 4773
)
"L5.ml" 123 5626 5654 "L5.ml" 123 5626 5731
call(
  stack
)
type(
  (('o4 -> 'l6 Monad.Id.t) -> 'o4 -> 'l6 Monad.Id.t) -> 'o4 -> 'l6
)
"L5.ml" 122 5547 5554 "L5.ml" 123 5626 5731
type(
  ((('o4 -> 'l6) -> 'o4 -> 'l6) -> 'o4 -> 'l6) ->
  ((('o4 -> 'l6 Monad.Id.t) -> 'o4 -> 'l6 Monad.Id.t) -> 'o4 -> 'l6) ->
  (('o4 -> 'l6) -> 'o4 -> 'l6 Monad.Id.t) -> 'o4 -> 'l6
)
ident(
  ext_ref Common.( ++ )
)
"L5.ml" 125 5762 5794 "L5.ml" 125 5762 5798
type(
  'o4 -> 'l6
)
ident(
  def self "L5.ml" 125 5762 5802 "L5.ml" 133 6317 6358
)
"L5.ml" 126 5812 5849 "L5.ml" 126 5812 5855
type(
  M.key
)
ident(
  def pname' "L5.ml" 127 5889 5921 "L5.ml" 132 6242 6316
)
"L5.ml" 126 5812 5857 "L5.ml" 126 5812 5861
type(
  'b5 list
)
ident(
  def args "L5.ml" 127 5889 5921 "L5.ml" 132 6242 6316
)
"L5.ml" 126 5812 5870 "L5.ml" 126 5812 5875
type(
  'h5
)
ident(
  def pname "L5.ml" 127 5889 5921 "L5.ml" 132 6242 6316
)
"L5.ml" 126 5812 5877 "L5.ml" 126 5812 5882
type(
  ('i5 * M.key * 'd) list
)
ident(
  def fargs "L5.ml" 127 5889 5921 "L5.ml" 132 6242 6316
)
"L5.ml" 126 5812 5870 "L5.ml" 126 5812 5882
type(
  'h5 * ('i5 * M.key * 'd) list
)
"L5.ml" 126 5812 5863 "L5.ml" 126 5812 5883
type(
  [> `Proc of 'h5 * ('i5 * M.key * 'd) list ] as 'g7
)
"L5.ml" 126 5812 5849 "L5.ml" 126 5812 5883
type(
  M.key * 'b5 list * 'g7
)
"L5.ml" 126 5812 5842 "L5.ml" 126 5812 5884
type(
  'o4
)
"L5.ml" 127 5889 5925 "L5.ml" 127 5889 5929
type(
  (([> `Binop of 'c5 * 'i7 * 'i7
     | `Const of 'd5
     | `Field of 'h7 * 'e5
     | `Ident of String.t * 'f5
     | `Index of 'h7 * 'h7
     | `Unop of 'g5 * 'i7 ]
    as 'i7)
   Monad.Id.t as 'h7)
  list
)
ident(
  def args "L5.ml" 131 6137 6169 "L5.ml" 132 6242 6316
)
"L5.ml" 128 5933 5971 "L5.ml" 128 5933 5974
type(
  ('b5 -> 'h7) -> 'b5 list -> 'h7 list
)
ident(
  ext_ref List.map
)
"L5.ml" 128 5933 5975 "L5.ml" 128 5933 5979
type(
  'b5 -> 'h7
)
ident(
  int_ref expr "L5.ml" 108 4734 4769 "L5.ml" 108 4734 4773
)
"L5.ml" 128 5933 5980 "L5.ml" 128 5933 5984
type(
  'b5 list
)
ident(
  int_ref args "L5.ml" 126 5812 5857 "L5.ml" 126 5812 5861
)
"L5.ml" 128 5933 5971 "L5.ml" 128 5933 5984
call(
  stack
)
type(
  'h7 list
)
"L5.ml" 128 5933 5987 "L5.ml" 128 5933 5990
type(
  ((String.t -> 'h7) -> 'h7) -> (String.t -> 'h7) list -> 'h7 list
)
ident(
  ext_ref List.map
)
"L5.ml" 128 5933 5996 "L5.ml" 128 5933 5997
type(
  String.t -> 'h7
)
ident(
  def f "L5.ml" 128 5933 6001 "L5.ml" 128 5933 6007
)
"L5.ml" 128 5933 6001 "L5.ml" 128 5933 6002
type(
  String.t -> 'h7
)
ident(
  int_ref f "L5.ml" 128 5933 5996 "L5.ml" 128 5933 5997
)
"L5.ml" 128 5933 6003 "L5.ml" 128 5933 6007
type(
  String.t
)
ident(
  int_ref name "L5.ml" 105 4561 4583 "L5.ml" 105 4561 4587
)
"L5.ml" 128 5933 6001 "L5.ml" 128 5933 6007
call(
  tail
)
type(
  'h7
)
"L5.ml" 128 5933 5991 "L5.ml" 128 5933 6008
type(
  (String.t -> 'h7) -> 'h7
)
"L5.ml" 128 5933 6010 "L5.ml" 128 5933 6016
type(
  M.key -> (String.t -> 'h7) list M.t -> (String.t -> 'h7) list
)
ident(
  ext_ref M.find
)
"L5.ml" 128 5933 6017 "L5.ml" 128 5933 6023
type(
  M.key
)
ident(
  int_ref pname' "L5.ml" 126 5812 5849 "L5.ml" 126 5812 5855
)
"L5.ml" 128 5933 6024 "L5.ml" 128 5933 6031
type(
  (String.t -> 'h7) list M.t
)
ident(
  int_ref actuals "L5.ml" 95 4000 4019 "L5.ml" 95 4000 4026
)
"L5.ml" 128 5933 6009 "L5.ml" 128 5933 6032
call(
  stack
)
type(
  (String.t -> 'h7) list
)
"L5.ml" 128 5933 5987 "L5.ml" 128 5933 6032
call(
  stack
)
type(
  'h7 list
)
"L5.ml" 128 5933 5971 "L5.ml" 128 5933 6032
call(
  stack
)
type(
  'h7 list
)
type(
  'h7 list -> 'h7 list -> 'h7 list
)
ident(
  ext_ref Pervasives.( @ )
)
"L5.ml" 129 6034 6074 "L5.ml" 129 6034 6083
type(
  exn
)
"L5.ml" 129 6034 6087 "L5.ml" 129 6034 6090
type(
  ('b5 -> 'h7 Monad.Id.t) -> 'b5 list -> 'h7 list
)
ident(
  ext_ref List.map
)
"L5.ml" 129 6034 6091 "L5.ml" 129 6034 6095
type(
  'b5 -> 'h7 Monad.Id.t
)
ident(
  int_ref expr "L5.ml" 108 4734 4769 "L5.ml" 108 4734 4773
)
"L5.ml" 129 6034 6096 "L5.ml" 129 6034 6100
type(
  'b5 list
)
ident(
  int_ref args "L5.ml" 126 5812 5857 "L5.ml" 126 5812 5861
)
"L5.ml" 129 6034 6087 "L5.ml" 129 6034 6100
call(
  stack
)
type(
  'h7 list
)
"L5.ml" 128 5933 5967 "L5.ml" 129 6034 6100
type(
  'h7 list
)
"L5.ml" 131 6137 6173 "L5.ml" 131 6137 6178
type(
  ('i5 * M.key * 'd) list
)
ident(
  def fargs "L5.ml" 132 6242 6274 "L5.ml" 132 6242 6316
)
"L5.ml" 131 6137 6185 "L5.ml" 131 6137 6190
type(
  ('i5 * M.key * 'd) list
)
ident(
  int_ref fargs "L5.ml" 126 5812 5877 "L5.ml" 126 5812 5882
)
"L5.ml" 131 6137 6193 "L5.ml" 131 6137 6199
type(
  M.key -> ('i5 * M.key * 'd) list M.t -> ('i5 * M.key * 'd) list
)
ident(
  ext_ref M.find
)
"L5.ml" 131 6137 6200 "L5.ml" 131 6137 6206
type(
  M.key
)
ident(
  int_ref pname' "L5.ml" 126 5812 5849 "L5.ml" 126 5812 5855
)
"L5.ml" 131 6137 6207 "L5.ml" 131 6137 6214
type(
  ('i5 * M.key * 'd) list M.t
)
ident(
  int_ref formals "L5.ml" 95 4000 4010 "L5.ml" 95 4000 4017
)
"L5.ml" 131 6137 6193 "L5.ml" 131 6137 6214
call(
  stack
)
type(
  ('i5 * M.key * 'd) list
)
"L5.ml" 131 6137 6185 "L5.ml" 131 6137 6214
call(
  stack
)
type(
  ('i5 * M.key * 'd) list
)
type(
  ('i5 * M.key * 'd) list ->
  ('i5 * M.key * 'd) list -> ('i5 * M.key * 'd) list
)
ident(
  ext_ref Pervasives.( @ )
)
"L5.ml" 131 6137 6220 "L5.ml" 131 6137 6229
type(
  exn
)
"L5.ml" 131 6137 6233 "L5.ml" 131 6137 6238
type(
  ('i5 * M.key * 'd) list
)
ident(
  int_ref fargs "L5.ml" 126 5812 5877 "L5.ml" 126 5812 5882
)
"L5.ml" 131 6137 6181 "L5.ml" 131 6137 6238
type(
  ('i5 * M.key * 'd) list
)
"L5.ml" 132 6242 6281 "L5.ml" 132 6242 6287
type(
  M.key
)
ident(
  int_ref pname' "L5.ml" 126 5812 5849 "L5.ml" 126 5812 5855
)
"L5.ml" 132 6242 6289 "L5.ml" 132 6242 6293
type(
  'r6 list
)
ident(
  int_ref args "L5.ml" 127 5889 5925 "L5.ml" 127 5889 5929
)
"L5.ml" 132 6242 6302 "L5.ml" 132 6242 6307
type(
  'h5
)
ident(
  int_ref pname "L5.ml" 126 5812 5870 "L5.ml" 126 5812 5875
)
"L5.ml" 132 6242 6309 "L5.ml" 132 6242 6314
type(
  ('i5 * M.key * 'd) list
)
ident(
  int_ref fargs "L5.ml" 131 6137 6173 "L5.ml" 131 6137 6178
)
"L5.ml" 132 6242 6301 "L5.ml" 132 6242 6315
type(
  'h5 * ('i5 * M.key * 'd) list
)
"L5.ml" 132 6242 6295 "L5.ml" 132 6242 6315
type(
  [> `Proc of 'h5 * ('i5 * M.key * 'd) list ] as 'j7
)
"L5.ml" 132 6242 6280 "L5.ml" 132 6242 6316
type(
  M.key * 'r6 list * 'j7
)
"L5.ml" 132 6242 6274 "L5.ml" 132 6242 6316
type(
  'l6 Monad.Id.t
)
"L5.ml" 131 6137 6169 "L5.ml" 132 6242 6316
type(
  'l6 Monad.Id.t
)
"L5.ml" 127 5889 5921 "L5.ml" 132 6242 6316
type(
  'l6 Monad.Id.t
)
"L5.ml" 133 6317 6347 "L5.ml" 133 6317 6348
type(
  'o4
)
ident(
  def s "L5.ml" 133 6317 6352 "L5.ml" 133 6317 6358
)
"L5.ml" 133 6317 6352 "L5.ml" 133 6317 6356
type(
  'o4 -> 'l6
)
ident(
  int_ref self "L5.ml" 125 5762 5794 "L5.ml" 125 5762 5798
)
"L5.ml" 133 6317 6357 "L5.ml" 133 6317 6358
type(
  'o4
)
ident(
  int_ref s "L5.ml" 133 6317 6347 "L5.ml" 133 6317 6348
)
"L5.ml" 133 6317 6352 "L5.ml" 133 6317 6358
call(
  tail
)
type(
  'l6
)
"L5.ml" 125 5762 5802 "L5.ml" 133 6317 6358
type(
  'o4 -> 'l6 Monad.Id.t
)
"L5.ml" 125 5762 5789 "L5.ml" 134 6359 6387
type(
  ('o4 -> 'l6) -> 'o4 -> 'l6 Monad.Id.t
)
"L5.ml" 135 6423 6450 "L5.ml" 135 6423 6454
type(
  'o4
)
ident(
  int_ref stmt "L5.ml" 107 4697 4726 "L5.ml" 107 4697 4730
)
"L5.ml" 122 5547 5553 "L5.ml" 135 6423 6454
call(
  tail
)
type(
  'l6
)
"L5.ml" 108 4734 4761 "L5.ml" 135 6423 6454
type(
  'l6
)
"L5.ml" 107 4697 4721 "L5.ml" 136 6455 6480
type(
  'o4 -> 'l6
)
"L5.ml" 136 6455 6481 "L5.ml" 136 6455 6486
type(
  'o4 list
)
ident(
  int_ref stmts "L5.ml" 105 4561 4611 "L5.ml" 105 4561 4616
)
"L5.ml" 107 4697 4717 "L5.ml" 136 6455 6486
call(
  stack
)
type(
  'l6 list
)
"L5.ml" 138 6498 6510 "L5.ml" 138 6498 6512
type(
  (M.key list * 'd) list
)
ident(
  def v' "L5.ml" 142 6688 6696 "L5.ml" 142 6688 6741
)
"L5.ml" 139 6516 6526 "L5.ml" 139 6516 6529
type(
  (M.key list * 'd -> M.key list * 'd) ->
  (M.key list * 'd) list -> (M.key list * 'd) list
)
ident(
  ext_ref List.map
)
"L5.ml" 139 6516 6537 "L5.ml" 139 6516 6541
type(
  M.key
)
ident(
  def name "L5.ml" 139 6516 6550 "L5.ml" 139 6516 6593
)
"L5.ml" 139 6516 6536 "L5.ml" 139 6516 6542
type(
  M.key list
)
type(
  M.key list
)
"L5.ml" 139 6516 6544 "L5.ml" 139 6516 6545
type(
  'd
)
ident(
  def t "L5.ml" 139 6516 6550 "L5.ml" 139 6516 6593
)
"L5.ml" 139 6516 6536 "L5.ml" 139 6516 6545
type(
  M.key list * 'd
)
"L5.ml" 139 6516 6551 "L5.ml" 139 6516 6555
type(
  M.key
)
ident(
  int_ref name "L5.ml" 139 6516 6537 "L5.ml" 139 6516 6541
)
"L5.ml" 139 6516 6550 "L5.ml" 139 6516 6556
type(
  M.key list
)
type(
  M.key list
)
"L5.ml" 139 6516 6562 "L5.ml" 139 6516 6568
type(
  M.key -> 'd
)
ident(
  int_ref typeOf "L5.ml" 28 787 797 "L5.ml" 28 787 803
)
"L5.ml" 139 6516 6569 "L5.ml" 139 6516 6573
type(
  M.key
)
ident(
  int_ref name "L5.ml" 139 6516 6537 "L5.ml" 139 6516 6541
)
"L5.ml" 139 6516 6562 "L5.ml" 139 6516 6573
call(
  stack
)
type(
  'd
)
"L5.ml" 139 6516 6579 "L5.ml" 139 6516 6588
type(
  exn
)
"L5.ml" 139 6516 6592 "L5.ml" 139 6516 6593
type(
  'd
)
ident(
  int_ref t "L5.ml" 139 6516 6544 "L5.ml" 139 6516 6545
)
"L5.ml" 139 6516 6558 "L5.ml" 139 6516 6593
type(
  'd
)
"L5.ml" 139 6516 6550 "L5.ml" 139 6516 6593
type(
  M.key list * 'd
)
"L5.ml" 139 6516 6530 "L5.ml" 139 6516 6594
type(
  M.key list * 'd -> M.key list * 'd
)
"L5.ml" 140 6595 6606 "L5.ml" 140 6595 6613
type(
  (M.key list * 'd) list list -> (M.key list * 'd) list
)
ident(
  ext_ref List.flatten
)
"L5.ml" 140 6595 6615 "L5.ml" 140 6595 6618
type(
  (M.key list * 'd -> (M.key list * 'd) list) ->
  (M.key list * 'd) list -> (M.key list * 'd) list list
)
ident(
  ext_ref List.map
)
"L5.ml" 140 6595 6625 "L5.ml" 140 6595 6630
type(
  M.key list
)
ident(
  def names "L5.ml" 140 6595 6638 "L5.ml" 140 6595 6671
)
"L5.ml" 140 6595 6632 "L5.ml" 140 6595 6633
type(
  'd
)
ident(
  def t "L5.ml" 140 6595 6638 "L5.ml" 140 6595 6671
)
"L5.ml" 140 6595 6625 "L5.ml" 140 6595 6633
type(
  M.key list * 'd
)
"L5.ml" 140 6595 6638 "L5.ml" 140 6595 6641
type(
  (M.key -> M.key list * 'd) -> M.key list -> (M.key list * 'd) list
)
ident(
  ext_ref List.map
)
"L5.ml" 140 6595 6647 "L5.ml" 140 6595 6651
type(
  M.key
)
ident(
  def name "L5.ml" 140 6595 6655 "L5.ml" 140 6595 6664
)
"L5.ml" 140 6595 6656 "L5.ml" 140 6595 6660
type(
  M.key
)
ident(
  int_ref name "L5.ml" 140 6595 6647 "L5.ml" 140 6595 6651
)
"L5.ml" 140 6595 6655 "L5.ml" 140 6595 6661
type(
  M.key list
)
type(
  M.key list
)
"L5.ml" 140 6595 6663 "L5.ml" 140 6595 6664
type(
  'd
)
ident(
  int_ref t "L5.ml" 140 6595 6632 "L5.ml" 140 6595 6633
)
"L5.ml" 140 6595 6655 "L5.ml" 140 6595 6664
type(
  M.key list * 'd
)
"L5.ml" 140 6595 6642 "L5.ml" 140 6595 6665
type(
  M.key -> M.key list * 'd
)
"L5.ml" 140 6595 6666 "L5.ml" 140 6595 6671
type(
  M.key list
)
ident(
  int_ref names "L5.ml" 140 6595 6625 "L5.ml" 140 6595 6630
)
"L5.ml" 140 6595 6638 "L5.ml" 140 6595 6671
call(
  tail
)
type(
  (M.key list * 'd) list
)
"L5.ml" 140 6595 6619 "L5.ml" 140 6595 6672
type(
  M.key list * 'd -> (M.key list * 'd) list
)
"L5.ml" 140 6595 6673 "L5.ml" 140 6595 6674
type(
  (M.key list * 'd) list
)
ident(
  int_ref v "L5.ml" 105 4561 4603 "L5.ml" 105 4561 4604
)
"L5.ml" 140 6595 6614 "L5.ml" 140 6595 6675
call(
  stack
)
type(
  (M.key list * 'd) list list
)
"L5.ml" 140 6595 6605 "L5.ml" 140 6595 6676
call(
  stack
)
type(
  (M.key list * 'd) list
)
"L5.ml" 139 6516 6526 "L5.ml" 140 6595 6676
call(
  stack
)
type(
  (M.key list * 'd) list
)
"L5.ml" 142 6688 6696 "L5.ml" 142 6688 6700
type(
  String.t
)
ident(
  int_ref name "L5.ml" 105 4561 4583 "L5.ml" 105 4561 4587
)
"L5.ml" 142 6688 6702 "L5.ml" 142 6688 6706
type(
  ('l4 * String.t * 'd) list
)
ident(
  int_ref args "L5.ml" 106 4620 4632 "L5.ml" 106 4620 4636
)
"L5.ml" 142 6688 6710 "L5.ml" 142 6688 6711
type(
  'm4
)
ident(
  int_ref c "L5.ml" 105 4561 4597 "L5.ml" 105 4561 4598
)
"L5.ml" 142 6688 6713 "L5.ml" 142 6688 6714
type(
  'n4
)
ident(
  int_ref t "L5.ml" 105 4561 4600 "L5.ml" 105 4561 4601
)
"L5.ml" 142 6688 6716 "L5.ml" 142 6688 6718
type(
  (M.key list * 'd) list
)
ident(
  int_ref v' "L5.ml" 138 6498 6510 "L5.ml" 138 6498 6512
)
"L5.ml" 142 6688 6709 "L5.ml" 142 6688 6719
type(
  'm4 * 'n4 * (M.key list * 'd) list
)
"L5.ml" 142 6688 6721 "L5.ml" 142 6688 6724
type(
  ('k4 -> 'w5) -> 'j6 -> ('w5 list as 'k7)
)
ident(
  ext_ref List.map
)
"L5.ml" 142 6688 6725 "L5.ml" 142 6688 6731
type(
  'k4 -> 'w5
)
ident(
  int_ref modify "L5.ml" 105 4561 4575 "L5.ml" 105 4561 4581
)
"L5.ml" 142 6688 6732 "L5.ml" 142 6688 6733
type(
  'j6
)
ident(
  int_ref p "L5.ml" 105 4561 4607 "L5.ml" 105 4561 4608
)
"L5.ml" 142 6688 6721 "L5.ml" 142 6688 6733
call(
  stack
)
type(
  'k7
)
"L5.ml" 142 6688 6708 "L5.ml" 142 6688 6734
type(
  ('m4 * 'n4 * (M.key list * 'd) list) * 'k7
)
"L5.ml" 142 6688 6736 "L5.ml" 142 6688 6741
type(
  'x5 list
)
ident(
  int_ref stmts "L5.ml" 107 4697 4709 "L5.ml" 107 4697 4714
)
"L5.ml" 142 6688 6696 "L5.ml" 142 6688 6741
type(
  String.t * ('l4 * String.t * 'd) list *
  (('m4 * 'n4 * (M.key list * 'd) list) * 'k7) * 'x5 list
)
"L5.ml" 138 6498 6506 "L5.ml" 142 6688 6741
type(
  String.t * ('l4 * String.t * 'd) list *
  (('m4 * 'n4 * (M.key list * 'd) list) * 'k7) * 'x5 list
)
"L5.ml" 107 4697 4705 "L5.ml" 142 6688 6741
type(
  String.t * ('l4 * String.t * 'd) list *
  (('m4 * 'n4 * (M.key list * 'd) list) * 'k7) * 'x5 list
)
"L5.ml" 106 4620 4628 "L5.ml" 142 6688 6741
type(
  String.t * ('l4 * String.t * 'd) list *
  (('m4 * 'n4 * (M.key list * 'd) list) * 'k7) * 'x5 list
)
"L5.ml" 105 4561 4582 "L5.ml" 142 6688 6741
type(
  'k4 -> 'w5
)
"L5.ml" 144 6751 6757 "L5.ml" 144 6751 6772
type(
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list * 'l7 * 'q1 list) list as 'l7) *
  'o1 ->
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
ident(
  ext_ref L4.Lift.lambda0
)
"L5.ml" 144 6751 6774 "L5.ml" 144 6751 6778
type(
  'b
)
ident(
  int_ref name "L5.ml" 21 440 462 "L5.ml" 21 440 466
)
"L5.ml" 144 6751 6782 "L5.ml" 144 6751 6783
type(
  'c
)
ident(
  int_ref c "L5.ml" 21 440 470 "L5.ml" 21 440 471
)
"L5.ml" 144 6751 6785 "L5.ml" 144 6751 6786
type(
  ('a * 'd) list
)
ident(
  int_ref t "L5.ml" 21 440 473 "L5.ml" 21 440 474
)
"L5.ml" 144 6751 6789 "L5.ml" 144 6751 6795
type(
  ('a * 'd) list
)
ident(
  int_ref tdecls "L5.ml" 87 3593 3603 "L5.ml" 87 3593 3609
)
"L5.ml" 144 6751 6785 "L5.ml" 144 6751 6795
call(
  stack
)
type(
  ('a * 'd) list
)
type(
  ('a * 'd) list -> ('a * 'd) list -> ('a * 'd) list
)
ident(
  ext_ref Pervasives.( @ )
)
"L5.ml" 144 6751 6797 "L5.ml" 144 6751 6798
type(
  (String.t list * 'd) list
)
ident(
  int_ref v "L5.ml" 21 440 476 "L5.ml" 21 440 477
)
"L5.ml" 144 6751 6781 "L5.ml" 144 6751 6799
type(
  'c * ('a * 'd) list * (String.t list * 'd) list
)
"L5.ml" 144 6751 6801 "L5.ml" 144 6751 6804
type(
  ('e -> (String.t * ('f * String.t * 'd) list * 'l7 * 'q1 list as 'm7)) ->
  'e list -> ('m7 list as 'n7)
)
ident(
  ext_ref List.map
)
"L5.ml" 144 6751 6805 "L5.ml" 144 6751 6811
type(
  'e -> 'm7
)
ident(
  int_ref modify "L5.ml" 105 4561 4575 "L5.ml" 105 4561 4581
)
"L5.ml" 144 6751 6812 "L5.ml" 144 6751 6813
type(
  'e list
)
ident(
  int_ref p "L5.ml" 21 440 480 "L5.ml" 21 440 481
)
"L5.ml" 144 6751 6801 "L5.ml" 144 6751 6813
call(
  stack
)
type(
  'n7
)
"L5.ml" 144 6751 6780 "L5.ml" 144 6751 6814
type(
  'l7
)
"L5.ml" 144 6751 6816 "L5.ml" 144 6751 6821
type(
  'o1
)
ident(
  int_ref stmts "L5.ml" 21 440 484 "L5.ml" 21 440 489
)
"L5.ml" 144 6751 6773 "L5.ml" 144 6751 6822
type(
  'b * 'l7 * 'o1
)
"L5.ml" 144 6751 6757 "L5.ml" 144 6751 6822
call(
  tail
)
type(
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 105 4561 4567 "L5.ml" 144 6751 6822
type(
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 95 4000 4006 "L5.ml" 144 6751 6822
type(
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 87 3593 3599 "L5.ml" 144 6751 6822
type(
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 86 3554 3560 "L5.ml" 144 6751 6822
type(
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 71 2953 2959 "L5.ml" 144 6751 6822
type(
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 70 2868 2874 "L5.ml" 144 6751 6822
type(
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 69 2819 2825 "L5.ml" 144 6751 6822
type(
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 39 1291 1297 "L5.ml" 144 6751 6822
type(
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 38 1226 1232 "L5.ml" 144 6751 6822
type(
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 30 933 939 "L5.ml" 144 6751 6822
type(
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 29 839 845 "L5.ml" 144 6751 6822
type(
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 28 787 793 "L5.ml" 144 6751 6822
type(
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 27 723 729 "L5.ml" 144 6751 6822
type(
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 26 656 662 "L5.ml" 144 6751 6822
type(
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 25 620 626 "L5.ml" 144 6751 6822
type(
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 24 584 590 "L5.ml" 144 6751 6822
type(
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 23 536 542 "L5.ml" 144 6751 6822
type(
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 22 494 500 "L5.ml" 144 6751 6822
type(
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 21 440 461 "L5.ml" 144 6751 6822
type(
  'b * (('c * ('a * 'd) list * (String.t list * 'd) list) * 'e list) * 'o1 ->
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 21 440 455 "L5.ml" 144 6751 6822
type(
  'c2 ->
  'b * (('c * ('a * 'd) list * (String.t list * 'd) list) * 'e list) * 'o1 ->
  'b *
  (('c * ('a * 'd) list * (String.t list * 'd) list) *
   (String.t * ('f * String.t * 'd) list *
    (('c * ('a * 'd) list * (String.t list * 'd) list) * 'p1 list) * 
    'q1 list)
   list) *
  'o1
)
"L5.ml" 149 6920 6924 "L5.ml" 149 6920 6927
type(
  string ->
  < generate : unit -> (string * string, Ostap.Msg.t) Checked.t;
    parse : unit -> (unit, Ostap.Msg.t) Checked.t;
    print : unit -> (string, Ostap.Msg.t) Checked.t;
    resolve : unit -> (unit, Ostap.Msg.t) Checked.t;
    typecheck : unit -> ('a -> unit, Ostap.Msg.t) Checked.t >
)
ident(
  def top "L5.ml" 154 7152 7265 "L5.ml" 1 0 -1
)
"L5.ml" 149 6920 6928 "L5.ml" 149 6920 6934
type(
  string
)
ident(
  def source "L5.ml" 149 6920 6937 "L5.ml" 154 7152 7265
)
"L5.ml" 149 6920 6937 "L5.ml" 149 6920 6948
type(
  ((String.t *
    (((String.t *
       (((_[> `Binop of
                [ `Add
                | `And
                | `Div
                | `Eq
                | `Ge
                | `Gt
                | `Le
                | `Lt
                | `Mod
                | `Mul
                | `Ne
                | `Or
                | `Sub ] * 'e * 'e
            | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
            | `Field of 'd * String.t
            | `Ident of
                String.t *
                [ `Const of 'c
                | `Param of
                    String.t *
                    ([ `Array of
                         (_[> `Binop of
                                _[< `Add
                                  | `And
                                  | `Div
                                  | `Eq
                                  | `Ge
                                  | `Gt
                                  | `Le
                                  | `Lt
                                  | `Mod
                                  | `Mul
                                  | `Ne
                                  | `Or
                                  | `Sub
                                  > `And `Eq `Ge `Gt `Le `Lt `Ne `Or ] *
                                'g * 'g
                            | `Const of
                                [ `False
                                | `Literal of int Monad.Id.t Monad.Id.t
                                | `True ]
                            | `Field of 'g * string
                            | `Ident of
                                string *
                                _[> `Const of _[> `Literal of '_h ]
                                  | `Param of string * 'f
                                  | `VParam of string * 'f
                                  | `Var of string * 'f ]
                            | `Index of 'g * 'g
                            | `Unop of _[< `Neg | `Not ] * 'g ]
                          as 'g) *
                         'f
                     | `Bool
                     | `Int
                     | `Record of (String.t * 'f) list
                     | `User of String.t * String.t * 'f ] as 'f)
                | `Proc of String.t * ([ `Val | `Var ] * String.t * 'f) list
                | `Type of String.t * 'f
                | `VParam of String.t * 'f
                | `Var of String.t * 'f ]
            | `Index of 'd * 'd
            | `Literal of '_i
            | `Unop of [ `Neg | `Not ] * 'e ]
          as 'e)
         Monad.Id.t as 'd)
        Monad.Id.t Monad.Id.t Monad.Id.t as 'c))
      list * (String.t * 'f) list * (String.t list * 'f) list) *
     (String.t * ([ `Val | `Var ] * String.t * 'f) list * 'b *
      (_[> `Assign of 'c * 'c
         | `Call of
             String.t * 'c list *
             _[> `Proc of String.t * ([ `Val | `Var ] * String.t * 'f) list ]
         | `Case of
             'c *
             ([ `Atom of 'c | `Interval of 'c * 'c ] list * 'j list) list *
             'j list
         | `For of 'c * 'c * 'c * 'c option * 'j list
         | `If of ('c * 'j list) list * 'j list
         | `While of 'c * 'j list ]
       as 'j)
      list)
     list as 'b) *
    (_[> `Assign of 'c * 'c
       | `Call of
           String.t * 'c list *
           _[> `Proc of String.t * ([ `Val | `Var ] * String.t * 'f) list ]
       | `Case of
           'c *
           ([ `Atom of 'c | `Interval of 'c * 'c ] list * 'k list) list *
           'k list
       | `For of 'c * 'c * 'c * 'c option * 'k list
       | `If of ('c * 'k list) list * 'k list
       | `While of 'c * 'k list ]
     as 'k)
    list) *
   < getName : String.t -> String.t > -> string * string) ->
  (Lexer.t ->
   (Lexer.t,
    String.t *
    (((String.t *
       (_[> `Binop of
              [ `Add
              | `And
              | `Div
              | `Eq
              | `Ge
              | `Gt
              | `Le
              | `Lt
              | `Mod
              | `Mul
              | `Ne
              | `Or
              | `Sub ] * 'm * 'm
          | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
          | `Field of 'm * string
          | `Ident of String.t
          | `Index of 'm * 'm
          | `Unop of [ `Neg | `Not ] * 'm ]
        as 'm))
      list *
      (String.t *
       (_[> `Array of
              (_[> `Binop of
                     [ `Add
                     | `And
                     | `Div
                     | `Eq
                     | `Ge
                     | `Gt
                     | `Le
                     | `Lt
                     | `Mod
                     | `Mul
                     | `Ne
                     | `Or
                     | `Sub ] * 'o * 'o
                 | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
                 | `Field of 'o * string
                 | `Ident of String.t
                 | `Index of 'o * 'o
                 | `Unop of [ `Neg | `Not ] * 'o ]
               as 'o) *
              'n
          | `Bool
          | `Int
          | `Record of (String.t * 'n) list
          | `User of String.t ]
        as 'n))
      list * (String.t list * 'n) list) *
     (String.t * ([ `Val | `Var ] * String.t * 'n) list * 'l *
      (_[> `Assign of
             (_[> `Binop of
                    [ `Add
                    | `And
                    | `Div
                    | `Eq
                    | `Ge
                    | `Gt
                    | `Le
                    | `Lt
                    | `Mod
                    | `Mul
                    | `Ne
                    | `Or
                    | `Sub ] * 'q * 'q
                | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
                | `Field of 'q * String.t
                | `Ident of String.t
                | `Index of 'q * 'q
                | `Unop of [ `Neg | `Not ] * 'q ]
              as 'q) *
             'q
         | `Call of String.t * 'q list
         | `Case of
             'q *
             ([ `Atom of 'q | `Interval of 'q * 'q ] list * 'p list) list *
             'p list
         | `For of 'q * 'q * 'q * 'q option * 'p list
         | `If of ('q * 'p list) list * 'p list
         | `While of 'q * 'p list ]
       as 'p)
      list)
     list as 'l) *
    'p list, Ostap.Reason.t)
   Ostap.Combinators.result) *
  (String.t * 'l * 'p list -> Ostap.Pretty.printer) *
  (String.t * 'l * 'p list ->
   ((String.t * 'b * 'k list) * < getName : String.t -> String.t >,
    Ostap.Msg.t)
   Checked.t) *
  (String.t * 'b * 'k list ->
   (String.t *
    (((String.t * 'c) list * (String.t * 'f) list * (String.t list * 'f) list) *
     (String.t * ([ `Val | `Var ] * String.t * 'f) list * 'r *
      (_[> `Assign of
             ((_[> `Binop of
                     [ `Add
                     | `And
                     | `Div
                     | `Eq
                     | `Ge
                     | `Gt
                     | `Le
                     | `Lt
                     | `Mod
                     | `Mul
                     | `Ne
                     | `Or
                     | `Sub ] * ('t * 'f) * ('t * 'f)
                 | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
                 | `Field of ('t * 'f) * String.t
                 | `Ident of
                     String.t *
                     _[> `Const of 'c
                       | `Param of String.t * 'f
                       | `VParam of String.t * 'f
                       | `Var of String.t * 'f ]
                 | `Index of ('t * 'f) * ('t * 'f)
                 | `Unop of _[> `Neg | `Not ] * ('t * 'f) ]
               as 't) *
              'f) *
             ('t * 'f)
         | `Call of
             String.t * ('t * 'f) list *
             (String.t * 'c list *
              _[> `Proc of String.t * ([ `Val | `Var ] * String.t * 'f) list ])
         | `Case of
             ('t * 'f) *
             ([ `Atom of 't * 'f | `Interval of ('t * 'f) * ('t * 'f) ] list *
              's list)
             list * 's list
         | `For of
             ('t * 'f) * ('t * 'f) * ('t * 'f) * ('t * 'f) option * 's list
         | `If of (('t * 'f) * 's list) list * 's list
         | `While of ('t * 'f) * 's list ]
       as 's)
      list)
     list as 'r) *
    (_[> `Assign of
           ((_[> `Binop of
                   [ `Add
                   | `And
                   | `Div
                   | `Eq
                   | `Ge
                   | `Gt
                   | `Le
                   | `Lt
                   | `Mod
                   | `Mul
                   | `Ne
                   | `Or
                   | `Sub ] * ('v * 'f) * ('v * 'f)
               | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
               | `Field of ('v * 'f) * String.t
               | `Ident of
                   String.t *
                   _[> `Const of 'c
                     | `Param of String.t * 'f
                     | `VParam of String.t * 'f
                     | `Var of String.t * 'f ]
               | `Index of ('v * 'f) * ('v * 'f)
               | `Unop of _[> `Neg | `Not ] * ('v * 'f) ]
             as 'v) *
            'f) *
           ('v * 'f)
       | `Call of
           String.t * ('v * 'f) list *
           (String.t * 'c list *
            _[> `Proc of String.t * ([ `Val | `Var ] * String.t * 'f) list ])
       | `Case of
           ('v * 'f) *
           ([ `Atom of 'v * 'f | `Interval of ('v * 'f) * ('v * 'f) ] list *
            'u list)
           list * 'u list
       | `For of
           ('v * 'f) * ('v * 'f) * ('v * 'f) * ('v * 'f) option * 'u list
       | `If of (('v * 'f) * 'u list) list * 'u list
       | `While of ('v * 'f) * 'u list ]
     as 'u)
    list, Ostap.Msg.t)
   Checked.t) ->
  string ->
  < generate : unit -> (string * string, Ostap.Msg.t) Checked.t;
    parse : unit -> (unit, Ostap.Msg.t) Checked.t;
    print : unit -> (string, Ostap.Msg.t) Checked.t;
    resolve : unit -> (unit, Ostap.Msg.t) Checked.t;
    typecheck : unit -> ('a -> unit, Ostap.Msg.t) Checked.t >
)
ident(
  ext_ref L1.toplevel
)
"L5.ml" 150 6950 6958 "L5.ml" 150 6950 6959
type(
  String.t * 'b * 'k list
)
ident(
  def p "L5.ml" 151 6967 6972 "L5.ml" 153 7100 7151
)
"L5.ml" 150 6950 6961 "L5.ml" 150 6950 6962
type(
  < getName : String.t -> String.t >
)
ident(
  def n "L5.ml" 151 6967 6972 "L5.ml" 153 7100 7151
)
"L5.ml" 150 6950 6958 "L5.ml" 150 6950 6962
type(
  (String.t * 'b * 'k list) * < getName : String.t -> String.t >
)
"L5.ml" 151 6967 6976 "L5.ml" 151 6967 6982
type(
  String.t *
  (((String.t * 'c) list * (String.t * 'f) list * (String.t list * 'f) list) *
   ((String.t * ([ `Val | `Var ] * String.t * 'f) list *
     (((String.t * 'c) list * (String.t * 'f) list *
       (String.t list * 'f) list) *
      'w) *
     ([> `Assign of
           (([> `Binop of
                  [ `Add
                  | `And
                  | `Div
                  | `Eq
                  | `Ge
                  | `Gt
                  | `Le
                  | `Lt
                  | `Mod
                  | `Mul
                  | `Ne
                  | `Or
                  | `Sub ] * 'z * 'z
              | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
              | `Field of 'y * String.t
              | `Ident of
                  String.t *
                  [ `Const of 'c
                  | `Param of String.t * 'f
                  | `Proc of
                      String.t * ([ `Val | `Var ] * String.t * 'f) list
                  | `Type of String.t * 'f
                  | `VParam of String.t * 'f
                  | `Var of String.t * 'f ]
              | `Index of 'y * 'y
              | `Unop of [ `Neg | `Not ] * 'z ]
             as 'z)
            Monad.Id.t as 'y)
           Monad.Id.t Monad.Id.t Monad.Id.t *
           'y Monad.Id.t Monad.Id.t Monad.Id.t
       | `Call of
           String.t *
           (([> `Binop of
                  [ `Add
                  | `And
                  | `Div
                  | `Eq
                  | `Ge
                  | `Gt
                  | `Le
                  | `Lt
                  | `Mod
                  | `Mul
                  | `Ne
                  | `Or
                  | `Sub ] * 'b1 * 'b1
              | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
              | `Field of 'a1 * String.t
              | `Ident of
                  String.t *
                  [ `Const of 'c
                  | `Param of String.t * 'f
                  | `Proc of
                      String.t * ([ `Val | `Var ] * String.t * 'f) list
                  | `Type of String.t * 'f
                  | `VParam of String.t * 'f
                  | `Var of String.t * 'f ]
              | `Index of 'a1 * 'a1
              | `Unop of [ `Neg | `Not ] * 'b1 ]
             as 'b1)
            Monad.Id.t as 'a1)
           list *
           [> `Proc of String.t * ([ `Val | `Var ] * String.t * 'f) list ]
       | `If of
           ('y Monad.Id.t Monad.Id.t Monad.Id.t * 'x list) list * 'x list
       | `While of 'y Monad.Id.t Monad.Id.t Monad.Id.t * 'x list ]
      as 'x)
     list)
    list as 'w)) *
  ([> `Assign of 'c * 'c
    | `Call of
        String.t * 'c list *
        (_[> `Proc of String.t * ([ `Val | `Var ] * String.t * 'f) list ]
         as 'd1)
    | `If of ('c * 'c1 list) list * 'c1 list
    | `While of 'c * 'c1 list ]
   as 'c1)
  list
)
ident(
  def lifted "L5.ml" 152 7044 7049 "L5.ml" 153 7100 7151
)
"L5.ml" 151 6967 6985 "L5.ml" 151 6967 7001
type(
  (String.t *
   (((String.t * 'c) list * (String.t * 'f) list * (String.t list * 'f) list) *
    (String.t * ([ `Val | `Var ] * String.t * 'f) list * 'e1 *
     ((_[> `Assign of 'y * 'y Monad.Id.t Monad.Id.t Monad.Id.t
         | `Call of
             String.t * 'a1 list *
             ([> `Proc of String.t * ([ `Val | `Var ] * String.t * 'f) list ]
              as 'h1)
         | `Case of
             'y Monad.Id.t Monad.Id.t *
             ([ `Atom of 'y Monad.Id.t
              | `Interval of 'y Monad.Id.t * 'y Monad.Id.t ] list * 'f1 list)
             list * 'f1 list
         | `For of
             'y Monad.Id.t Monad.Id.t * 'y Monad.Id.t Monad.Id.t *
             'y Monad.Id.t Monad.Id.t * 'y Monad.Id.t option * 'f1 list
         | `If of
             ('y Monad.Id.t Monad.Id.t Monad.Id.t * 'g1 list) list * 'g1 list
         | `While of 'y Monad.Id.t Monad.Id.t Monad.Id.t * 'g1 list ]
       as 'g1)
      Monad.Id.t as 'f1)
     list)
    list as 'e1) *
   'k list) *
  < getName : String.t -> String.t > ->
  String.t *
  (((String.t * 'c) list * (String.t * 'f) list * (String.t list * 'f) list) *
   'w) *
  'c1 list
)
ident(
  ext_ref L4.Lower.program
)
"L5.ml" 151 6967 7004 "L5.ml" 151 6967 7015
type(
  < getName : String.t -> String.t > ->
  String.t *
  (((String.t * 'c) list * (String.t * 'f) list * (String.t list * 'f) list) *
   ((String.t * ([ `Val | `Var ] * String.t * 'f) list *
     (((String.t * 'c) list * (String.t * 'f) list *
       (String.t list * 'f) list) *
      'i1) *
     'j list)
    list as 'i1)) *
  'k list -> String.t * 'e1 * 'k list
)
ident(
  int_ref Lift.lambda "L5.ml" 21 440 448 "L5.ml" 21 440 454
)
"L5.ml" 151 6967 7016 "L5.ml" 151 6967 7017
type(
  < getName : String.t -> String.t >
)
ident(
  int_ref n "L5.ml" 150 6950 6961 "L5.ml" 150 6950 6962
)
"L5.ml" 151 6967 7019 "L5.ml" 151 6967 7032
type(
  String.t * 'b * 'k list ->
  String.t *
  (((String.t * 'c) list * (String.t * 'f) list * (String.t list * 'f) list) *
   'i1) *
  'k list
)
ident(
  ext_ref L4.Lift.types
)
"L5.ml" 151 6967 7033 "L5.ml" 151 6967 7034
type(
  String.t * 'b * 'k list
)
ident(
  int_ref p "L5.ml" 150 6950 6958 "L5.ml" 150 6950 6959
)
"L5.ml" 151 6967 7018 "L5.ml" 151 6967 7035
call(
  stack
)
type(
  String.t *
  (((String.t * 'c) list * (String.t * 'f) list * (String.t list * 'f) list) *
   'i1) *
  'k list
)
"L5.ml" 151 6967 7003 "L5.ml" 151 6967 7036
call(
  stack
)
type(
  String.t * 'e1 * 'k list
)
"L5.ml" 151 6967 7038 "L5.ml" 151 6967 7039
type(
  < getName : String.t -> String.t >
)
ident(
  int_ref n "L5.ml" 150 6950 6961 "L5.ml" 150 6950 6962
)
"L5.ml" 151 6967 7002 "L5.ml" 151 6967 7040
type(
  (String.t * 'e1 * 'k list) * < getName : String.t -> String.t >
)
"L5.ml" 151 6967 6985 "L5.ml" 151 6967 7040
call(
  stack
)
type(
  String.t *
  (((String.t * 'c) list * (String.t * 'f) list * (String.t list * 'f) list) *
   'w) *
  'c1 list
)
"L5.ml" 152 7044 7049 "L5.ml" 152 7044 7070
type(
  Ostap.Pretty.printer -> string
)
ident(
  ext_ref Ostap.Pretty.toString
)
"L5.ml" 152 7044 7072 "L5.ml" 152 7044 7089
type(
  String.t *
  (((String.t * 'c) list * (String.t * 'f) list * (String.t list * 'f) list) *
   (String.t * ([ `Val | `Var ] * String.t * 'f) list * 'j1 *
    (_[> `Assign of
           ((_[> `Binop of
                   [ `Add
                   | `And
                   | `Div
                   | `Eq
                   | `Ge
                   | `Gt
                   | `Le
                   | `Lt
                   | `Mod
                   | `Mul
                   | `Ne
                   | `Or
                   | `Sub ] * 'm1 * 'm1
               | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
               | `Field of 'l1 * String.t
               | `Ident of
                   String.t *
                   [ `Const of 'c
                   | `Param of String.t * 'f
                   | `Proc of
                       String.t * ([ `Val | `Var ] * String.t * 'f) list
                   | `Type of String.t * 'f
                   | `VParam of String.t * 'f
                   | `Var of String.t * 'f ]
               | `Index of 'l1 * 'l1
               | `Unop of [ `Neg | `Not ] * 'm1 ]
             as 'm1)
            Monad.Id.t as 'l1)
           Monad.Id.t Monad.Id.t Monad.Id.t *
           'l1 Monad.Id.t Monad.Id.t Monad.Id.t
       | `Call of
           String.t *
           ((_[> `Binop of
                   [ `Add
                   | `And
                   | `Div
                   | `Eq
                   | `Ge
                   | `Gt
                   | `Le
                   | `Lt
                   | `Mod
                   | `Mul
                   | `Ne
                   | `Or
                   | `Sub ] * 'o1 * 'o1
               | `Const of [ `False | `Literal of int Monad.Id.t | `True ]
               | `Field of 'n1 * String.t
               | `Ident of
                   String.t *
                   [ `Const of 'c
                   | `Param of String.t * 'f
                   | `Proc of
                       String.t * ([ `Val | `Var ] * String.t * 'f) list
                   | `Type of String.t * 'f
                   | `VParam of String.t * 'f
                   | `Var of String.t * 'f ]
               | `Index of 'n1 * 'n1
               | `Unop of [ `Neg | `Not ] * 'o1 ]
             as 'o1)
            Monad.Id.t as 'n1)
           list *
           _[> `Proc of String.t * ([ `Val | `Var ] * String.t * 'f) list ]
       | `Case of
           'l1 Monad.Id.t Monad.Id.t Monad.Id.t *
           (_[< `Atom of 'l1 Monad.Id.t Monad.Id.t Monad.Id.t
              | `Interval of
                  'l1 Monad.Id.t Monad.Id.t Monad.Id.t *
                  'l1 Monad.Id.t Monad.Id.t Monad.Id.t ]
            list * 'k1 list)
           list * 'k1 list
       | `For of
           'l1 Monad.Id.t Monad.Id.t Monad.Id.t *
           'l1 Monad.Id.t Monad.Id.t Monad.Id.t *
           'l1 Monad.Id.t Monad.Id.t Monad.Id.t *
           'l1 Monad.Id.t Monad.Id.t Monad.Id.t option * 'k1 list
       | `If of
           ('l1 Monad.Id.t Monad.Id.t Monad.Id.t * 'k1 list) list * 'k1 list
       | `While of 'l1 Monad.Id.t Monad.Id.t Monad.Id.t * 'k1 list ]
     as 'k1)
    list)
   list as 'j1) *
  (_[> `Assign of 'c * 'c
     | `Call of String.t * 'c list * 'd1
     | `Case of
         'c *
         (_[< `Atom of 'c | `Interval of 'c * 'c ] list * 'p1 list) list *
         'p1 list
     | `For of 'c * 'c * 'c * 'c option * 'p1 list
     | `If of ('c * 'p1 list) list * 'p1 list
     | `While of 'c * 'p1 list ]
   as 'p1)
  list -> Ostap.Pretty.printer
)
ident(
  ext_ref L4.PrintR.program
)
"L5.ml" 152 7044 7090 "L5.ml" 152 7044 7096
type(
  String.t * 'j1 * 'p1 list
)
ident(
  int_ref lifted "L5.ml" 151 6967 6976 "L5.ml" 151 6967 6982
)
"L5.ml" 152 7044 7071 "L5.ml" 152 7044 7097
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L5.ml" 152 7044 7049 "L5.ml" 152 7044 7097
call(
  stack
)
type(
  string
)
"L5.ml" 153 7100 7105 "L5.ml" 153 7100 7126
type(
  Ostap.Pretty.printer -> string
)
ident(
  ext_ref Ostap.Pretty.toString
)
"L5.ml" 153 7100 7128 "L5.ml" 153 7100 7143
type(
  String.t *
  (((String.t * 'c) list * (String.t * 'f) list * (String.t list * 'f) list) *
   ((String.t * ([ `Val | `Var ] * String.t * 'f) list *
     (((String.t * 'c) list * (String.t * 'f) list *
       (String.t list * 'f) list) *
      'q1) *
     (_[> `Assign of 'c * 'c
        | `Call of String.t * 'c list * 'd1
        | `If of ('c * 'r1 list) list * 'r1 list
        | `While of 'c * 'r1 list ]
      as 'r1)
     list)
    list as 'q1)) *
  'r1 list -> Ostap.Pretty.printer
)
ident(
  ext_ref L4.CGen.program
)
"L5.ml" 153 7100 7144 "L5.ml" 153 7100 7150
type(
  String.t *
  (((String.t * 'c) list * (String.t * 'f) list * (String.t list * 'f) list) *
   'q1) *
  'r1 list
)
ident(
  int_ref lifted "L5.ml" 151 6967 6976 "L5.ml" 151 6967 6982
)
"L5.ml" 153 7100 7127 "L5.ml" 153 7100 7151
call(
  stack
)
type(
  Ostap.Pretty.printer
)
"L5.ml" 153 7100 7105 "L5.ml" 153 7100 7151
call(
  stack
)
type(
  string
)
"L5.ml" 152 7044 7049 "L5.ml" 153 7100 7151
type(
  string * string
)
"L5.ml" 151 6967 6972 "L5.ml" 153 7100 7151
type(
  string * string
)
"L5.ml" 150 6950 6952 "L5.ml" 154 7152 7155
type(
  (String.t * 'b * 'k list) * < getName : String.t -> String.t > ->
  string * string
)
"L5.ml" 154 7152 7157 "L5.ml" 154 7152 7173
type(
  Lexer.t ->
  (Lexer.t, String.t * 'l * 'p list, Ostap.Reason.t) Ostap.Combinators.result
)
ident(
  ext_ref L4.Parse.program
)
"L5.ml" 154 7152 7175 "L5.ml" 154 7152 7191
type(
  String.t * 'l * 'p list -> Ostap.Pretty.printer
)
ident(
  ext_ref L4.Print.program
)
"L5.ml" 154 7152 7193 "L5.ml" 154 7152 7211
type(
  bool ->
  ([ `Const of 'c
   | `Param of String.t * 'f
   | `Proc of String.t * ([ `Val | `Var ] * String.t * 'f) list
   | `Type of String.t * 'f
   | `VParam of String.t * 'f
   | `Var of String.t * 'f ], 'f)
  Resolve.env ->
  String.t * 'l * 'p list ->
  ((String.t * 'b * 'k list) * < getName : String.t -> String.t >,
   Ostap.Msg.t)
  Checked.t
)
ident(
  ext_ref L4.Resolve.program
)
"L5.ml" 154 7152 7212 "L5.ml" 154 7152 7217
type(
  bool
)
"L5.ml" 154 7152 7218 "L5.ml" 154 7152 7235
type(
  ([ `Const of 'c
   | `Param of String.t * 'f
   | `Proc of String.t * ([ `Val | `Var ] * String.t * 'f) list
   | `Type of String.t * 'f
   | `VParam of String.t * 'f
   | `Var of String.t * 'f ], 'f)
  Resolve.env
)
"L5.ml" 154 7152 7193 "L5.ml" 154 7152 7235
call(
  stack
)
type(
  String.t * 'l * 'p list ->
  ((String.t * 'b * 'k list) * < getName : String.t -> String.t >,
   Ostap.Msg.t)
  Checked.t
)
"L5.ml" 154 7152 7237 "L5.ml" 154 7152 7257
type(
  String.t * 'b * 'k list -> (String.t * 'r * 'u list, Ostap.Msg.t) Checked.t
)
ident(
  ext_ref L4.Typecheck.program
)
"L5.ml" 154 7152 7156 "L5.ml" 154 7152 7258
type(
  (Lexer.t ->
   (Lexer.t, String.t * 'l * 'p list, Ostap.Reason.t)
   Ostap.Combinators.result) *
  (String.t * 'l * 'p list -> Ostap.Pretty.printer) *
  (String.t * 'l * 'p list ->
   ((String.t * 'b * 'k list) * < getName : String.t -> String.t >,
    Ostap.Msg.t)
   Checked.t) *
  (String.t * 'b * 'k list ->
   (String.t * 'r * 'u list, Ostap.Msg.t) Checked.t)
)
"L5.ml" 154 7152 7259 "L5.ml" 154 7152 7265
type(
  string
)
ident(
  int_ref source "L5.ml" 149 6920 6928 "L5.ml" 149 6920 6934
)
"L5.ml" 149 6920 6937 "L5.ml" 154 7152 7265
call(
  tail
)
type(
  < generate : unit -> (string * string, Ostap.Msg.t) Checked.t;
    parse : unit -> (unit, Ostap.Msg.t) Checked.t;
    print : unit -> (string, Ostap.Msg.t) Checked.t;
    resolve : unit -> (unit, Ostap.Msg.t) Checked.t;
    typecheck : unit -> ('a -> unit, Ostap.Msg.t) Checked.t >
)
"L5.ml" 149 6920 6928 "L5.ml" 154 7152 7265
type(
  string ->
  < generate : unit -> (string * string, Ostap.Msg.t) Checked.t;
    parse : unit -> (unit, Ostap.Msg.t) Checked.t;
    print : unit -> (string, Ostap.Msg.t) Checked.t;
    resolve : unit -> (unit, Ostap.Msg.t) Checked.t;
    typecheck : unit -> ('a -> unit, Ostap.Msg.t) Checked.t >
)
